<?xml version="1.0"?>

<project name="Seam" default="build" basedir=".">
    
    <tstamp/>

    <!-- Allow this to be overriden by others importing this project. -->
    <dirname property="imported.basedir" file="${ant.file.Seam}"/>

    <!-- Give user a chance to override without editing this file or typing -D -->
    <property file="${imported.basedir}/build.properties"/>

    <!-- Name of project and version, used to create filenames -->
    <property name="Name"                 value="JBoss Seam"/>
    <property name="name"                 value="jboss-seam"/>
    <property name="version"              value="1.1"/>
    <property name="patchlevel"           value="1.GA"/>

    <!-- set global properties for this build -->
    <property name="build.dir"            value="build"/>
    <property name="classes.dir"          value="${build.dir}/classes"/>    
    <property name="uiclasses.dir"        value="${build.dir}/uiclasses"/>
    <property name="pdfclasses.dir"       value="${build.dir}/pdfclasses"/>
    <property name="debugclasses.dir"     value="${build.dir}/debugclasses"/>
    <property name="coverage.dir"         value="${build.dir}/coverage"/>
    
    <property name="genclasses.dir"       value="${build.dir}/genclasses"/>

    <property name="src.java.dir"         value="src/main"/>
    <property name="src.ui.dir"           value="src/ui"/>
    <property name="src.pdf.dir"          value="src/pdf"/>
    <property name="src.debug.dir"        value="src/debug"/>
    <property name="src.gen.dir"          value="src/gen"/>
    <property name="src.test.dir"         value="src/test/misc"/>

    <property name="lib.dir"              value="${imported.basedir}/lib"/>
    <property name="drools.lib.dir"       value="${imported.basedir}/drools/lib"/>
    <property name="eejb.conf.dir"        value="${imported.basedir}/embedded-ejb/conf"/>
    <property name="mc.conf.dir"          value="${imported.basedir}/microcontainer/conf"/>
    <property name="example.coverage.dir" value="${imported.basedir}/build/coverage"/>
    <property name="drools.dir"           value="${imported.basedir}/drools"/>
    <property name="hibernate.dir"        value="${imported.basedir}/hibernate"/>
    <property name="seamgen.dir"          value="${imported.basedir}/seam-gen"/>

    <property name="doc.dir"              value="doc"/>
    <property name="doc.api.dir"          value="${doc.dir}/api"/>
    <property name="doc.ref.dir"          value="${doc.dir}/reference"/>
    <property name="javadoc.link"         value="http://java.sun.com/j2se/5.0/docs/api"/>
    
    <property name="dist.name"            value="${name}-${version}.${patchlevel}"/>
    
    <property name="dist.dir"             value="${imported.basedir}/../${dist.name}"/>
    <property name="dist.doc.dir"         value="${dist.dir}/doc"/>
    <property name="dist.api.dir"         value="${dist.dir}/doc/api"/>
    <property name="dist.ref.dir"         value="${dist.dir}/doc/reference"/>
    <property name="dist.src.java.dir"    value="${dist.dir}/src/main"/>
    <property name="dist.src.ui.dir"      value="${dist.dir}/src/ui"/>
    <property name="dist.src.pdf.dir"     value="${dist.dir}/src/pdf"/>
    <property name="dist.src.debug.dir"   value="${dist.dir}/src/debug"/>
    <property name="dist.src.gen.dir"     value="${dist.dir}/src/gen"/>
    <property name="dist.src.test.dir"    value="${dist.dir}/src/test"/>
    <property name="dist.lib.dir"         value="${dist.dir}/lib"/>
    <property name="dist.eejb.conf.dir"   value="${dist.dir}/embedded-ejb/conf"/>
    <property name="dist.mc.conf.dir"     value="${dist.dir}/microcontainer/conf"/>
    <property name="dist.drools.dir"      value="${dist.dir}/drools"/>
    <property name="dist.hibernate.dir"   value="${dist.dir}/hibernate"/>
    <property name="dist.seamgen.dir"     value="${dist.dir}/seam-gen"/>
    
    <property name="deploy.dir"           value="${jboss.home}/server/default/deploy"/>
    <property name="webroot.dir"          value="${deploy.dir}/jbossweb-tomcat55.sar/ROOT.war"/>
    
    <property name="testng.jar"           value="${imported.basedir}/lib/testng-4.5.1-jdk15.jar"/>

    <property name="javac.debug"          value="true"/>
    <property name="javac.deprecation"    value="false"/>
    
    <property name="example.docroot.dir"     value="view"/>
    <property name="example.resources.dir"   value="resources"/>
    <property name="example.webinf.dir"      value="${example.resources.dir}/WEB-INF"/>
    <property name="example.webinf.lib.dir"  value="${example.resources.dir}/WEB-INF/lib"/>
    <property name="example.ds"              value="${example.name}-ds.xml"/>

    <path id="example.path" />
    
    <fileset id="lib" 
            dir="${imported.basedir}"
        description="compile-time dependencies">
        <include name="lib/*.jar"/>
        <include name="drools/lib/*.jar"/>
    </fileset>
    
    <zipfileset id="example.seam.misc.jar" 
               dir="${imported.basedir}"
            prefix="WEB-INF/lib"
       description="the Seam jars">
        <include name="jboss-seam-debug.jar" if="example.seam.debug.lib"/>
        <include name="jboss-seam-ui.jar"    if="example.seam.ui.lib"/>
        <include name="jboss-seam-pdf.jar"   if="example.seam.pdf.lib"/>
    </zipfileset>
    

    <zipfileset id="example.itext.jar"
               dir="${lib.dir}"
           prefix="WEB-INF/lib"
      description="the itext jar">
        <include name="itext-*.jar" if="example.seam.pdf.lib"/>
    </zipfileset>


    <zipfileset id="example.seam.main.jar" 
               dir="${imported.basedir}"
       description="the main Seam jar">
        <include name="${name}.jar"/>
    </zipfileset>

    <zipfileset id="example.facelets.jar" 
               dir="${lib.dir}"
           prefix="WEB-INF/lib"
      description="the facelets jar">
        <include name="jsf-facelets.jar" if="example.facelets.lib"/>
    </zipfileset>
    
    <zipfileset id="example.extra.jar" 
               dir="${lib.dir}" 
       description="extra jars for the EAR">
        <include name="el-*.jar" />
        <include name="jbpm*.jar" if="example.jbpm.lib"/>
        <include name="jboss-cache-jdk50.jar" if="example.cache.lib"/>
        <include name="jboss-aop-jdk50.jar" if="example.cache.lib"/>
        <include name="jgroups.jar" if="example.cache.lib"/>
    </zipfileset>
    
    <zipfileset id="example.drools.jar" 
               dir="${drools.lib.dir}" 
       description="the Drools jars">
        <include name="*.jar" if="example.drools.lib"/>
    </zipfileset>
            
    <fileset id="example.resources" 
            dir="${example.resources.dir}">
        <include name="**/*.*"/>
    </fileset>

    <zipfileset id="example.war.docroot"
               dir="${example.docroot.dir}">
        <include name="**/*"/>
    </zipfileset>
    
    <zipfileset id="example.war.webinf"
            prefix="WEB-INF"
               dir="${example.webinf.dir}" >
        <patternset refid="meta.files"/>
    </zipfileset>
    
    <zipfileset id="example.war.webinf.lib"
            prefix="WEB-INF/lib"
               dir="${example.webinf.lib.dir}">
        <include name="*.jar"/>
    </zipfileset>

    <fileset id="example.ejb3.resources"
            dir="${example.resources.dir}">
        <include name="import.sql"/>
        <include name="seam.properties"/>
        <include name="META-INF/persistence.xml"/>
        <include name="META-INF/ejb-jar.xml"/>
        <include name="META-INF/components.xml"/>
        <include name="META-INF/jboss.xml"/>
        <include name="META-INF/security-config.xml"/>
        <include name="META-INF/security-rules.drl"/>
    </fileset>
    
    <zipfileset id="example.ear.resources"
               dir="${example.resources.dir}">
        <include name="META-INF/application.xml"/>
        <include name="META-INF/jboss-app.xml"/>
        <include name="META-INF/*-service.xml"/>
        <include name="META-INF/*-xmbean.xml"/>
        <include name="treecache.xml"/>
        <include name="*.jpdl.xml"/>
        <exclude name=".gpd.*"/>
        <include name="*.cfg.xml"/>
        <include name="*.xsd"/>
        <include name="*.drl"/>
    </zipfileset>

    <fileset id="example.deploy"
            dir="${example.resources.dir}">
        <include name="${example.ds}"/>
    </fileset>
    
    <patternset id="example.undeploy">
        <include name="${example.ds}"/>
    </patternset>
    
    <zipfileset id="example.tomcat.war.webinf"
            prefix="WEB-INF"
               dir="resources/WEB-INF" >
        <include name="**/*.*"/>
    </zipfileset>
    
    <fileset id="example.tomcat.resources"
            dir="resources">
        <include name="**/*.*"/>
        <exclude name="WEB-INF/**/*.*"/>
    </fileset>
    
    <zipfileset id="example.tomcat.lib" 
            prefix="WEB-INF/lib"
               dir="${lib.dir}"
       description="run-time dependencies for tomcat deployment">
        <include name="*.jar"/>
        <exclude name="jsf-facelets*.jar"/>
        <exclude name="jboss-*-jdk50.jar"/>
        <exclude name="jgroups*.jar"/>
        <exclude name="jbpm*.jar"/>
        <exclude name="servlet-api.jar"/>
        <exclude name="ant*.jar"/>
        <exclude name="javax.servlet.jsp.jar"/>
        <exclude name="testng-*.jar"/>
    </zipfileset>
    
    <zipfileset id="example.tomcat.seam.jar" 
            prefix="WEB-INF/lib"
            dir="${imported.basedir}">
        <include name="${name}.jar"/>
        <include name="jboss-seam-debug.jar" if="example.seam.debug.lib"/>
        <include name="jboss-seam-ui.jar"    if="example.seam.ui.lib"/>
        <include name="jboss-seam-pdf.jar"   if="example.seam.pdf.lib"/>
    </zipfileset>
    
    <zipfileset id="example.tomcat.drools.jar" 
            prefix="WEB-INF/lib"
            dir="${drools.lib.dir}">
        <include name="*.jar" if="example.drools.lib"/>
    </zipfileset>
    
    <zipfileset id="example.tomcat.extra.jar" 
            prefix="WEB-INF/lib"
            dir="${lib.dir}">
        <include name="jsf-facelets.jar" if="example.facelets.lib"/>
        <include name="jboss-cache-jdk50.jar" if="example.cache.lib"/>
        <include name="jboss-aop-jdk50.jar" if="example.cache.lib"/>
        <include name="jgroups.jar" if="example.cache.lib"/>
        <include name="jbpm*.jar" if="example.jbpm.lib"/>
    </zipfileset>
        
    <path id="build.classpath">
        <path refid="example.path"/>
        <fileset refid="lib"/>
        <fileset refid="example.seam.main.jar"/>
    </path>
    
    <property name="test.classpath" value="test.classpath"/>
    
    <path id="test.classpath">
        <path refid="build.classpath"/>
     </path>
    
    <path id="test.mc.classpath">
        <path refid="build.classpath"/>
        <path path="${mc.conf.dir}"/>
     </path>

    <path id="test.eejb.classpath">
        <path refid="build.classpath"/>
        <path path="${eejb.conf.dir}"/>
     </path>
     
    <path id="classpath.emma">
      <pathelement location="${basedir}/extras/emma/emma.jar"/>
      <pathelement location="${basedir}/extras/emma/emma_ant.jar"/>
    </path>      

    <path id="example.classpath.emma">
      <pathelement location="${imported.basedir}/extras/emma/emma.jar"/>
      <pathelement location="${imported.basedir}/extras/emma/emma_ant.jar"/>
    </path>      

    <fileset id="eejb.conf" 
            dir="${eejb.conf.dir}">
        <include name="ejb3-interceptors-aop.xml"/>
        <include name="embedded-jboss-beans.xml"/>
        <include name="jboss-jms-beans.xml"/>
        <include name="security-beans.xml"/>
        <include name="login-config.xml"/>
        <include name="default.persistence.properties"/>
        <include name="log4j.xml"/>
        <include name="jndi.properties"/>
    </fileset>
    
    <fileset id="mc.conf" 
            dir="${mc.conf.dir}">
        <include name="log4j.xml"/>
        <include name="jndi.properties"/>
    </fileset>
    
    <patternset id="meta.files">
        <include name="**/*.dtd"/>
        <include name="**/*.xml"/>
        <include name="**/*.tld"/>
        <include name="**/*.xslt"/>
        <include name="**/*.properties"/>
        <include name="**/*.js"/>
        <include name="**/*.html"/>
        <include name="**/*.xhtml"/>
    </patternset>
        
    <patternset id="src.files">
        <!-- include everything we want in the src directory
            that we didn't want in the jar itself -->
        <include name="**/*.java"/>
    </patternset>

    <patternset id="refdoc.files">
        <include name="**/*.css"/>
        <include name="**/*.jpg"/>
        <include name="**/*.gif"/>
        <include name="**/*.png"/>
    </patternset>

    <!-- ############################ Targets #############################-->

    <target name="clean"
            description="Cleans up the build directory">
        <delete dir="${build.dir}"/>
        <delete dir="test-output"/>
        <delete dir="report"/>
    </target>

    <target name="cleandist"
            description="Cleans up the dist directory">
        <delete dir="${dist.dir}"/>
    </target>

    <target name="cleanall"
            depends="clean,cleandist"
            description="Cleans up everything">

        <ant dir="examples/booking" target="clean" inheritall="false"/>
        <ant dir="examples/hibernate" target="clean" inheritall="false"/>
        <ant dir="examples/icefaces" target="clean" inheritall="false"/>
        <ant dir="examples/blog" target="clean" inheritall="false"/>
        <ant dir="examples/issues" target="clean" inheritall="false"/>
        <ant dir="examples/dvdstore" target="clean" inheritall="false"/>
        <ant dir="examples/contactlist" target="clean" inheritall="false"/>
        <ant dir="examples/seampay" target="clean" inheritall="false"/>
        <ant dir="examples/messages" target="clean" inheritall="false"/>
        <ant dir="examples/numberguess" target="clean" inheritall="false"/>
        <ant dir="examples/registration" target="clean" inheritall="false"/>
        <ant dir="examples/todo" target="clean" inheritall="false"/>
        <ant dir="examples/portal" target="clean" inheritall="false"/>
        <ant dir="examples/drools" target="clean" inheritall="false"/>
        <ant dir="examples/remoting/helloworld" target="clean" inheritall="false"/>
        <ant dir="examples/remoting/chatroom" target="clean" inheritall="false"/>
        <ant dir="examples/remoting/progressbar" target="clean" inheritall="false"/>
        <ant dir="examples/hibernate2" target="clean" inheritall="false"/>
        <ant dir="examples/jpa" target="clean" inheritall="false"/>
        <ant dir="examples/glassfish" target="clean" inheritall="false"/>

    </target>
    
    <target name="undeployall" 
            description="Undeploy all examples">
        <ant dir="examples/booking" target="undeploy" inheritall="false"/>
        <ant dir="examples/hibernate" target="undeploy" inheritall="false"/>
        <ant dir="examples/icefaces" target="undeploy" inheritall="false"/>
        <ant dir="examples/blog" target="undeploy" inheritall="false"/>
        <ant dir="examples/issues" target="undeploy" inheritall="false"/>
        <ant dir="examples/dvdstore" target="undeploy" inheritall="false"/>
        <ant dir="examples/contactlist" target="undeploy" inheritall="false"/>
        <ant dir="examples/seampay" target="undeploy" inheritall="false"/>
        <ant dir="examples/messages" target="undeploy" inheritall="false"/>
        <ant dir="examples/numberguess" target="undeploy" inheritall="false"/>
        <ant dir="examples/registration" target="undeploy" inheritall="false"/>
        <ant dir="examples/todo" target="undeploy" inheritall="false"/>
        <ant dir="examples/drools" target="undeploy" inheritall="false"/>
        <ant dir="examples/remoting/helloworld" target="undeploy" inheritall="false"/>
        <ant dir="examples/remoting/chatroom" target="undeploy" inheritall="false"/>
        <ant dir="examples/remoting/progressbar" target="undeploy" inheritall="false"/>
        <ant dir="examples/hibernate2" target="undeploy" inheritall="false"/>
        <ant dir="examples/jpa" target="undeploy" inheritall="false"/>

        <ant dir="examples/booking" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/hibernate" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/icefaces" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/dvdstore" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/blog" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/issues" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/contactlist" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/registration" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/messages" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/todo" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/drools" target="undeploy.tomcat" inheritall="false"/>
        <ant dir="examples/numberguess" target="undeploy.tomcat" inheritall="false"/>
    </target>

    <target name="deploypresentation" 
            depends="build"
            description="Deploy all examples used in Seam presentations">
        <ant dir="examples/booking" target="deploy" inheritall="false"/>
        <ant dir="examples/issues" target="deploy" inheritall="false"/>
        <ant dir="examples/dvdstore" target="deploy" inheritall="false"/>
        <ant dir="examples/remoting/progressbar" target="deploy" inheritall="false"/>
        <ant dir="examples/remoting/chatroom" target="deploy" inheritall="false"/>
        <copy file="examples/seam-examples.html" todir="${webroot.dir}"/>
        <replace file="${webroot.dir}/seam-examples.html" token="http://localhost:8080" value=""/>
    </target>

    <target name="init"
            description="Initialize the build">
        <echo message="Build ${Name} ${version}"/>
        
        <mkdir dir="${classes.dir}"/>
        <copy todir="${classes.dir}">
            <fileset dir="${src.java.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        
    </target>

    <target name="initui"
            description="Initialize the build for the UI package">
        <echo message="Build ${Name} UI ${version}"/>

        <mkdir dir="${uiclasses.dir}"/>
        <copy todir="${uiclasses.dir}">
            <fileset dir="${src.ui.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        
    </target>

    <target name="initpdf"
            description="Initialize the build for the PDF package">
        <echo message="Build ${Name} PDF ${version}"/>

        <mkdir dir="${pdfclasses.dir}"/>
        <copy todir="${pdfclasses.dir}">
            <fileset dir="${src.pdf.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        
    </target>

    <target name="initdebug"
            description="Initialize the build for the debug package">
        <echo message="Build ${Name} Debug ${version}"/>

        <mkdir dir="${debugclasses.dir}"/>
        <copy todir="${debugclasses.dir}">
            <fileset dir="${src.debug.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        
    </target>
    
    <target name="initgen"
            description="Initialize the build for the seam-gen package">
            <echo message="Build ${Name} GEN ${version}"/>

            <mkdir dir="${genclasses.dir}"/>
            <copy todir="${genclasses.dir}">
                <fileset dir="${src.gen.dir}">
                    <patternset refid="meta.files"/>
                </fileset>
            </copy>            
    </target>
    
    <target name="antlr"
            description="Generate ANTLR parser">
        <mkdir dir="${src.java.dir}/org/jboss/seam/text"/>
        <taskdef name="antlrtask" classname="org.apache.tools.ant.taskdefs.optional.ANTLR">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="ant-antlr-*.jar"/>
                    <include name="antlr-*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
        <antlrtask target="seam-text.g" outputdirectory="${src.java.dir}/org/jboss/seam/text">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="ant-antlr-*.jar"/>
                    <include name="antlr-*.jar"/>
                </fileset>
            </classpath>
        </antlrtask>
    </target>

    <target name="select-compiler">
        <available classname="org.eclipse.jdt.core.JDTCompilerAdapter" 
                property="build.compiler" 
                value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
    </target>

    <target name="compile" depends="init,select-compiler"
            description="Compile the Java source code of the example">
        <javac
            source="1.5"
            target="1.5"
            destdir="${classes.dir}"
            classpathref="build.classpath"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            nowarn="on">
            <src path="${src.java.dir}"/>
            <src path="${src.test.dir}"/>
        </javac>
    </target>
    
    <target name="compilecore" depends="init,select-compiler,antlr"
            description="Compile the Java source code for the core package">
        <javac
            source="1.5"
            target="1.5"
            destdir="${classes.dir}"
            classpathref="build.classpath"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            nowarn="on">
            <src path="${src.java.dir}"/>
            <src path="${src.test.dir}"/>
        </javac>
    </target>
    
    <target name="compileui" depends="initui,select-compiler"
            description="Compile the Java source code for the UI package">
        <javac
            source="1.5"
            target="1.5"
            destdir="${uiclasses.dir}"
            classpathref="build.classpath"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            nowarn="on">
            <src path="${src.ui.dir}"/>
        </javac>
    </target>

    <target name="compilepdf" depends="initpdf,select-compiler"
            description="Compile the Java source code for the PDF package">
        <javac
            source="1.5"
            target="1.5"
            destdir="${pdfclasses.dir}"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            nowarn="on">
            <src path="${src.pdf.dir}"/>
            <classpath>
                <path refid="build.classpath" />
                <fileset dir="${imported.basedir}">
                    <include name="jboss-seam-ui.jar" />
                </fileset>
            </classpath>
        </javac>
    </target>
    
    <target name="compiledebug" depends="initdebug,select-compiler"
            description="Compile the Java source code for the debug package">
        <javac
            source="1.5"
            target="1.5"
            destdir="${debugclasses.dir}"
            classpathref="build.classpath"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            nowarn="on">
            <src path="${src.debug.dir}"/>
        </javac>
    </target>
    
     <target name="compilegen" depends="initgen,select-compiler"
                description="Compile the Java source code for the seam-gen package">
            <javac
                source="1.5"
                target="1.5"
                destdir="${genclasses.dir}"
                classpathref="build.classpath"
                debug="${javac.debug}"
                deprecation="${javac.deprecation}"
                nowarn="on">
                <src path="${src.gen.dir}"/>
            </javac>
        </target>
    
    <target name="testcore" depends="compile"
            description="Run the core unit tests">

        <taskdef resource="testngtasks"
                 classpath="${testng.jar}"/>
        
        <copy todir="${build.dir}/test" >
            <fileset dir="${classes.dir}" includes="**/*.*"/>
        </copy>
        
        <delete dir="test-output"/>             
       
        <testng>
            <classpath path="${coverage.dir}/classes"/>
            <classpath path="${build.dir}/test"/>
            <classpath refid="test.classpath"/>
            <classpath refid="classpath.emma"/>
            <xmlfileset dir="${src.test.dir}" includes="**/*.xml"/>
        </testng>
        
    </target>
    

  <target name="testall" depends="testcore,build"
          description="Run the core unit tests and all example tests">
      
      <mkdir dir="report"/>

      <ant dir="examples/booking" target="testexample" inheritall="false"/>
      <ant dir="examples/dvdstore" target="testexample" inheritall="false"/>
      <ant dir="examples/hibernate" target="testexample" inheritall="false"/>
      <ant dir="examples/messages" target="testexample" inheritall="false"/>
      <ant dir="examples/numberguess" target="testexample" inheritall="false"/>
      <ant dir="examples/registration" target="testexample" inheritall="false"/>
      <ant dir="examples/todo" target="testexample" inheritall="false"/>
      <ant dir="examples/blog" target="testexample" inheritall="false"/>
      <ant dir="examples/portal" target="testexample" inheritall="false"/>

      <junitreport todir="./report">
        <fileset dir=".">
          <include name="**/test-output/*.xml"/>
          <exclude name="**/testng-failures.xml"/>
        </fileset>
        <report format="frames" todir="./report"/>
      </junitreport>

      <echo>Report available at ${basedir}/report/index.html</echo>

  </target>

    <target name="testexample" depends="compile"
          description="Run the example tests">
        
        <taskdef resource="testngtasks"
                 classpath="${testng.jar}"/>
        
        <copy todir="${build.dir}/test" >
            <fileset dir="${classes.dir}" includes="**/*.*"/>
            <fileset refid="example.resources"/>
        </copy>
        
        <delete dir="test-output"/>
        
        <testng outputdir="test-output">
            <classpath path="${example.coverage.dir}/classes"/> <!-- TODO: ugly! -->
            <classpath path="${build.dir}/test"/>
            <classpath path="${mc.conf.dir}"/>
            <classpath refid="${test.classpath}"/>
            <classpath refid="example.classpath.emma"/>
            <xmlfileset dir="${src.test.dir}" includes="**/*.xml"/>
        </testng>
            
    </target>

    <target name="copysource" description="Copy sources to dist dir">
        <mkdir dir="${dist.src.java.dir}"/>
        <copy todir="${dist.src.java.dir}">
            <fileset dir="${src.java.dir}">
                <patternset refid="src.files"/>
            </fileset>
            <fileset dir="${src.java.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        
        <mkdir dir="${dist.src.ui.dir}"/>
        <copy todir="${dist.src.ui.dir}">
            <fileset dir="${src.ui.dir}">
                <patternset refid="src.files"/>
            </fileset>
            <fileset dir="${src.ui.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>

        <mkdir dir="${dist.src.pdf.dir}"/>
        <copy todir="${dist.src.pdf.dir}">
            <fileset dir="${src.pdf.dir}">
                <patternset refid="src.files"/>
            </fileset>
            <fileset dir="${src.pdf.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>

        <mkdir dir="${dist.src.debug.dir}"/>
        <copy todir="${dist.src.debug.dir}">
            <fileset dir="${src.debug.dir}">
                <patternset refid="src.files"/>
            </fileset>
            <fileset dir="${src.debug.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>

        <mkdir dir="${dist.src.gen.dir}"/>
        <copy todir="${dist.src.gen.dir}">
            <fileset dir="${src.gen.dir}">
                <patternset refid="src.files"/>
            </fileset>
            <fileset dir="${src.gen.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>

        <mkdir dir="${dist.src.test.dir}"/>
        <copy todir="${dist.src.test.dir}">
            <fileset dir="${src.test.dir}">
                <patternset refid="src.files"/>
            </fileset>
            <fileset dir="${src.test.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
    </target>

    <target name="copylib" description="Copy 3rd party libraries to dist dir">
        <mkdir dir="${dist.lib.dir}"/>
        <copy todir="${dist.lib.dir}">
            <fileset dir="${lib.dir}">
                <include name="*.*"/>
            </fileset>
        </copy>
        
        <copy todir="${dist.eejb.conf.dir}">
            <fileset dir="${eejb.conf.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        <copy todir="${dist.mc.conf.dir}">
            <fileset dir="${mc.conf.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        <copy file="microcontainer/readme.txt" todir="${dist.dir}/microcontainer"/>
        <copy file="embedded-ejb/readme.txt" todir="${dist.dir}/embedded-ejb"/>

        <copy todir="${dist.drools.dir}">
            <fileset dir="${drools.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <copy todir="${dist.hibernate.dir}">
            <fileset dir="${hibernate.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        
    </target>

    <target name="instrument" depends="compile">
          
        <taskdef resource="emma_ant.properties" 
                 classpathref="classpath.emma"/>

        <copy todir="${build.dir}/test" >
            <fileset dir="${classes.dir}" includes="**/*.*"/>
        </copy>
        
        <mkdir dir="${coverage.dir}/classes"/>
        
        <!-- Apply instrumentation to the classes -->
        <emma>
          <instr 
            instrpath="${build.dir}/test" 
            destdir="${coverage.dir}/classes"
            mode="copy" 
            metadatafile="${coverage.dir}/coverage.em">

            <!-- Exclude packages we don't want coverage for -->
            <filter excludes="org.jboss.seam.annotations.*"/>
            <filter excludes="org.jboss.seam.test.*"/>
          </instr>
        </emma>
          
    </target>
        
    <target name="coverage" depends="instrument,testall" 
              description="Generate a test coverage report">
          
        <!-- Move the runtime coverage metadata to the coverage dir -->
        <move file="coverage.ec" todir="${coverage.dir}"/>        
        
        <!-- Generate code coverage report -->
        <emma>     
          <report sourcepath="${src.java.dir}" depth="method">
            <infileset dir="${coverage.dir}" includes="coverage.em,coverage.ec" />
            <html outfile="./report/coverage.html"/>
          </report>
        </emma>
        
        <echo>Code coverage report for core classes available at ${basedir}/report/coverage.html</echo>        
            
    </target>
    
    <target name="corecoverage" depends="instrument,testcore"
              description="Generate a test coverage report for the core tests">

        <!-- Move the runtime coverage metadata to the coverage dir -->
        <move file="coverage.ec" todir="${coverage.dir}"/>        
        
        <!-- Generate code coverage report -->
        <emma>     
          <report sourcepath="${src.java.dir}" depth="method">
            <infileset dir="${coverage.dir}" includes="coverage.em,coverage.ec" />
            <html outfile="./report/coverage.html"/>
          </report>
        </emma>
        
        <echo>Code coverage report for core classes available at ${basedir}/report/coverage.html</echo>        
                        
    </target>
    
    <target name="copyexamples" description="Copy examples to dist dir">
        <copy todir="${dist.dir}/examples">
            <fileset dir="${imported.basedir}/examples">
                <include name="booking/**/*"/>
                <exclude name="booking/alter.config"/>
                <exclude name="booking/alter.config/**/*"/>
                <exclude name="booking/build.alter.xml"/>
                <include name="icefaces/**/*"/>
                <include name="hibernate/**/*"/>
                <include name="hibernate2/**/*"/>
                <include name="jpa/**/*"/>
                <include name="glassfish/**/*"/>
                <include name="blog/**/*"/>
                <include name="contactlist/**/*"/>
                <include name="issues/**/*"/>
                <include name="registration/**/*"/>
                <include name="dvdstore/**/*"/>
                <include name="seampay/**/*"/>
                <include name="messages/**/*"/>
                <include name="todo/**/*"/>
                <include name="numberguess/**/*"/>
                <include name="portal/**/*"/>
                <include name="drools/**/*"/>
                <include name="remoting/chatroom/**/*"/>
                <include name="remoting/helloworld/**/*"/>
                <include name="remoting/progressbar/**/*"/>
                <include name="readme.txt"/>
                <include name="seam-examples.html"/>
                <exclude name="*/build"/>
                <exclude name="*/build/**/*"/>
                <exclude name="*/test-output"/>
                <exclude name="*/test-output/**/*"/>
            </fileset>
        </copy>
    </target>
    
    <target name="build" depends="jarcore,jarui,jarpdf,jardebug,jargen"
        description="Build all four distribution .jar files"/>

    <target name="jarcore" depends="compilecore"
            description="Build the distribution .jar file for the core package">
        <mkdir dir="${dist.dir}"/>
        
        <jar jarfile="${basedir}/${name}.jar" basedir="${classes.dir}">
            <include name="**/*.class"/>
            <exclude name="**/test/*.class"/>
            <patternset refid="meta.files"/>
            <manifest>
                <attribute name="Seam-Version" value="${version}.${patchlevel}"/>
            </manifest>
        </jar>
        <copy file="${basedir}/${name}.jar" todir="${dist.dir}"/>
        
    </target>

    <target name="jarui" depends="compileui"
            description="Build the distribution .jar file for the UI package">
        <mkdir dir="${dist.dir}"/>
        
        <jar jarfile="${basedir}/${name}-ui.jar" basedir="${uiclasses.dir}">
            <include name="**/*.class"/>
            <patternset refid="meta.files"/>
            <manifest>
                <attribute name="Seam-Version" value="${version}.${patchlevel}"/>
            </manifest>
        </jar>
        <copy file="${basedir}/${name}-ui.jar" todir="${dist.dir}"/>
        
    </target>

    <target name="jarpdf" depends="compilepdf"
            description="Build the distribution .jar file for the PDF package">
        <mkdir dir="${dist.dir}"/>
        
        <jar jarfile="${basedir}/${name}-pdf.jar" basedir="${pdfclasses.dir}">
            <include name="**/*.class"/>
            <patternset refid="meta.files"/>
            <manifest>
                <attribute name="Seam-Version" value="${version}.${patchlevel}"/>
            </manifest>
        </jar>
        <copy file="${basedir}/${name}-pdf.jar" todir="${dist.dir}"/>
        
    </target>


    <target name="jardebug" depends="compiledebug"
            description="Build the distribution .jar file for the debug package">
        <mkdir dir="${dist.dir}"/>
        
        <jar jarfile="${basedir}/${name}-debug.jar" basedir="${debugclasses.dir}">
            <include name="**/*.class"/>
            <patternset refid="meta.files"/>
            <manifest>
                <attribute name="Seam-Version" value="${version}.${patchlevel}"/>
            </manifest>
        </jar>
        <copy file="${basedir}/${name}-debug.jar" todir="${dist.dir}"/>
        
    </target>
    
    <target name="jargen" depends="compilegen"
                description="Build the distribution .jar file for the seam-gen package">
            <mkdir dir="${dist.dir}"/>
            
            <jar jarfile="${basedir}/${name}-gen.jar" basedir="${genclasses.dir}">
                <include name="**/*.class"/>
                <patternset refid="meta.files"/>
                <manifest>
                    <attribute name="Seam-Version" value="${version}.${patchlevel}"/>
                </manifest>
            </jar>
            <copy file="${basedir}/${name}-gen.jar" todir="${dist.dir}"/>
            
    </target>

    <target name="javadoc"
        description="Compile the Javadoc API documentation to dist dir">

        <mkdir dir="${dist.api.dir}"/>
        <javadoc
            classpathref="build.classpath"
            destdir="${dist.api.dir}"
            use="true"
            protected="true"
            version="true"
            windowtitle="${Name} API Documentation"
            Overview="${doc.api.dir}/package.html"
            doctitle="${Name} API Documentation"
            stylesheetfile="${doc.api.dir}/jdstyle.css"
            link="${javadoc.link}">

            <packageset dir="${src.java.dir}" defaultexcludes="yes">
                <include name="org/jboss/seam/**"/>
            </packageset>

        </javadoc>
        <copy file="${doc.api.dir}/package.html" todir="${dist.api.dir}"/>

    </target>

    <target name="refdoc"
        description="Generate and copy reference documentation">

        <ant dir="${doc.ref.dir}" inheritall="false" target="all.doc"/>
        <copy todir="${dist.ref.dir}">
            <fileset dir="${doc.ref.dir}/build"/>
        </copy>

    </target>
    
    <target name="copyseamgen"
            description="Copy seam-gen directory to dist dir">
        <copy todir="${dist.seamgen.dir}">
            <fileset dir="${seamgen.dir}">
                <exclude name="build.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="extras"
            description="Copy miscellaneous files to dist dir">
        <copy file="readme.txt"                 todir="${dist.dir}"/>
        <copy file="lgpl.txt"                   todir="${dist.dir}"/>
        <copy file="changelog.txt"              todir="${dist.dir}"/>
        <copy file="build.properties"           todir="${dist.dir}"/>
        <copy file="build.xml"                  todir="${dist.dir}"/>
        <copy file="seam"                       todir="${dist.dir}"/>
        <copy file="seam.bat"                   todir="${dist.dir}"/>
        <replace file="${dist.dir}/build.xml">
            <replacetoken><![CDATA[${name}-${version}.${patchlevel}]]></replacetoken>
            <replacevalue><![CDATA[${name}-${TODAY}]]></replacevalue>
        </replace>
    </target>

    <target name="dist"
        depends="cleandist,build,javadoc,copysource,copylib,copyexamples,copyseamgen,refdoc,extras"
        description="Build everything and package">
        <zip zipfile="${dist.dir}.zip">
          <zipfileset prefix="${dist.name}" dir="${dist.dir}"/>
        </zip>
        <tar tarfile="${dist.dir}.tar.gz" compression="gzip">
          <tarfileset prefix="${dist.name}" dir="${dist.dir}"/>
        </tar>
    </target>

    <!-- ############################ Examples #############################-->
    
    <fileset id="example.classes"
             dir="${classes.dir}">
        <include name="**/*.class"/>
        <include name="**/*.component.xml"/>
        <include name="**/components.xml"/>
        <exclude name="**/test/*.class"/>
    </fileset>

    <target name="war" depends="compile">

        <copy todir="${build.dir}/resources/WEB-INF">
            <fileset refid="example.war.webinf"/>
            <filterset>
                <filter token="jndiPattern" value="${example.name}/#{ejbName}/local"/>
                <filter token="embeddedEjb" value="false"/>
                <filter token="microcontainer" value="false"/>
            </filterset>
        </copy>
        
        <jar destfile="${build.dir}/${example.name}.war">
            <zipfileset refid="example.war.docroot"/>
            <zipfileset refid="example.war.webinf.lib"/>
            <zipfileset refid="example.seam.misc.jar"/>
            <zipfileset refid="example.facelets.jar"/>
            <zipfileset refid="example.itext.jar"/>
            <zipfileset dir="${build.dir}/resources">
                <include name="WEB-INF/**/*.*"/>
            </zipfileset>
        </jar>
        
    </target>

    <target name="ejb3" depends="compile">
        <jar jarfile="${build.dir}/${example.name}.jar">
            <fileset refid="example.classes"/>
            <fileset refid="example.ejb3.resources"/>
        </jar>
    </target>

    <target name="ear" depends="ejb3, war">
        <jar destfile="${build.dir}/${example.name}.ear">
            <fileset refid="example.seam.main.jar"/>
            <fileset refid="example.drools.jar"/>
            <fileset refid="example.extra.jar"/>
            <zipfileset dir="${build.dir}">
                <include name="${example.name}.jar"/>
            </zipfileset>
            <zipfileset dir="${build.dir}">
                <include name="${example.name}.war"/>
            </zipfileset>
            <zipfileset refid="example.ear.resources"/>
        </jar>
    </target>

    <target name="deploy" depends="ear"
            description="Deploy the example to JBoss">
        <property name="unit.ext" value="ear"/>
        <fail unless="jboss.home">jboss.home MUST be set. Update build.properties to point to a valid JBoss installation.</fail>
        <copy todir="${deploy.dir}">
            <fileset refid="example.deploy"/>
        </copy>
        <copy file="${build.dir}/${example.name}.${unit.ext}" todir="${deploy.dir}"/>
    </target>

    <target name="undeploy"
            description="Undeploy the example from JBoss">
        <property name="unit.ext" value="ear"/>
        <delete file="${deploy.dir}/${example.name}.${unit.ext}"/>
        <delete>
            <fileset dir="${deploy.dir}">
                <patternset refid="example.undeploy"/>
            </fileset>
        </delete>
    </target>
    
    <!-- ############################ Tomcat! #############################-->

     <target name="war.tomcat" depends="compile">
        <mkdir dir="${build.dir}/${example.name}/WEB-INF/lib"/>
        
        <jar jarfile="${build.dir}/${example.name}.jar">
            <fileset refid="example.classes"/>
            <fileset refid="example.tomcat.resources"/>
        </jar>
        
        <jar jarfile="${build.dir}/mc-conf.jar">
            <fileset refid="${tomcat.conf}"/>
        </jar>
        
        <copy todir="${build.dir}/resources/WEB-INF">
            <fileset refid="example.tomcat.war.webinf"/>
            <filterset>
                <filter token="jndiPattern" value="#{ejbName}/local"/>
                <filter token="embeddedEjb" value="true"/>
                <filter token="microcontainer" value="true"/>
            </filterset>
        </copy>
        
        <jar destfile="${build.dir}/${example.name}.war" duplicate="preserve">
            <zipfileset refid="example.tomcat.lib"/>
            <zipfileset refid="example.tomcat.seam.jar"/>
            <zipfileset refid="example.tomcat.drools.jar"/>
            <zipfileset refid="example.tomcat.extra.jar"/>
            <zipfileset refid="example.war.docroot"/>
            <zipfileset refid="example.war.webinf.lib"/>
            <zipfileset dir="${build.dir}/resources">
                <include name="WEB-INF/**/*.*"/>
                <exclude name="WEB-INF/lib/*.jar"/>
            </zipfileset>
            <zipfileset dir="${build.dir}" prefix="WEB-INF/lib">
                <include name="${example.name}.jar"/>
                <include name="mc-conf.jar"/>
            </zipfileset>
        </jar>

    </target>

    <target name="deploy.tomcat" depends="undeploy.tomcat,war.tomcat" 
            description="Deploy the example to Tomcat">
        <echo>Don't forget to set the path of tomcat.home to Tomcat root directory !</echo>
        <copy file="${build.dir}/${example.name}.war" todir="${tomcat.home}/webapps"/>
        <echo>After you start Tomcat, the example will be available at: http://localhost:8080/${example.name}</echo>
    </target>
  
    <target name="undeploy.tomcat" 
            description="Undeploy the example from Tomcat">
        <delete file="${tomcat.home}/webapps/${example.name}.war"/>
        <delete dir="${tomcat.home}/webapps/${example.name}"/>
    </target>
    
</project>
