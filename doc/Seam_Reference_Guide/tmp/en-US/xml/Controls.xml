<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % RH_ENTITIES SYSTEM "Common_Content/Entities.ent">
%RH_ENTITIES;
<!ENTITY % RH_TRANS_ENTITIES SYSTEM "Common_Content/Translatable-Entities.ent">
%RH_TRANS_ENTITIES;
]>

<chapter id="controls">
	<title>Seam JSF controls</title>
	<para>
		Seam includes a number of JSF controls that are useful for working with Seam. These are intended to complement the built-in JSF controls, and controls from other third-party libraries. We recommend JBoss RichFaces, and Apache MyFaces Trinidad tag libraries for use with Seam. We do not recommend the use of the Tomahawk tag library.
	</para>
	<section id="controls.tags">
		<title>Tags</title>
		<para>
			To use these tags, define the "<literal>s</literal>" namespace in your page as follows (facelets only):
		</para>
<programlisting>&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:s="http://jboss.com/products/seam/taglib"&gt;
</programlisting>
		<para>
			The ui example demonstrates the use of a number of these tags.
		</para>
		<table>
			<title>Seam JSF Control Reference</title>
			<tgroup cols="2">
				<colspec colnum="1" colwidth="1*"></colspec>
				<colspec colnum="2" colwidth="3*"></colspec>
				<tbody>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:button&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								A button that supports invocation of an action with control over conversation propagation. <emphasis>Does not submit the form.</emphasis>
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>value</literal> — the label.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>action</literal> — a method binding that specified the action listener.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>view</literal> — the JSF view id to link to.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>fragment</literal> — the fragment identifier to link to.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>disabled</literal> — is the link disabled?
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>propagation</literal> — determines the conversation propagation style: <literal>begin</literal>, <literal>join</literal>, <literal>nest</literal>, <literal>none</literal> or <literal>end</literal>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>pageflow</literal> — a pageflow definition to begin. (This is only useful when <literal>propagation="begin"</literal> or <literal>propagation="join"</literal>.)
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:button id="cancel" value="Cancel" 
          action="#{hotelBooking.cancel}"/&gt;
</programlisting>
							<para>
								You can specify both <literal>view</literal> and <literal>action</literal> on <literal>&lt;s:link /&gt;</literal>. In this case, the action will be called once the redirect to the specified view has occured.
							</para>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:cache&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Cache the rendered page fragment using JBoss Cache. Note that <literal>&lt;s:cache&gt;</literal> actually uses the instance of JBoss Cache managed by the built-in <literal>pojoCache</literal> component.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>key</literal> — the key to cache rendered content, often a value expression. For example, if we were caching a page fragment that displays a document, we might use <literal>key="Document-#{document.id}"</literal>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>enabled</literal> — a value expression that determines if the cache should be used.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>region</literal> — a JBoss Cache node to use (different nodes can have different expiry policies).
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:cache key="entry-#{blogEntry.id}" region="pageFragments"&gt;
  &lt;div class="blogEntry"&gt;
    &lt;h3&gt;#{blogEntry.title}&lt;/h3&gt;
    &lt;div&gt;
      &lt;s:formattedText value="#{blogEntry.body}"/&gt;
    &lt;/div&gt;
    &lt;p&gt;
      [Posted on&#160;
      &lt;h:outputText value="#{blogEntry.date}"&gt;
        &lt;f:convertDateTime timezone="#{blog.timeZone}" locale="#{blog.locale}" 
                           type="both"/&gt;
      &lt;/h:outputText&gt;]
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/s:cache&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:conversationId&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Add the conversation id to JSF link or button (e.g. <literal>&lt;h:commandLink /&gt;</literal>, <literal>&lt;s:button /&gt;</literal>).
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:conversationPropagation&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Customize the conversation propagation for a command link or button (or similar JSF control). <emphasis>Facelets only.</emphasis>
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>type</literal> — determines the conversation propagation style: <literal>begin</literal>, <literal>join</literal>, <literal>nest</literal>, <literal>none</literal> or <literal>end</literal>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>pageflow</literal> — a pageflow definition to begin. (This is only useful when <literal>propagation="begin"</literal> or <literal>propagation="join"</literal>.)
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:commandButton value="Apply" action="#{personHome.update}"&gt;
  &lt;s:conversationPropagation type="join" /&gt;
&lt;/h:commandButton&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:convertDateTime&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Perform date or time conversions in the Seam timezone.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:outputText value="#{item.orderDate}"&gt;
  &lt;s:convertDateTime type="both" dateStyle="full"/&gt;
&lt;/h:outputText&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:convertEntity&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Assigns an entity converter to the current component. This is primarily useful for radio button and dropdown controls.
							</para>
							<para>
								The converter works with any managed entity which has an <literal>@Id</literal> annotation - either simple or composite.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Configuration</emphasis>
							</para>
							<para>
								You must use <emphasis>Seam managed transactions</emphasis> (see <xref linkend="persistence.seam-managed-transactions" />) with <literal>&lt;s:convertEntity /&gt;</literal>.
							</para>
							<para>
								If your <emphasis>Managed Persistence Context</emphasis> isn&#39;t called <literal>entityManager</literal>, then you need to set it in components.xml:
							</para>
<programlisting>&lt;component name="org.jboss.seam.ui.EntityConverter"&gt;
  &lt;property name="entityManager"&gt;#{em}&lt;/property&gt;
&lt;/component&gt;
</programlisting>
							<para>
								If you are using a <emphasis>Managed Hibernate Session</emphasis> then you need to set it in components.xml:
							</para>
<programlisting>&lt;component name="org.jboss.seam.ui.EntityConverter"&gt;
  &lt;property name="session"&gt;#{hibernateSession}&lt;/property&gt;
&lt;/component&gt;
</programlisting>
							<para>
								If you want to use more than one entity manager with the entity converter, you can create a copy of the entity converter for each entity manager in components.xml:
							</para>
<programlisting>&lt;component name="myEntityConverter" class="org.jboss.seam.ui.converter.EntityConverter"&gt;
  &lt;property name="entityManager"&gt;#{em}&lt;/property&gt;
&lt;/component&gt;
</programlisting>
<programlisting>&lt;h:selectOneMenu value="#{person.continent}"&gt;
  &lt;s:selectItems value="#{continents.resultList}" var="continent" 
                 label="#{continent.name}" /&gt;
    &lt;f:converter converterId="myEntityConverter" /&gt;
&lt;/h:selectOneMenu&gt;
</programlisting>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:selectOneMenu value="#{person.continent}" required="true"&gt;
  &lt;s:selectItems value="#{continents.resultList}" var="continent" 
                 label="#{continent.name}" 
                 noSelectionLabel="Please Select..."/&gt;
    &lt;s:convertEntity /&gt;
&lt;/h:selectOneMenu&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:convertEnum&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Assigns an enum converter to the current component. This is primarily useful for radio button and dropdown controls.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:selectOneMenu value="#{person.honorific}"&gt;
  &lt;s:selectItems value="#{honorifics}" var="honorific" 
                 label="#{honorific.label}"
                 noSelectionLabel="Please select" /&gt;
  &lt;s:convertEnum /&gt;
&lt;/h:selectOneMenu&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:decorate&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								"Decorate" a JSF input field when validation fails or when <literal>required="true"</literal> is set.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>template</literal> — the facelets template to use to decorate the component
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<literal>#{invalid}</literal> and <literal>#{required}</literal> are available inside <literal>s:decorate</literal>; <literal>#{required}</literal> evaluates to <literal>true</literal> if you have set the input component being decorated as required, and <literal>#{invalid}</literal> evaluates to <literal>true</literal> if a validation error occurs.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:decorate template="edit.xhtml"&gt;
  &lt;ui:define name="label"&gt;Country:&lt;/ui:define&gt;
    &lt;h:inputText value="#{location.country}" required="true"/&gt;
  &lt;/s:decorate&gt;
</programlisting>
<programlisting>&lt;ui:composition xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:s="http://jboss.com/products/seam/taglib"&gt;
                  
  &lt;div&gt;   
   
    &lt;s:label styleClass="#{invalid?&#39;error&#39;:&#39;&#39;}"&gt;
      &lt;ui:insert name="label"/&gt;
      &lt;s:span styleClass="required" rendered="#{required}"&gt;*&lt;/s:span&gt;
    &lt;/s:label&gt;
        
    &lt;span class="#{invalid?&#39;error&#39;:&#39;&#39;}"&gt;
      &lt;s:validateAll&gt;
        &lt;ui:insert/&gt;
      &lt;/s:validateAll&gt;
    &lt;/span&gt;
        
    &lt;s:message styleClass="error"/&gt;     
      
  &lt;/div&gt;   
  
&lt;/ui:composition&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:defaultAction&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Specify the default action to run when the form is submitted using the enter key.
							</para>
							<para>
								Currently you can only nest it inside buttons (e.g. <literal>&lt;h:commandButton /&gt;</literal>, <literal>&lt;a:commandButton /&gt;</literal> or <literal>&lt;tr:commandButton /&gt;</literal>).
							</para>
							<para>
								You must specify an id on the action source. You can only have one default action per form.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:commandButton id="foo" value="Foo" action="#{manager.foo}"&gt;
   &lt;s:defaultAction /&gt;
&lt;/h:commandButton&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:div&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Render a HTML <literal>&lt;div&gt;</literal>.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:div rendered="#{selectedMember == null}"&gt;
  Sorry, but this member does not exist.
&lt;/s:div&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:enumItem&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Creates a <literal>SelectItem</literal> from an enum value.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>enumValue</literal> — the string representation of the enum value.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>label</literal> — the label to be used when rendering the <literal>SelectItem</literal>.
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:selectOneRadio id="radioList"
                  layout="lineDirection"
                  value="#{newPayment.paymentFrequency}"&gt;
  &lt;s:convertEnum /&gt;
  &lt;s:enumItem enumValue="ONCE" label="Only Once" /&gt;
  &lt;s:enumItem enumValue="EVERY_MINUTE" label="Every Minute" /&gt;
  &lt;s:enumItem enumValue="HOURLY"       label="Every Hour" /&gt;
  &lt;s:enumItem enumValue="DAILY"        label="Every Day" /&gt;
  &lt;s:enumItem enumValue="WEEKLY"       label="Every Week" /&gt;
&lt;/h:selectOneRadio&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:fileUpload&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Renders a file upload control. This control must be used within a form with an encoding type of <literal>multipart/form-data</literal>, i.e:
							</para>
<programlisting>&lt;h:form enctype="multipart/form-data"&gt;
</programlisting>
							<para>
								For multipart requests, the Seam Multipart servlet filter must also be configured in <literal>web.xml</literal>:
							</para>
<programlisting>&lt;filter&gt;
  &lt;filter-name&gt;Seam Filter&lt;/filter-name&gt;
  &lt;filter-class&gt;org.jboss.seam.servlet.SeamFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
  &lt;filter-name&gt;Seam Filter&lt;/filter-name&gt;
  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</programlisting>
							<para>
								<emphasis>Configuration</emphasis>
							</para>
							<para>
								The following configuration options for multipart requests may be configured in components.xml:
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>createTempFiles</literal> — if this option is set to true, uploaded files are streamed to a temporary file instead of in memory.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>maxRequestSize</literal> — the maximum size of a file upload request, in bytes.
									</para>
								</listitem>
							</itemizedlist>
							<para>
								Here&#39;s an example:
							</para>
<programlisting>&lt;component class="org.jboss.seam.web.MultipartFilter"&gt;
  &lt;property name="createTempFiles"&gt;true&lt;/property&gt;
  &lt;property name="maxRequestSize"&gt;1000000&lt;/property&gt;
&lt;/component&gt;
</programlisting>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>data</literal> — this value binding receives the binary file data. The receiving field should be declared as a <literal>byte[]</literal> or <literal>InputStream</literal> (required).
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>contentType</literal> — this value binding receives the file&#39;s content type (optional).
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>fileName</literal> — this value binding receives the filename (optional).
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>fileSize</literal> — this value binding receives the file size (optional).
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>accept</literal> — a comma-separated list of content types to accept, may not be supported by the browser. E.g. <literal>"images/png,images/jpg"</literal>, <literal>"images/*"</literal>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>style</literal> — The control&#39;s style
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>styleClass</literal> — The control&#39;s style class
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:fileUpload id="picture" data="#{register.picture}" 
              accept="image/png"
              contentType="#{register.pictureContentType}" /&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:formattedText&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Outputs <emphasis>Seam Text</emphasis>, a rich text markup useful for blogs, wikis and other applications that might use rich text. See the Seam Text chapter for full usage.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>value</literal> — an EL expression specifying the rich text markup to render.
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:formattedText value="#{blog.text}"/&gt;
</programlisting>
							<para>
								<emphasis>Example</emphasis>
							</para>
							<mediaobject>
								<imageobject role="fo">
									<imagedata align="center" fileref="/images/controls-seamtext.png" />
								</imageobject>
								<imageobject role="html">
									<imagedata align="center" fileref="/images/controls-seamtext.png" />
								</imageobject>
							</mediaobject>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:fragment&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								A non-rendering component useful for enabling/disabling rendering of it&#39;s children.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:fragment rendered="#{auction.highBidder ne null}"&gt;
  Current bid:
&lt;/s:fragment&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:graphicImage&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								An extended <literal>&lt;h:graphicImage&gt;</literal> that allows the image to be created in a Seam Component; further transforms can be applied to the image.
							</para>
							<para>
								All attributes for <literal>&lt;h:graphicImage&gt;</literal> are supported, as well as:
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>value</literal> — image to display. Can be a path <literal>String</literal> (loaded from the classpath), a <literal>byte[]</literal>, a <literal>java.io.File</literal>, a <literal>java.io.InputStream</literal> or a <literal>java.net.URL</literal>. Currently supported image formats are <literal>image/png</literal>, <literal>image/jpeg</literal> and <literal>image/gif</literal>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>fileName</literal> — if not specified the served image will have a generated file name. If you want to name your file, you should specify it here. This name should be unique
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Transformations</emphasis>
							</para>
							<para>
								To apply a transform to the image, you would nest a tag specifying the transform to apply. Seam currently supports these transforms:
							</para>
							<variablelist>
								<varlistentry>
									<term><literal>&lt;s:transformImageSize&gt;</literal></term>
									<listitem>
										<itemizedlist>
											<listitem>
												<para>
													<literal>width</literal> — new width of the image
												</para>
											</listitem>
											<listitem>
												<para>
													<literal>height</literal> — new height of the image
												</para>
											</listitem>
											<listitem>
												<para>
													<literal>maintainRatio</literal> — if <literal>true</literal>, and <emphasis>one</emphasis> of <literal>width</literal>/<literal>height</literal> are specified, the image will be resized with the dimension not specified being calculated to maintain the aspect ratio.
												</para>
											</listitem>
											<listitem>
												<para>
													<literal>factor</literal> — scale the image by the given factor
												</para>
											</listitem>
										</itemizedlist>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term><literal>&lt;s:transformImageBlur&gt;</literal></term>
									<listitem>
										<itemizedlist>
											<listitem>
												<para>
													<literal>radius</literal> — perform a convolution blur with the given radius
												</para>
											</listitem>
										</itemizedlist>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term><literal>&lt;s:transformImageType&gt;</literal></term>
									<listitem>
										<itemizedlist>
											<listitem>
												<para>
													<literal>contentType</literal> — alter the type of the image to either <literal>image/jpeg</literal> or <literal>image/png</literal>
												</para>
											</listitem>
										</itemizedlist>
									</listitem>
								</varlistentry>
							</variablelist>
							<para>
								It&#39;s easy to create your own transform - create a <literal>UIComponent</literal> which <literal>implements</literal><literal>org.jboss.seam.ui.graphicImage.ImageTransform</literal>. Inside the <literal>applyTransform()</literal>method use <literal>image.getBufferedImage()</literal> to get the original image and <literal>image.setBufferedImage()</literal> to set your transformed image. Transforms are applied in the order specified in the view.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:graphicImage rendered="#{auction.image ne null}"
                value="#{auction.image.data}"&gt;
  &lt;s:transformImageSize width="200" maintainRatio="true"/&gt;
&lt;/s:graphicImage&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:label&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								"Decorate" a JSF input field with the label. The label is placed inside the HTML <literal>&lt;label&gt;</literal> tag, and is associated with the nearest JSF input component. It is often used with <literal>&lt;s:decorate&gt;</literal>.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>style</literal> — The control&#39;s style
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>styleClass</literal> — The control&#39;s style class
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:label styleClass="label"&gt;
  Country:
&lt;/s:label&gt;
&lt;h:inputText value="#{location.country}" required="true"/&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:link&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								A link that supports invocation of an action with control over conversation propagation. <emphasis>Does not submit the form.</emphasis>
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>value</literal> — the label.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>action</literal> — a method binding that specified the action listener.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>view</literal> — the JSF view id to link to.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>fragment</literal> — the fragment identifier to link to.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>disabled</literal> — is the link disabled?
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>propagation</literal> — determines the conversation propagation style: <literal>begin</literal>, <literal>join</literal>, <literal>nest</literal>, <literal>none</literal> or <literal>end</literal>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>pageflow</literal> — a pageflow definition to begin. (This is only useful when <literal>propagation="begin"</literal> or <literal>propagation="join"</literal>.)
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:link id="register" view="/register.xhtml" 
        value="Register New User"/&gt;
</programlisting>
							<para>
								You can specify both <literal>view</literal> and <literal>action</literal> on <literal>&lt;s:link /&gt;</literal>. In this case, the action will be called once the redirect to the specified view has occured.
							</para>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:message&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								"Decorate" a JSF input field with the validation error message.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;f:facet name="afterInvalidField"&gt;
  &lt;s:span&gt;
    &#160;Error:&#160;
    &lt;s:message/&gt;
  &lt;/s:span&gt;
&lt;/f:facet&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:remote&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Generates the Javascript stubs required to use Seam Remoting.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>include</literal> — a comma-separated list of the component names (or fully qualified class names) for which to generate Seam Remoting Javascript stubs. See <xref linkend="remoting" /> for more details.
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:remote include="customerAction,accountAction,com.acme.MyBean"/&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:selectDate&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								<emphasis>Deprecated. Use <literal>&lt;rich:calendar /&gt;</literal> instead.</emphasis>
							</para>
							<para>
								Displays a dynamic date picker component that selects a date for the specified input field. The body of the <literal>selectDate</literal> element should contain HTML elements, such as text or an image, that prompt the user to click to display the date picker. The date picker <emphasis>must</emphasis> be styled using CSS. An example CSS file can be found in the Seam booking demo as <literal>date.css</literal>, or can be generated using seam-gen. The CSS styles used to control the appearance of the date picker are also described below.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>for</literal> — The id of the input field that the date picker will insert the selected date into.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>dateFormat</literal> — The date format string. This should match the date format of the input field.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>startYear</literal> — The popup year selector range will start at this year.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>endYear</literal> — The popup year selector range will end at this year.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>firstDayOfWeek</literal> — Controls which day is the first day of the week (0 = Sunday, 6 = Saturday). If this attribute is not set, then the first day of the week will default based on the user&#39;s locale.
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
							<para>
<programlisting>&lt;div class="row"&gt;
  &lt;h:outputLabel for="dob"&gt;Date of birth&lt;em&gt;*&lt;/em&gt;&lt;/h:outputLabel&gt;
  &lt;h:inputText id="dob" value="#{user.dob}" required="true"&gt;
    &lt;s:convertDateTime pattern="MM/dd/yyyy"/&gt;
  &lt;/h:inputText&gt;
  &lt;s:selectDate for="dob" startYear="1910" endYear="2007"&gt;
    &lt;img src="img/datepicker.png"/&gt;
  &lt;/s:selectDate&gt;
  &lt;div class="validationError"&gt;&lt;h:message for="dob"/&gt;&lt;/div&gt;
&lt;/div&gt;
</programlisting>
							</para>
							<para>
								<emphasis>Example</emphasis>
							</para>
							<mediaobject>
								<imageobject role="fo">
									<imagedata align="center" fileref="/images/controls-selectdate.png" />
								</imageobject>
								<imageobject role="html">
									<imagedata align="center" fileref="/images/controls-selectdate.png" />
								</imageobject>
							</mediaobject>
							<para>
								<emphasis>CSS Styling</emphasis>
							</para>
							<para>
								The following list describes the CSS class names that are used to control the style of the selectDate control.
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>seam-date</literal> — This class is applied to the outer <literal>div</literal> containing the popup calendar. (1) It is also applied to the <literal>table</literal> that controls the inner layout of the calendar. (2)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-header</literal> — This class is applied to the calendar header table row (<literal>tr</literal>) and header table cells (<literal>td</literal>). (3)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-header-prevMonth</literal> — This class is applied to the "previous month" table cell, (<literal>td</literal>), which when clicked causes the calendar to display the month prior to the one currently displayed. (4)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-header-nextMonth</literal> — This class is applied to the "next month" table cell, (<literal>td</literal>), which when clicked causes the calendar to display the month following the one currently displayed. (5)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-headerDays</literal> — This class is applied to the calendar days header row (<literal>tr</literal>), which contains the names of the week days. (6)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-footer</literal> — This class is applied to the calendar footer row (<literal>tr</literal>), which displays the current date. (7)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-inMonth</literal> — This class is applied to the table cell (<literal>td</literal>) elements that contain a date within the month currently displayed. (8)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-outMonth</literal> — This class is applied to the table cell (<literal>td</literal>) elements that contain a date outside of the month currently displayed. (9)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-selected</literal> — This class is applied to the table cell (<literal>td</literal>) element that contains the currently selected date. (10)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-dayOff-inMonth</literal> — This class is applied to the table cell (<literal>td</literal>) elements that contain a "day off" date (i.e. weekend days, Saturday and Sunday) within the currently selected month. (11)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-dayOff-outMonth</literal> — This class is applied to the table cell (<literal>td</literal>) elements that contain a "day off" date (i.e. weekend days, Saturday and Sunday) outside of the currently selected month. (12)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-hover</literal> — This class is applied to the table cell (<literal>td</literal>) element over which the cursor is hovering. (13)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-monthNames</literal> — This class is applied to the <literal>div</literal> control that contains the popup month selector. (14)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-monthNameLink</literal> — This class is applied to the anchor (<literal>a</literal>) controls that contain the popup month names. (15)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-years </literal> — This class is applied to the <literal>div</literal> control that contains the popup year selector. (16)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>seam-date-yearLink</literal> — This class is applied to the anchor (<literal>a</literal>) controls that contain the popup years. (15)
									</para>
								</listitem>
							</itemizedlist>
							<mediaobject>
								<imageobject role="fo">
									<imagedata align="center" fileref="/images/controls-selectdatecss.png" />
								</imageobject>
								<imageobject role="html">
									<imagedata align="center" fileref="/images/controls-selectdatecss.png" />
								</imageobject>
							</mediaobject>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:selectItems&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Creates a <literal>List&lt;SelectItem&gt;</literal> from a List, Set, DataModel or Array.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>value</literal> — an EL expression specifying the data that backs the <literal>List&lt;SelectItem&gt;</literal>
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>var</literal> — defines the name of the local variable that holds the current object during iteration
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>label</literal> — the label to be used when rendering the <literal>SelectItem</literal>. Can reference the <literal>var</literal> variable
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>itemValue</literal> — Value to return to the server if this option is selected. Optional, by default the <literal>var</literal> object is used. Can reference the <literal>var</literal> variable
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>disabled</literal> — if true the <literal>SelectItem</literal> will be rendered disabled. Can reference the <literal>var</literal> variable
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>noSelectionLabel</literal> — specifies the (optional) label to place at the top of list (if <literal>required="true"</literal> is also specified then selecting this value will cause a validation error)
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>hideNoSelectionLabel</literal> — if true, the <literal>noSelectionLabel</literal> will be hidden when a value is selected
									</para>
								</listitem>
							</itemizedlist>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:selectOneMenu value="#{person.age}" 
                 converter="ageConverter"&gt;
  &lt;s:selectItems value="#{ages}" var="age" label="#{age}" /&gt;
&lt;/h:selectOneMenu&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:span&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Render a HTML <literal>&lt;span&gt;</literal>.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:span styleClass="required" rendered="#{required}"&gt;*&lt;/s:span&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:taskId&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Add the task id to an output link (or similar JSF control), when the task is available via <literal>#{task}</literal>.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:validate&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								A non-visual control, validates a JSF input field against the bound property using Hibernate Validator.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;h:inputText id="userName" required="true" 
             value="#{customer.userName}"&gt;
  &lt;s:validate /&gt;
&lt;/h:inputText&gt;
&lt;h:message for="userName" styleClass="error" /&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:validateAll&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								A non-visual control, validates all child JSF input fields against their bound properties using Hibernate Validator.
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
							<para>
								<emphasis>Usage</emphasis>
							</para>
<programlisting>&lt;s:validateAll&gt;
  &lt;div class="entry"&gt;
    &lt;h:outputLabel for="username"&gt;Username:&lt;/h:outputLabel&gt;
    &lt;h:inputText id="username" value="#{user.username}" 
                 required="true"/&gt;
    &lt;h:message for="username" styleClass="error" /&gt;
  &lt;/div&gt;
  &lt;div class="entry"&gt;
    &lt;h:outputLabel for="password"&gt;Password:&lt;/h:outputLabel&gt;
    &lt;h:inputSecret id="password" value="#{user.password}" 
                   required="true"/&gt;
    &lt;h:message for="password" styleClass="error" /&gt;
  &lt;/div&gt;
  &lt;div class="entry"&gt;
    &lt;h:outputLabel for="verify"&gt;Verify Password:&lt;/h:outputLabel&gt;
    &lt;h:inputSecret id="verify" value="#{register.verify}" 
                   required="true"/&gt;
    &lt;h:message for="verify" styleClass="error" /&gt;
  &lt;/div&gt;
&lt;/s:validateAll&gt;
</programlisting>
						</entry>
					</row>
					<row>
						<entry valign="top">
							<para>
								<literal>&lt;s:validateFormattedText&gt;</literal>
							</para>
						</entry>
						<entry valign="top">
							<para>
								<emphasis>Description</emphasis>
							</para>
							<para>
								Checks that the submitted value is valid Seam Text
							</para>
							<para>
								<emphasis>Attributes</emphasis>
							</para>
							<para>
								None.
							</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	
	<section id="controls.annotations">
		<title>Annotations</title>
		<para>
			Seam also provides annotations to allow you to use Seam components as JSF converters and validators:
		</para>
		<variablelist spacing="compact">
			<varlistentry>
				<term><literal>@Converter</literal></term>
				<listitem>
<programlisting>@Name("itemConverter") 
@BypassInterceptors 
@Converter
public class ItemConverter implements Converter {
   
  @Transactional
  public Object getAsObject(FacesContext context, UIComponent cmp, String value) {
    EntityManager entityManager = (EntityManager) Component.getInstance("entityManager");
    entityManager.joinTransaction();
    // Do the conversion
  }
  
  public String getAsString(FacesContext context, UIComponent cmp, Object value) {
    // Do the conversion
  }
  
}
</programlisting>
<programlisting>&lt;h:inputText value="#{shop.item}" converter="itemConverter" /&gt;
</programlisting>
					<para>
						Registers the Seam component as a JSF converter. Shown here is a converter which is able to access the JPA EntityManager inside a JTA transaction, when converting the value back to it&#39;s object representation.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>@Validator</literal></term>
				<listitem>
<programlisting>@Name("itemValidator") 
@BypassInterceptors 
@Validator
public class ItemValidator implements Validator {
   
  public void validate(FacesContext context, UIComponent cmp, Object value)
    throws ValidatorException {
    ItemController ItemController = (ItemController) Component.getInstance("itemController");
    return itemController.validate(value);
  }
  
  }
</programlisting>
<programlisting>&lt;h:inputText value="#{shop.item}" validator="itemValidator" /&gt;
</programlisting>
					<para>
						Registers the Seam component as a JSF validator. Shown here is a validator which injects another Seam component; the injected component is used to validate the value.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

</chapter>

