<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % RH_ENTITIES SYSTEM "Common_Content/Entities.ent">
%RH_ENTITIES;
<!ENTITY % RH_TRANS_ENTITIES SYSTEM "Common_Content/Translatable-Entities.ent">
%RH_TRANS_ENTITIES;
]>

<chapter id="drools">
	<title>Seam and JBoss Rules</title>
	<para>
		Seam makes it easy to call JBoss Rules (Drools) rulebases from Seam components or jBPM process definitions.
	</para>
	<section>
		<title>Installing rules</title>
		<para>
			The first step is to make an instance of <literal>org.drools.RuleBase</literal> available in a Seam context variable. For testing purposes, Seam provides a built-in component that compiles a static set of rules from the classpath. You can install this component via <literal>components.xml</literal>:
		</para>
<programlisting>&lt;drools:rule-base name="policyPricingRules"&gt;
    &lt;drools:rule-files&gt;
        &lt;value&gt;policyPricingRules.drl&lt;/value&gt;
    &lt;/drools:rule-files&gt;
&lt;/drools:rule-base&gt;
</programlisting>
		<para>
			This component compiles rules from a set of <literal>.drl</literal> files and caches an instance of <literal>org.drools.RuleBase</literal> in the Seam <literal>APPLICATION</literal> context. Note that it is quite likely that you will need to install multiple rule bases in a rule-driven application.
		</para>
		<para>
			If you want to use a Drools DSL, you alse need to specify the DSL definition:
		</para>
<programlisting>&lt;drools:rule-base name="policyPricingRules" dsl-file="policyPricing.dsl"&gt;
    &lt;drools:rule-files&gt;
        &lt;value&gt;policyPricingRules.drl&lt;/value&gt;
    &lt;/drools:rule-files&gt;
&lt;/drools:rule-base&gt;
</programlisting>
		<para>
			In most rules-driven applications, rules need to be dynamically deployable, so a production application will want to use a Drools RuleAgent to manage the RuleBase. The RuleAgent can connect to a Drools rule server (BRMS) or hot deploy rules packages from a local file repository. The RulesAgent-managed RuleBase is also configurable in <literal>components.xml</literal>:
		</para>
<programlisting>&lt;drools:rule-agent name="insuranceRules" 
                    configurationFile="/WEB-INF/deployedrules.properties" /&gt;
</programlisting>
		<para>
			The properties file contains properties specific to the RulesAgent. Here is an example configuration file from the Drools example distribution.
		</para>
<programlisting>newInstance=true
url=http://localhost:8080/drools-jbrms/org.drools.brms.JBRMS/package/org.acme.insurance/fmeyer
localCacheDir=/Users/fernandomeyer/projects/jbossrules/drools-examples/drools-examples-brms/cache
poll=30
name=insuranceconfig
</programlisting>
		<para>
			It is also possible to configure the options on the component directly, bypassing the configuration file.
		</para>
<programlisting>&lt;drools:rule-agent name="insuranceRules"
                   url="http://localhost:8080/drools-jbrms/org.drools.brms.JBRMS/package/org.acme.insurance/fmeyer"
                   local-cache-dir="/Users/fernandomeyer/projects/jbossrules/drools-examples/drools-examples-brms/cache"
                   poll="30"
                   configuration-name="insuranceconfig" /&gt;
</programlisting>
		<para>
			Next, we need to make an instance of <literal>org.drools.WorkingMemory</literal> available to each conversation. (Each <literal>WorkingMemory</literal> accumulates facts relating to the current conversation.)
		</para>
<programlisting>&lt;drools:managed-working-memory name="policyPricingWorkingMemory" auto-create="true" rule-base="#{policyPricingRules}"/&gt;
</programlisting>
		<para>
			Notice that we gave the <literal>policyPricingWorkingMemory</literal> a reference back to our rule base via the <literal>ruleBase</literal> configuration property.
		</para>
	</section>
	
	<section>
		<title>Using rules from a Seam component</title>
		<para>
			We can now inject our <literal>WorkingMemory</literal> into any Seam component, assert facts, and fire rules:
		</para>
<programlisting>@In WorkingMemory policyPricingWorkingMemory;

@In Policy policy;
@In Customer customer;

public void pricePolicy() throws FactException
{
    policyPricingWorkingMemory.assertObject(policy);
    policyPricingWorkingMemory.assertObject(customer);
    policyPricingWorkingMemory.fireAllRules();
}
</programlisting>
	</section>
	
	<section>
		<title>Using rules from a jBPM process definition</title>
		<para>
			You can even allow a rule base to act as a jBPM action handler, decision handler, or assignment handlerâ€”in either a pageflow or business process definition.
		</para>
<programlisting>&lt;decision name="approval"&gt;
         
    &lt;handler class="org.jboss.seam.drools.DroolsDecisionHandler"&gt;
        &lt;workingMemoryName&gt;orderApprovalRulesWorkingMemory&lt;/workingMemoryName&gt;
        &lt;assertObjects&gt;
            &lt;element&gt;#{customer}&lt;/element&gt;
            &lt;element&gt;#{order}&lt;/element&gt;
            &lt;element&gt;#{order.lineItems}&lt;/element&gt;
        &lt;/assertObjects&gt;
    &lt;/handler&gt;
    
    &lt;transition name="approved" to="ship"&gt;
        &lt;action class="org.jboss.seam.drools.DroolsActionHandler"&gt;
            &lt;workingMemoryName&gt;shippingRulesWorkingMemory&lt;/workingMemoryName&gt;
            &lt;assertObjects&gt;
                &lt;element&gt;#{customer}&lt;/element&gt;
                &lt;element&gt;#{order}&lt;/element&gt;
                &lt;element&gt;#{order.lineItems}&lt;/element&gt;
            &lt;/assertObjects&gt;
        &lt;/action&gt;
    &lt;/transition&gt;
    
    &lt;transition name="rejected" to="cancelled"/&gt;
    
&lt;/decision&gt;
</programlisting>
		<para>
			The <literal>&lt;assertObjects&gt;</literal> element specifies EL expressions that return an object or collection of objects to be asserted as facts into the <literal>WorkingMemory</literal>.
		</para>
		<para>
			There is also support for using Drools for jBPM task assignments:
		</para>
<programlisting>&lt;task-node name="review"&gt;
    &lt;task name="review" description="Review Order"&gt;
        &lt;assignment handler="org.jboss.seam.drools.DroolsAssignmentHandler"&gt;
            &lt;workingMemoryName&gt;orderApprovalRulesWorkingMemory&lt;/workingMemoryName&gt;
            &lt;assertObjects&gt;
                &lt;element&gt;#{actor}&lt;/element&gt;
                &lt;element&gt;#{customer}&lt;/element&gt;
                &lt;element&gt;#{order}&lt;/element&gt;
                &lt;element&gt;#{order.lineItems}&lt;/element&gt;
            &lt;/assertObjects&gt;
        &lt;/assignment&gt;
    &lt;/task&gt;
    &lt;transition name="rejected" to="cancelled"/&gt;
    &lt;transition name="approved" to="approved"/&gt;
&lt;/task-node&gt;
</programlisting>
		<para>
			Certain objects are available to the rules as Drools globals, namely the jBPM <literal>Assignable</literal>, as <literal>assignable</literal> and a Seam <literal>Decision</literal> object, as <literal>decision</literal>. Rules which handle decisions should call <literal>decision.setOutcome("result")</literal> to determine the result of the decision. Rules which perform assignments should set the actor id using the <literal>Assignable</literal>.
		</para>
<programlisting>package org.jboss.seam.examples.shop

import org.jboss.seam.drools.Decision

global Decision decision

rule "Approve Order For Loyal Customer"
  when
    Customer( loyaltyStatus == "GOLD" )
    Order( totalAmount &lt;= 10000 )
  then
    decision.setOutcome("approved");
end
</programlisting>
<programlisting>package org.jboss.seam.examples.shop

import org.jbpm.taskmgmt.exe.Assignable

global Assignable assignable

rule "Assign Review For Small Order"
  when
    Order( totalAmount &lt;= 100 )
  then
    assignable.setPooledActors( new String[] {"reviewers"} );
end
</programlisting>
	</section>

</chapter>

