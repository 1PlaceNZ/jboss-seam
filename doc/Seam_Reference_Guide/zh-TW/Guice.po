msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2009-04-12 01:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: doc/Seam_Reference_Guide/en-US/Guice.xml:6(title) 
msgid "Guice integration"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:8(para) 
msgid "Google Guice is a library that provides lightweight dependency injection through type-safe resolution. The Guice integration (part of the Seam IoC module) allows use of Guice injection for all Seam components annotated with the <literal>@Guice</literal> annotation. In addition to the regular bijection that Seam performs (which becomes optional), Seam also delegates to known Guice injectors to satisify the dependencies of the component. Guice may be useful to tie non-Seam parts of large or legacy applications together with Seam."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:17(note) 
msgid "The Guice integration is bundled in the jboss-seam-ioc library. This dependency is required for all integration techniques covered in this chapter. You will also need the Guice JAR file on the classpath."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:24(title) 
msgid "Creating a hybrid Seam-Guice component"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:26(para) 
msgid "The goal is to create a hybrid Seam-Guice component. The rule for how to do this is very simple. If you want to use Guice injection in your Seam component, annotate it with the <literal>@Guice</literal> annotation (after importing the type <literal>org.jboss.seam.ioc.guice.Guice</literal>)."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:33(programlisting) 
#, no-wrap
msgid "@Name(\"myGuicyComponent\")\n@Guice public class MyGuicyComponent\n{\n   @Inject MyObject myObject;\n   @Inject @Special MyObject mySpecialObject;\n   ...\n}"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:41(para) 
msgid "This Guice injection will happen on every method call, just like with bijection. Guice injects based on type and binding. To satisify the dependencies in the previous example, you might have bound the following implementations in a Guice module, where <literal>@Special</literal> is an annotation you define in your application."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:48(programlisting) 
#, no-wrap
msgid "public class MyGuicyModule implements Module\n{\n   public void configure(Binder binder)\n   {\n      binder.bind(MyObject.class)\n         .toInstance(new MyObject(\"regular\"));\n\n      binder.bind(MyObject.class).annotatedWith(Special.class)\n         .toInstance(new MyObject(\"special\"));\n   }\n}"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:60(para) 
msgid "Great, but which Guice injector will be used to inject the dependencies? Well, you need to perform some setup first."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:69(title) 
msgid "Configuring an injector"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:71(para) 
msgid "You tell Seam which Guice injector to use by hooking it into the injection property of the Guice initization component in the Seam component descriptor (components.xml):"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:89(para) 
msgid "<literal>myGuiceInjector</literal> must resolve to a Seam component that implements the Guice <literal>Injector</literal> interface."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:94(para) 
msgid "Having to create an injector is boiler-plate code, though. What you really want to be able to do is simply hook up Seam to your Guice modules. Fortunately, there is a built-in Seam component that implements the <literal>Injector</literal> interface to do exactly that. You can configure it in the Seam component descriptor with this additional stanza."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:108(para) 
msgid "Of course you can also use an injector that is already used in other, possibly non-Seam part of you application. That's one of the main motivations for creating this integration. Since the injector is defined with EL expression, you can obtain it in whatever way you like. For instance, you may use the Seam factory component pattern to provide injector."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:115(programlisting) 
#, no-wrap
msgid "@Name(\"myGuiceInjectorFactory\")\npublic InjectorFactory\n{\n   @Factory(name = \"myGuiceInjector\", scope = APPLICATION, create = true)\n   public Injector getInjector()\n   {\n      // Your code that returns injector    \n   }\n}"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:128(title) 
msgid "Using multiple injectors"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:130(para) 
msgid "By default, an injector configured in the Seam component descriptor is used. If you really need to use multiple injectors (AFAIK, you should use multiple modules instead), you can specify different injector for every Seam component in the <literal>@Guice</literal> annotation."
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:137(programlisting) 
#, no-wrap
msgid "@Name(\"myGuicyComponent\")\n@Guice(\"myGuiceInjector\")\npublic class MyGuicyComponent\n{\n   @Inject MyObject myObject;\n   ...\n}"
msgstr ""

#: doc/Seam_Reference_Guide/en-US/Guice.xml:147(para) 
msgid "That's all there is to it! Check out the guice example in the Seam distribution to see the Seam Guice integration in action!"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: doc/Seam_Reference_Guide/en-US/Guice.xml:0(None) 
msgid "translator-credits"
msgstr ""

