<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
]>

<chapter id="wicket">
   <title>Writing your presentation layer using Apache Wicket</title>

   <para>
      Seam supports Wicket as an alternative presentation layer to JSF. Take a 
      look at the <code>wicket</code> example in Seam which shows the Booking
      Example ported to Wicket.
   </para>

   <note>
      <para>
         Wicket support is new to Seam, so some features which are
         available in JSF are not yet available when you use Wicket
         (e.g. pageflow). You'll also notice that the documentation is
         very JSF-centric and needs reorganization to reflect the first
         class support for Wicket.
      </para>
   </note>
   
   <section>
      <title>Adding Seam to your wicket application</title>
      
      <para>
          The features added to your Wicket application can be split into two 
          categories: bijection and orchestration; these are discussed in detail
          below.
      </para>
      
      <para>
         Extensive use of inner classes is common when building Wicket 
         applications, with the component tree being built in the constructor.
         Seam fully supports the use of annotation based control in inner 
         classes and constructors (unlike regular Seam components).
      </para>
      
      <para>
         Annotations are processed <emphasis>after</emphasis> any call to
         a superclass. This mean's that any injected attributes cannot be
         passed as an argument in a call to <code>this()</code> or 
         <code>super()</code>.
      </para>
      
      <note>
         <para>
            We are working to improve this.
         </para>
      </note>
      
      <para>
         When a method is called in an inner class, bijection occurs for any
         class which encloses it. This allows you to place your bijected
         variables in the outer class, and refer to them in any inner class.
      </para>
      
      <section>
         <title>Bijection</title>
         
         <para>
            A Seam enabled Wicket application has full access to the all the 
            standard Seam contexts (<code>EVENT</code>, <code>CONVERSATION</code>,
            <code>SESSION</code>, <code>APPLICATION</code> and
            <code>BUSINESS_PROCESS</code>).
         </para>
         
         <para>
            To access Seam component's from Wicket, you just need to inject it
            using <code>@In</code>:
         </para>
         
         <programlisting role="JAVA"><![CDATA[@In(create=true)
private HotelBooking hotelBooking;]]></programlisting>

         <tip>
            <para>
               As your Wicket class isn't a full Seam component, there is no
               need to annotate it <code>@Name</code>.
            </para>
         </tip>
         
         <para>
            You can also outject an object into the Seam contexts from a Wicket
            component:
         </para>
         
         <programlisting role="JAVA"><![CDATA[@Out(scope=ScopeType.EVENT, required=false)
private String verify;]]></programlisting>

         <para>
            TODO Make this more use case driven
         </para>
      
      </section>
      
      <section>
         <title>Orchestration</title>
         
         <para>
            You can secure a Wicket component by using the 
            <code>@Restrict</code> annotation. This can be placed on the outer
            component or any inner components. If <code>@Restrict</code> is
            specified, the component will automatically be restricted to logged
            in users. You can optionally use an EL expression in the 
            <code>value</code> attribute to specify a restriction to be applied.
            For more refer to the <xref linkend="security"/>.
         </para>
         
         <para>
            For example:
         </para>
         
         <programlisting role="JAVA"><![CDATA[@Restrict
public class Main extends WebPage {

   ...]]></programlisting>
         
         <tip>
            <para>
               Seam will automatically apply the restriction to any nested
               classes.
            </para>
            <para>
               TODO - Implement this (See JBSEAM-3192) 
            </para>
         </tip>
         
         <para>
            You can demarcate conversations from within a Wicket component
            through the use of <code>@Begin</code> and <code>@End</code>. The
            semantics for these annotations are the same as when used in a Seam
            component. You can place <code>@Begin</code> and <code>@End</code>
            on any method.
         </para>
         
         <note>
            <para>
               The deprecated <code>ifOutcome</code> attribute is not supported.
            </para>
         </note>
         
         <para>
            For example:
         </para>
         
         <programlisting role="JAVA"><![CDATA[item.add(new Link("viewHotel") {

   @Override
   @Begin
   public void onClick() {
      hotelBooking.selectHotel(hotel);
      setResponsePage(org.jboss.seam.example.wicket.Hotel.class);
   }
};]]></programlisting>

         <para>
            If you want to further decouple your application classes, you can 
            use Seam events. Of course, you can raise an event using
            <code>Events.instance().raiseEvent("foo")</code>. Alternatively, you
            can annotate a method <code>@RaiseEvent("foo")</code>; if the method
            returns a non-null outcome without exception, the event will be
            raised.
         </para>
         
         <para>
            You can also control tasks and processes in Wicket classes through
            the use of <code>@CreateProcess</code>, <code>@ResumeTask</code>,
            <code>@BeginTask</code>, <code>@EndTask</code>, 
            <code>@StartTask</code> and <code>@Transition</code>.
         </para>   
         
         <para>
            TODO - Implement BPM control - JBSEAM-3194
         </para>
      </section>
      
   </section>

   <section>
      <title>Setting up your project</title>
      
      <para>
         To enable bijection and orchestration control via annotations in Wicket
         you must place your classes in <code>WEB-INF/wicket</code>. Seam needs
         to instrument the bytecode of your Wicket classes to be able to
         intercept the annotations you use. 
      </para>
      
      <note>
         <para>
            Currently only bytecode instrumentation using a custom classloader
            which reads classes in <code>WEB-INF/wicket</code> is supported. In the 
            an Ant task or Maven plugin may be developed to support bytecode
            instrumentation when the project artifacts are built. 
         </para>
      </note>
      
      <section>
         <title>Defining the Application</title>
      
         <para>
            A Wicket web application which uses Seam should use 
            <code>SeamWebApplication</code> as the base class; this creates hooks
            into the Wicket lifecycle allowing Seam to automagically propagate the
            conversation as needed. It also adds status messages to the page.
         </para>
         
         <para>
            For example:
         </para>
         
         <para>
            The <code>SeamAuthorizationStrategy</code> delegates authorization
            to Seam Security, allowing the use of <code>@Restrict</code> on Wicket
            components. <code>SeamWebApplication</code> installs the authorization
            strategy for you. You can specify the login page by implementing the
            <code>getLoginPage()</code> method. 
         </para>
         
         <para>
            You'll also need to set the home page of the application by 
            implementing the <code>getHomePage()</code> method.
         </para>
         
         <programlisting role="JAVA"><![CDATA[public class WicketBookingApplication extends SeamWebApplication {

   @Override
   public Class getHomePage() {
      return Home.class;
   }

   @Override
   protected Class getLoginPage() {
      return Home.class;
   }
   
}
]]></programlisting>
         
         <para>
            Seam automatically installs the Wicket filter for you (ensuring that
            it is inserted in the correct place for you). But you still need to 
            tell Wicket which <code>WebApplication</code> class to use:
         </para>
         
         <programlisting role="XML"><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
   xmlns:wicket="http://jboss.com/products/seam/wicket">
         
   <wicket:web-application application-class="org.jboss.seam.example.wicket.WicketBookingApplication" />
</components]]></programlisting>
         
         <tip>
            <para>
               Take a look at the Wicket documentation for more on authorization
               strategies and other methods you can override on the
               <code>Application</code> class.
            </para>
         </tip>
      </section>

   </section>

</chapter>
