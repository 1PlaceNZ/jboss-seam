<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY uArr "⇑">
<!ENTITY hcirc "ĥ">
<!ENTITY icirc "î">
<!ENTITY equals "=">
<!ENTITY cong "≅">
<!ENTITY HARDcy "Ъ">
<!ENTITY icy "и">
<!ENTITY Ecaron "Ě">
<!ENTITY clubs "♣">
<!ENTITY phmmat "ℳ">
<!ENTITY sqcap "⊓">
<!ENTITY thorn "þ">
<!ENTITY Lcedil "Ļ">
<!ENTITY rarr "→">
<!ENTITY verbar "|">
<!ENTITY cire "≗">
<!ENTITY DZcy "Џ">
<!ENTITY b.delta "𝛅">
<!ENTITY Gcirc "Ĝ">
<!ENTITY ocir "⊚">
<!ENTITY circ "ˆ">
<!ENTITY Igr "Ι">
<!ENTITY udigr "ϋ">
<!ENTITY prime "′">
<!ENTITY npr "⊀">
<!ENTITY b.pi "𝛑">
<!ENTITY frac58 "⅝">
<!ENTITY ldquor "„">
<!ENTITY sqsup "⊐">
<!ENTITY boxDR "╔">
<!ENTITY kcedil "ķ">
<!ENTITY vDash "⊨">
<!ENTITY Scedil "Ş">
<!ENTITY perp "⊥">
<!ENTITY b.Gamma "𝚪">
<!ENTITY b.kappa "𝛋">
<!ENTITY Uuml "Ü">
<!ENTITY mnplus "∓">
<!ENTITY nearr "↗">
<!ENTITY nrtri "⋫">
<!ENTITY cupre "≼">
<!ENTITY boxV "║">
<!ENTITY Zdot "Ż">
<!ENTITY pound "£">
<!ENTITY lharu "↼">
<!ENTITY boxdr "┌">
<!ENTITY ocy "о">
<!ENTITY xgr "ξ">
<!ENTITY b.xi "𝛏">
<!ENTITY larr "←">
<!ENTITY middot "·">
<!ENTITY xrArr "⟹">
<!ENTITY Ncy "Н">
<!ENTITY acute "´">
<!ENTITY phis "ϕ">
<!ENTITY ncedil "ņ">
<!ENTITY lAarr "⇚">
<!ENTITY sqsube "⊑">
<!ENTITY quot '"'>
<!ENTITY TSHcy "Ћ">
<!ENTITY b.Gammad "Ϝ">
<!ENTITY amacr "ā">
<!ENTITY otimes "⊗">
<!ENTITY inodot "ı">
<!ENTITY gsdot "⋗">
<!ENTITY LJcy "Љ">
<!ENTITY phiv "φ">
<!ENTITY odblac "ő">
<!ENTITY filig "ﬁ">
<!ENTITY amalg "⨿">
<!ENTITY sdotb "⊡">
<!ENTITY boxDL "╗">
<!ENTITY Theta "Θ">
<!ENTITY cdot "ċ">
<!ENTITY ordm "º">
<!ENTITY atilde "ã">
<!ENTITY squf "▪">
<!ENTITY notin "∉">
<!ENTITY nmid "∤">
<!ENTITY shchcy "щ">
<!ENTITY lfloor "⌊">
<!ENTITY Xi "Ξ">
<!ENTITY Hstrok "Ħ">
<!ENTITY period ".">
<!ENTITY nldr "‥">
<!ENTITY numsp " ">
<!ENTITY boxdl "┐">
<!ENTITY Fcy "Ф">
<!ENTITY tscy "ц">
<!ENTITY Iukcy "І">
<!ENTITY cross "✗">
<!ENTITY ohgr "ω">
<!ENTITY nbsp " ">
<!ENTITY ni "∋">
<!ENTITY comp "∁">
<!ENTITY boxH "═">
<!ENTITY b.Delta "𝚫">
<!ENTITY Oslash "Ø">
<!ENTITY marker "▮">
<!ENTITY ndash "–">
<!ENTITY ordf "ª">
<!ENTITY nsce "⪰̸">
<!ENTITY vrtri "⊳">
<!ENTITY ubrcy "ў">
<!ENTITY Ccirc "Ĉ">
<!ENTITY quest "?">
<!ENTITY ne "≠">
<!ENTITY gap "⪆">
<!ENTITY efDot "≒">
<!ENTITY rcy "р">
<!ENTITY bsim "∽">
<!ENTITY bgr "β">
<!ENTITY omacr "ō">
<!ENTITY umacr "ū">
<!ENTITY lpar "(">
<!ENTITY uharl "↿">
<!ENTITY Gcy "Г">
<!ENTITY ast "*">
<!ENTITY acy "а">
<!ENTITY thetas "θ">
<!ENTITY uring "ů">
<!ENTITY Zcaron "Ž">
<!ENTITY horbar "―">
<!ENTITY star "☆">
<!ENTITY timesb "⊠">
<!ENTITY npre "⪯̸">
<!ENTITY real "ℜ">
<!ENTITY dlarr "↙">
<!ENTITY nrArr "⇏">
<!ENTITY oplus "⊕">
<!ENTITY Xgr "Ξ">
<!ENTITY ucy "у">
<!ENTITY thetav "ϑ">
<!ENTITY jcirc "ĵ">
<!ENTITY uharr "↾">
<!ENTITY mgr "μ">
<!ENTITY hearts "♥">
<!ENTITY nvDash "⊭">
<!ENTITY yicy "ї">
<!ENTITY dot "˙">
<!ENTITY alpha "α">
<!ENTITY wedgeq "≙">
<!ENTITY bowtie "⋈">
<!ENTITY boxDr "╓">
<!ENTITY b.upsi "𝛖">
<!ENTITY euml "ë">
<!ENTITY vArr "⇕">
<!ENTITY lgr "λ">
<!ENTITY b.rhov "𝛠">
<!ENTITY ubreve "ŭ">
<!ENTITY copysr "℗">
<!ENTITY cap "∩">
<!ENTITY aogon "ą">
<!ENTITY racute "ŕ">
<!ENTITY rthree "⋌">
<!ENTITY Sgr "Σ">
<!ENTITY uacute "ú">
<!ENTITY Tcaron "Ť">
<!ENTITY dagger "†">
<!ENTITY oast "⊛">
<!ENTITY prnE "⪵">
<!ENTITY thkap "≈">
<!ENTITY boxdR "╒">
<!ENTITY dgr "δ">
<!ENTITY nacute "ń">
<!ENTITY hardcy "ъ">
<!ENTITY sqsupe "⊒">
<!ENTITY TScy "Ц">
<!ENTITY reg "®">
<!ENTITY cir "○">
<!ENTITY lsquor "‚">
<!ENTITY ycy "ы">
<!ENTITY Sigma "Σ">
<!ENTITY Gbreve "Ğ">
<!ENTITY order "ℴ">
<!ENTITY nlarr "↚">
<!ENTITY eng "ŋ">
<!ENTITY sacute "ś">
<!ENTITY ensp " ">
<!ENTITY rarr2 "⇉">
<!ENTITY coprod "∐">
<!ENTITY iacgr "ί">
<!ENTITY b.piv "𝛡">
<!ENTITY rlhar2 "⇌">
<!ENTITY boxDl "╖">
<!ENTITY Pcy "П">
<!ENTITY Dagger "‡">
<!ENTITY khcy "х">
<!ENTITY sigma "σ">
<!ENTITY nltrie "⋬">
<!ENTITY gjcy "ѓ">
<!ENTITY b.alpha "𝛂">
<!ENTITY plusmn "±">
<!ENTITY scnap "⪺">
<!ENTITY vprime "′">
<!ENTITY iota "ι">
<!ENTITY Dcaron "Ď">
<!ENTITY emsp " ">
<!ENTITY trie "≜">
<!ENTITY boxdL "╕">
<!ENTITY cacute "ć">
<!ENTITY rcedil "ŗ">
<!ENTITY lhblk "▄">
<!ENTITY lnsim "⋦">
<!ENTITY bsime "⋍">
<!ENTITY Vvdash "⊪">
<!ENTITY zgr "ζ">
<!ENTITY Ncaron "Ň">
<!ENTITY rcaron "ř">
<!ENTITY radic "√">
<!ENTITY colone "≔">
<!ENTITY Ucy "У">
<!ENTITY lcub "{">
<!ENTITY mdash "—">
<!ENTITY ogon "˛">
<!ENTITY Lgr "Λ">
<!ENTITY b.chi "𝛘">
<!ENTITY Barwed "⌆">
<!ENTITY odot "⊙">
<!ENTITY softcy "ь">
<!ENTITY yucy "ю">
<!ENTITY Ogr "Ο">
<!ENTITY ecirc "ê">
<!ENTITY Uacute "Ú">
<!ENTITY jcy "й">
<!ENTITY Oacgr "Ό">
<!ENTITY ntilde "ñ">
<!ENTITY Uring "Ů">
<!ENTITY Udigr "Ϋ">
<!ENTITY squ "□">
<!ENTITY Uacgr "Ύ">
<!ENTITY uarr "↑">
<!ENTITY sim "∼">
<!ENTITY egr "ε">
<!ENTITY aleph "ℵ">
<!ENTITY nharr "↮">
<!ENTITY kcy "к">
<!ENTITY Rgr "Ρ">
<!ENTITY ffilig "ﬃ">
<!ENTITY boxvl "┤">
<!ENTITY Iacgr "Ί">
<!ENTITY ang90 "∟">
<!ENTITY nrarr "↛">
<!ENTITY nges "⩾̸">
<!ENTITY nsube "⊈">
<!ENTITY nsup "⊅">
<!ENTITY egs "⪖">
<!ENTITY acirc "â">
<!ENTITY Yuml "Ÿ">
<!ENTITY ltrif "◂">
<!ENTITY lagran "ℒ">
<!ENTITY npar "∦">
<!ENTITY scsim "≿">
<!ENTITY boxvr "├">
<!ENTITY Acirc "Â">
<!ENTITY Ucirc "Û">
<!ENTITY zcaron "ž">
<!ENTITY shy "­">
<!ENTITY ominus "⊖">
<!ENTITY frac38 "⅜">
<!ENTITY incare "℅">
<!ENTITY uhblk "▀">
<!ENTITY lEg "⪋">
<!ENTITY gcy "г">
<!ENTITY b.eta "𝛈">
<!ENTITY lnap "⪉">
<!ENTITY Iacute "Í">
<!ENTITY yacute "ý">
<!ENTITY dstrok "đ">
<!ENTITY Imacr "Ī">
<!ENTITY orarr "↻">
<!ENTITY Eacgr "Έ">
<!ENTITY apos "'">
<!ENTITY b.epsiv "𝛜">
<!ENTITY gcirc "ĝ">
<!ENTITY udblac "ű">
<!ENTITY planck "ℏ">
<!ENTITY upsi "υ">
<!ENTITY b.Lambda "𝚲">
<!ENTITY Bgr "Β">
<!ENTITY scedil "ş">
<!ENTITY Rarr "↠">
<!ENTITY nrtrie "⋭">
<!ENTITY nsub "⊄">
<!ENTITY vcy "в">
<!ENTITY Eacute "É">
<!ENTITY boxvh "┼">
<!ENTITY dcy "д">
<!ENTITY Aring "Å">
<!ENTITY Igrave "Ì">
<!ENTITY utilde "ũ">
<!ENTITY divonx "⋇">
<!ENTITY lne "⪇">
<!ENTITY scnE "⪶">
<!ENTITY ccedil "ç">
<!ENTITY supne "⊋">
<!ENTITY empty "∅">
<!ENTITY b.nu "𝛎">
<!ENTITY top "⊤">
<!ENTITY lcy "л">
<!ENTITY b.gamma "𝛄">
<!ENTITY aelig "æ">
<!ENTITY iuml "ï">
<!ENTITY Lcaron "Ľ">
<!ENTITY bottom "⊥">
<!ENTITY rarrhk "↪">
<!ENTITY DScy "Ѕ">
<!ENTITY idiagr "ΐ">
<!ENTITY imacr "ī">
<!ENTITY ltri "◃">
<!ENTITY infin "∞">
<!ENTITY le "≤">
<!ENTITY sime "≃">
<!ENTITY kappa "κ">
<!ENTITY kappav "ϰ">
<!ENTITY OElig "Œ">
<!ENTITY urcrop "⌎">
<!ENTITY darr2 "⇊">
<!ENTITY lg "≶">
<!ENTITY spar "∥">
<!ENTITY Mgr "Μ">
<!ENTITY rtri "▹">
<!ENTITY daleth "ℸ">
<!ENTITY sfrown "⌢">
<!ENTITY epsiv "ε">
<!ENTITY Omega "Ω">
<!ENTITY colon ":">
<!ENTITY prop "∝">
<!ENTITY lArr "⇐">
<!ENTITY Upsi "ϒ">
<!ENTITY oslash "ø">
<!ENTITY ap "≈">
<!ENTITY Sup "⋑">
<!ENTITY epsis "ϵ">
<!ENTITY b.omega "𝛚">
<!ENTITY rpar ")">
<!ENTITY Abreve "Ă">
<!ENTITY mldr "…">
<!ENTITY ltrie "⊴">
<!ENTITY Psi "Ψ">
<!ENTITY Agrave "À">
<!ENTITY Tcedil "Ţ">
<!ENTITY auml "ä">
<!ENTITY lcedil "ļ">
<!ENTITY scirc "ŝ">
<!ENTITY larrhk "↩">
<!ENTITY varr "↕">
<!ENTITY ncong "≇">
<!ENTITY jnodot "j">
<!ENTITY subE "⫅">
<!ENTITY kjcy "ќ">
<!ENTITY larr2 "⇇">
<!ENTITY rsh "↱">
<!ENTITY sdot "⋅">
<!ENTITY wreath "≀">
<!ENTITY cuepr "⋞">
<!ENTITY frown "⌢">
<!ENTITY Agr "Α">
<!ENTITY uacgr "ύ">
<!ENTITY rcub "}">
<!ENTITY dharl "⇃">
<!ENTITY bcy "б">
<!ENTITY Tgr "Τ">
<!ENTITY diam "⋄">
<!ENTITY eacute "é">
<!ENTITY xlArr "⟸">
<!ENTITY leg "⋚">
<!ENTITY boxvL "╡">
<!ENTITY Kcy "К">
<!ENTITY ncy "н">
<!ENTITY sgr "σ">
<!ENTITY beta "β">
<!ENTITY exist "∃">
<!ENTITY bprime "‵">
<!ENTITY boxul "┘">
<!ENTITY Zcy "З">
<!ENTITY Iuml "Ï">
<!ENTITY Scaron "Š">
<!ENTITY sol "/">
<!ENTITY boxvR "╞">
<!ENTITY fcy "ф">
<!ENTITY Egrave "È">
<!ENTITY Utilde "Ũ">
<!ENTITY lthree "⋋">
<!ENTITY boxur "└">
<!ENTITY dharr "⇂">
<!ENTITY uarr2 "⇈">
<!ENTITY lacute "ĺ">
<!ENTITY spades "♠">
<!ENTITY int "∫">
<!ENTITY rect "▭">
<!ENTITY compfn "∘">
<!ENTITY b.sigma "𝛔">
<!ENTITY Amacr "Ā">
<!ENTITY prod "∏">
<!ENTITY rpargt "⦔">
<!ENTITY b.sigmav "𝛓">
<!ENTITY excl "!">
<!ENTITY fnof "ƒ">
<!ENTITY beth "ℶ">
<!ENTITY yuml "ÿ">
<!ENTITY rsquo "’">
<!ENTITY pr "≺">
<!ENTITY ccaron "č">
<!ENTITY hyphen "‐">
<!ENTITY weierp "℘">
<!ENTITY smile "⌣">
<!ENTITY Egr "Ε">
<!ENTITY eeacgr "ή">
<!ENTITY nsc "⊁">
<!ENTITY les "⩽">
<!ENTITY boxvH "╪">
<!ENTITY KHcy "Х">
<!ENTITY bernou "ℬ">
<!ENTITY lpargt "⦠">
<!ENTITY tgr "τ">
<!ENTITY zacute "ź">
<!ENTITY amp "&#38;">
<!ENTITY lnE "≨">
<!ENTITY nlE "≦̸">
<!ENTITY sbsol "﹨">
<!ENTITY Pi "Π">
<!ENTITY b.beta "𝛃">
<!ENTITY b.mu "𝛍">
<!ENTITY Ograve "Ò">
<!ENTITY phone "☎">
<!ENTITY iff "⇔">
<!ENTITY gsim "≳">
<!ENTITY rx "℞">
<!ENTITY there4 "∴">
<!ENTITY harrw "↭">
<!ENTITY udiagr "ΰ">
<!ENTITY otilde "õ">
<!ENTITY DotDot " ⃜">
<!ENTITY lrhar2 "⇋">
<!ENTITY lE "≦">
<!ENTITY hstrok "ħ">
<!ENTITY Racute "Ŕ">
<!ENTITY rarrw "↝">
<!ENTITY angmsd "∡">
<!ENTITY tshcy "ћ">
<!ENTITY szlig "ß">
<!ENTITY nequiv "≢">
<!ENTITY pcy "п">
<!ENTITY darr "↓">
<!ENTITY female "♀">
<!ENTITY curarr "↷">
<!ENTITY minusb "⊟">
<!ENTITY aacute "á">
<!ENTITY Dcy "Д">
<!ENTITY THORN "Þ">
<!ENTITY ucirc "û">
<!ENTITY asymp "≈">
<!ENTITY bcong "≌">
<!ENTITY die "¨">
<!ENTITY ograve "ò">
<!ENTITY iexcl "¡">
<!ENTITY frac56 "⅚">
<!ENTITY rArr "⇒">
<!ENTITY tprime "‴">
<!ENTITY osol "⊘">
<!ENTITY sqsub "⊏">
<!ENTITY rho "ρ">
<!ENTITY b.psi "𝛙">
<!ENTITY aring "å">
<!ENTITY Edot "Ė">
<!ENTITY lcaron "ľ">
<!ENTITY rlarr2 "⇄">
<!ENTITY EEacgr "Ή">
<!ENTITY pi "π">
<!ENTITY sect "§">
<!ENTITY bepsi "϶">
<!ENTITY ffllig "ﬄ">
<!ENTITY lsh "↰">
<!ENTITY dscy "ѕ">
<!ENTITY macr "¯">
<!ENTITY b.kappav "𝛞">
<!ENTITY scaron "š">
<!ENTITY commat "@">
<!ENTITY dollar "$">
<!ENTITY angsph "∢">
<!ENTITY Udblac "Ű">
<!ENTITY comma ",">
<!ENTITY copy "©">
<!ENTITY diams "♦">
<!ENTITY Dot "¨">
<!ENTITY sube "⊆">
<!ENTITY Cap "⋒">
<!ENTITY nsmid "∤">
<!ENTITY SOFTcy "Ь">
<!ENTITY eegr "η">
<!ENTITY lsim "≲">
<!ENTITY ssmile "⌣">
<!ENTITY nlt "≮">
<!ENTITY boxHU "╩">
<!ENTITY ZHcy "Ж">
<!ENTITY abreve "ă">
<!ENTITY lmidot "ŀ">
<!ENTITY angst "Å">
<!ENTITY b.lambda "𝛌">
<!ENTITY uuml "ü">
<!ENTITY ENG "Ŋ">
<!ENTITY IJlig "Ĳ">
<!ENTITY brvbar "¦">
<!ENTITY esdot "≐">
<!ENTITY boxuL "╛">
<!ENTITY blk14 "░">
<!ENTITY YAcy "Я">
<!ENTITY caron "ˇ">
<!ENTITY ohacgr "ώ">
<!ENTITY sup3 "³">
<!ENTITY flat "♭">
<!ENTITY minus "−">
<!ENTITY olarr "↺">
<!ENTITY dlcorn "⌞">
<!ENTITY boxuR "╘">
<!ENTITY iukcy "і">
<!ENTITY b.tau "𝛕">
<!ENTITY Otilde "Õ">
<!ENTITY ldquo "“">
<!ENTITY lang "〈">
<!ENTITY Verbar "‖">
<!ENTITY ges "⩾">
<!ENTITY prap "⪷">
<!ENTITY thksim "∼">
<!ENTITY Vcy "В">
<!ENTITY yacy "я">
<!ENTITY drcrop "⌌">
<!ENTITY omega "ω">
<!ENTITY Hcirc "Ĥ">
<!ENTITY tstrok "ŧ">
<!ENTITY ang "∠">
<!ENTITY khgr "χ">
<!ENTITY b.thetas "𝛉">
<!ENTITY ecaron "ě">
<!ENTITY Odblac "Ő">
<!ENTITY fflig "ﬀ">
<!ENTITY lowast "∗">
<!ENTITY nvdash "⊬">
<!ENTITY frac18 "⅛">
<!ENTITY sup1 "¹">
<!ENTITY njcy "њ">
<!ENTITY b.thetav "𝛝">
<!ENTITY sup2 "²">
<!ENTITY gimel "ℷ">
<!ENTITY ldot "⋖">
<!ENTITY Ccedil "Ç">
<!ENTITY rdquo "”">
<!ENTITY rhard "⇁">
<!ENTITY nsime "≄">
<!ENTITY boxhu "┴">
<!ENTITY intcal "⊺">
<!ENTITY nsupe "⊉">
<!ENTITY Gt "≫">
<!ENTITY igr "ι">
<!ENTITY nabla "∇">
<!ENTITY urcorn "⌝">
<!ENTITY nle "≰">
<!ENTITY Icy "И">
<!ENTITY DJcy "Ђ">
<!ENTITY jukcy "є">
<!ENTITY lceil "⌈">
<!ENTITY oS "Ⓢ">
<!ENTITY malt "✠">
<!ENTITY ccirc "ĉ">
<!ENTITY ycirc "ŷ">
<!ENTITY Aacgr "Ά">
<!ENTITY Ntilde "Ñ">
<!ENTITY vsupnE "⫌︀">
<!ENTITY ogr "ο">
<!ENTITY and "∧">
<!ENTITY gvnE "≩︀">
<!ENTITY dashv "⊣">
<!ENTITY supE "⫆">
<!ENTITY mu "μ">
<!ENTITY vsubnE "⫋︀">
<!ENTITY gE "≧">
<!ENTITY smid "∣">
<!ENTITY delta "δ">
<!ENTITY tcaron "ť">
<!ENTITY rsqb "]">
<!ENTITY bull "•">
<!ENTITY cuwed "⋏">
<!ENTITY raquo "»">
<!ENTITY frac45 "⅘">
<!ENTITY part "∂">
<!ENTITY Vdash "⊩">
<!ENTITY boxhd "┬">
<!ENTITY psi "ψ">
<!ENTITY b.Omega "𝛀">
<!ENTITY iquest "¿">
<!ENTITY sqcup "⊔">
<!ENTITY YUcy "Ю">
<!ENTITY psgr "ψ">
<!ENTITY conint "∮">
<!ENTITY gel "⋛">
<!ENTITY Icirc "Î">
<!ENTITY twixt "≬">
<!ENTITY boxHD "╦">
<!ENTITY male "♂">
<!ENTITY euro "€">
<!ENTITY epsi "ϵ">
<!ENTITY Rcaron "Ř">
<!ENTITY SHCHcy "Щ">
<!ENTITY ugr "υ">
<!ENTITY Phi "Φ">
<!ENTITY b.Xi "𝚵">
<!ENTITY lt "&#60;">
<!ENTITY scnsim "⋩">
<!ENTITY models "⊧">
<!ENTITY boxHu "╧">
<!ENTITY Lcy "Л">
<!ENTITY Sacute "Ś">
<!ENTITY nwarr "↖">
<!ENTITY drcorn "⌟">
<!ENTITY NJcy "Њ">
<!ENTITY mumap "⊸">
<!ENTITY rAarr "⇛">
<!ENTITY nsubE "⫅̸">
<!ENTITY b.rho "𝛒">
<!ENTITY oelig "œ">
<!ENTITY utrif "▴">
<!ENTITY subne "⊊">
<!ENTITY para "¶">
<!ENTITY ocirc "ô">
<!ENTITY ouml "ö">
<!ENTITY num "#">
<!ENTITY boxUL "╝">
<!ENTITY IEcy "Е">
<!ENTITY Ocy "О">
<!ENTITY Ugrave "Ù">
<!ENTITY eogon "ę">
<!ENTITY sum "∑">
<!ENTITY mcy "м">
<!ENTITY YIcy "Ї">
<!ENTITY Gamma "Γ">
<!ENTITY isin "∈">
<!ENTITY cuesc "⋟">
<!ENTITY b.Pi "𝚷">
<!ENTITY Ubreve "Ŭ">
<!ENTITY starf "★">
<!ENTITY gne "⪈">
<!ENTITY gammad "ϝ">
<!ENTITY napos "ŉ">
<!ENTITY sup "⊃">
<!ENTITY dArr "⇓">
<!ENTITY Larr "↞">
<!ENTITY nVDash "⊯">
<!ENTITY boxhU "╨">
<!ENTITY Ggr "Γ">
<!ENTITY Idigr "Ϊ">
<!ENTITY AElig "Æ">
<!ENTITY Idot "İ">
<!ENTITY Lacute "Ĺ">
<!ENTITY sharp "♯">
<!ENTITY Ubrcy "Ў">
<!ENTITY lsqb "[">
<!ENTITY micro "µ">
<!ENTITY Sub "⋐">
<!ENTITY agr "α">
<!ENTITY nap "≉">
<!ENTITY sfgr "ς">
<!ENTITY block "█">
<!ENTITY nspar "∦">
<!ENTITY supnE "⫌">
<!ENTITY prsim "≾">
<!ENTITY shcy "ш">
<!ENTITY dblac "˝">
<!ENTITY xhArr "⟺">
<!ENTITY dtri "▿">
<!ENTITY barwed "⌅">
<!ENTITY zcy "з">
<!ENTITY agrave "à">
<!ENTITY par "∥">
<!ENTITY vsupne "⊋︀">
<!ENTITY Scy "С">
<!ENTITY zdot "ż">
<!ENTITY rsquor "’">
<!ENTITY Delta "Δ">
<!ENTITY nVdash "⊮">
<!ENTITY Pgr "Π">
<!ENTITY gamma "γ">
<!ENTITY tau "τ">
<!ENTITY Ecirc "Ê">
<!ENTITY sung "♪">
<!ENTITY natur "♮">
<!ENTITY or "∨">
<!ENTITY vsubne "⊊︀">
<!ENTITY Jcy "Й">
<!ENTITY square "□">
<!ENTITY b.Psi "𝚿">
<!ENTITY b.zeta "𝛇">
<!ENTITY gbreve "ğ">
<!ENTITY Kcedil "Ķ">
<!ENTITY ohm "Ω">
<!ENTITY frac35 "⅗">
<!ENTITY ssetmn "∖">
<!ENTITY boxUR "╚">
<!ENTITY frac34 "¾">
<!ENTITY target "⌖">
<!ENTITY cularr "↶">
<!ENTITY xcirc "◯">
<!ENTITY boxhD "╥">
<!ENTITY iecy "е">
<!ENTITY Euml "Ë">
<!ENTITY half "½">
<!ENTITY rang "〉">
<!ENTITY numero "№">
<!ENTITY Ugr "Υ">
<!ENTITY semi ";">
<!ENTITY times "×">
<!ENTITY rharu "⇀">
<!ENTITY iocy "ё">
<!ENTITY b.gammad "ϝ">
<!ENTITY lozf "⧫">
<!ENTITY thinsp " ">
<!ENTITY plusb "⊞">
<!ENTITY tilde "˜">
<!ENTITY Aogon "Ą">
<!ENTITY Eogon "Ę">
<!ENTITY blk12 "▒">
<!ENTITY pre "⪯">
<!ENTITY boxHd "╤">
<!ENTITY piv "ϖ">
<!ENTITY ncaron "ň">
<!ENTITY wcirc "ŵ">
<!ENTITY utri "▵">
<!ENTITY Prime "″">
<!ENTITY cedil "¸">
<!ENTITY idigr "ϊ">
<!ENTITY curren "¤">
<!ENTITY laquo "«">
<!ENTITY ulcrop "⌏">
<!ENTITY ring "˚">
<!ENTITY oacute "ó">
<!ENTITY Nacute "Ń">
<!ENTITY permil "‰">
<!ENTITY oacgr "ό">
<!ENTITY frac78 "⅞">
<!ENTITY blk34 "▓">
<!ENTITY gnsim "⋧">
<!ENTITY boxVH "╬">
<!ENTITY zhcy "ж">
<!ENTITY b.phiv "𝛟">
<!ENTITY loz "◊">
<!ENTITY Ngr "Ν">
<!ENTITY phgr "φ">
<!ENTITY b.iota "𝛊">
<!ENTITY ETH "Ð">
<!ENTITY trade "™">
<!ENTITY Cup "⋓">
<!ENTITY subnE "⫋">
<!ENTITY PHgr "Φ">
<!ENTITY xi "ξ">
<!ENTITY Rcy "Р">
<!ENTITY ggr "γ">
<!ENTITY Lmidot "Ŀ">
<!ENTITY Scirc "Ŝ">
<!ENTITY rtrif "▸">
<!ENTITY larrtl "↢">
<!ENTITY eDot "≑">
<!ENTITY boxVL "╣">
<!ENTITY THgr "Θ">
<!ENTITY Dstrok "Đ">
<!ENTITY cent "¢">
<!ENTITY odash "⊝">
<!ENTITY boxUl "╜">
<!ENTITY ape "≊">
<!ENTITY gEl "⪌">
<!ENTITY nltri "⋪">
<!ENTITY Aacute "Á">
<!ENTITY cuvee "⋎">
<!ENTITY gnE "≩">
<!ENTITY kgr "κ">
<!ENTITY iogon "į">
<!ENTITY rarrtl "↣">
<!ENTITY b.phi "𝛗">
<!ENTITY sccue "≽">
<!ENTITY IOcy "Ё">
<!ENTITY sext "✶">
<!ENTITY uplus "⊎">
<!ENTITY ecolon "≕">
<!ENTITY nlArr "⇍">
<!ENTITY scap "⪸">
<!ENTITY rarrlp "↬">
<!ENTITY ngE "≧̸">
<!ENTITY nsim "≁">
<!ENTITY Acy "А">
<!ENTITY emacr "ē">
<!ENTITY Jcirc "Ĵ">
<!ENTITY ltimes "⋉">
<!ENTITY Bcy "Б">
<!ENTITY b.Sigma "𝚺">
<!ENTITY cup "∪">
<!ENTITY fork "⋔">
<!ENTITY frac25 "⅖">
<!ENTITY setmn "∖">
<!ENTITY bsol "\">
<!ENTITY Ycy "Ы">
<!ENTITY b.Phi "𝚽">
<!ENTITY Gcedil "Ģ">
<!ENTITY frac23 "⅔">
<!ENTITY Iogon "Į">
<!ENTITY blank "␣">
<!ENTITY vprop "∝">
<!ENTITY boxVR "╠">
<!ENTITY ecy "э">
<!ENTITY OHacgr "Ώ">
<!ENTITY yen "¥">
<!ENTITY hairsp " ">
<!ENTITY plusdo "∔">
<!ENTITY lvnE "≨︀">
<!ENTITY boxUr "╙">
<!ENTITY breve "˘">
<!ENTITY rtimes "⋊">
<!ENTITY gnap "⪊">
<!ENTITY rtrie "⊵">
<!ENTITY Mcy "М">
<!ENTITY chi "χ">
<!ENTITY tdot " ⃛">
<!ENTITY PSgr "Ψ">
<!ENTITY Umacr "Ū">
<!ENTITY caret "⁁">
<!ENTITY xutri "△">
<!ENTITY CHcy "Ч">
<!ENTITY djcy "ђ">
<!ENTITY lambda "λ">
<!ENTITY Tstrok "Ŧ">
<!ENTITY puncsp " ">
<!ENTITY Ll "⋘">
<!ENTITY aacgr "ά">
<!ENTITY xdtri "▽">
<!ENTITY GJcy "Ѓ">
<!ENTITY gdot "ġ">
<!ENTITY sub "⊂">
<!ENTITY mid "∣">
<!ENTITY dzcy "џ">
<!ENTITY igrave "ì">
<!ENTITY Emacr "Ē">
<!ENTITY Rcedil "Ŗ">
<!ENTITY gt ">">
<!ENTITY harr "↔">
<!ENTITY larrlp "↫">
<!ENTITY thgr "θ">
<!ENTITY drarr "↘">
<!ENTITY map "↦">
<!ENTITY boxVh "╫">
<!ENTITY ijlig "ĳ">
<!ENTITY tcedil "ţ">
<!ENTITY dlcrop "⌍">
<!ENTITY prnsim "⋨">
<!ENTITY ecir "≖">
<!ENTITY rgr "ρ">
<!ENTITY deg "°">
<!ENTITY lap "⪅">
<!ENTITY KJcy "Ќ">
<!ENTITY Cdot "Ċ">
<!ENTITY Uogon "Ų">
<!ENTITY not "¬">
<!ENTITY dash "‐">
<!ENTITY nexist "∄">
<!ENTITY Lt "≪">
<!ENTITY b.Upsi "𝚼">
<!ENTITY Atilde "Ã">
<!ENTITY edot "ė">
<!ENTITY Ncedil "Ņ">
<!ENTITY els "⪕">
<!ENTITY erDot "≓">
<!ENTITY boxVl "╢">
<!ENTITY scy "с">
<!ENTITY ulcorn "⌜">
<!ENTITY eacgr "έ">
<!ENTITY Itilde "Ĩ">
<!ENTITY Zacute "Ź">
<!ENTITY xharr "⟷">
<!ENTITY gl "≷">
<!ENTITY chcy "ч">
<!ENTITY Oacute "Ó">
<!ENTITY itilde "ĩ">
<!ENTITY Ycirc "Ŷ">
<!ENTITY nhArr "⇎">
<!ENTITY Lstrok "Ł">
<!ENTITY divide "÷">
<!ENTITY Tcy "Т">
<!ENTITY Jukcy "Є">
<!ENTITY Yacute "Ý">
<!ENTITY boxv "│">
<!ENTITY hamilt "ℋ">
<!ENTITY nu "ν">
<!ENTITY ngt "≯">
<!ENTITY jsercy "ј">
<!ENTITY uml "¨">
<!ENTITY KHgr "Χ">
<!ENTITY lstrok "ł">
<!ENTITY nsupE "⫆̸">
<!ENTITY dtrif "▾">
<!ENTITY vellip "⋮">
<!ENTITY rceil "⌉">
<!ENTITY ell "ℓ">
<!ENTITY Ecy "Э">
<!ENTITY Jsercy "Ј">
<!ENTITY ljcy "љ">
<!ENTITY Kgr "Κ">
<!ENTITY ngr "ν">
<!ENTITY sigmav "ς">
<!ENTITY Gdot "Ġ">
<!ENTITY rdquor "”">
<!ENTITY prnap "⪹">
<!ENTITY tcy "т">
<!ENTITY frac12 "½">
<!ENTITY telrec "⌕">
<!ENTITY vdash "⊢">
<!ENTITY Zgr "Ζ">
<!ENTITY Auml "Ä">
<!ENTITY Ocirc "Ô">
<!ENTITY uogon "ų">
<!ENTITY hArr "⇔">
<!ENTITY nge "≱">
<!ENTITY iacute "í">
<!ENTITY Cacute "Ć">
<!ENTITY Omacr "Ō">
<!ENTITY equiv "≡">
<!ENTITY vltri "⊲">
<!ENTITY eta "η">
<!ENTITY SHcy "Ш">
<!ENTITY lowbar "_">
<!ENTITY percnt "&#x25;">
<!ENTITY frac16 "⅙">
<!ENTITY lrarr2 "⇆">
<!ENTITY nles "⩽̸">
<!ENTITY bump "≎">
<!ENTITY veebar "⊻">
<!ENTITY Wcirc "Ŵ">
<!ENTITY frac15 "⅕">
<!ENTITY bumpe "≏">
<!ENTITY egrave "è">
<!ENTITY frac14 "¼">
<!ENTITY supe "⊇">
<!ENTITY rfloor "⌋">
<!ENTITY Dgr "Δ">
<!ENTITY frac13 "⅓">
<!ENTITY ge "≥">
<!ENTITY boxVr "╟">
<!ENTITY pgr "π">
<!ENTITY kgreen "ĸ">
<!ENTITY boxh "─">
<!ENTITY Lambda "Λ">
<!ENTITY ugrave "ù">
<!ENTITY emsp13 " ">
<!ENTITY becaus "∵">
<!ENTITY sce "⪰">
<!ENTITY grave "`">
<!ENTITY zeta "ζ">
<!ENTITY b.Theta "𝚯">
<!ENTITY eth "ð">
<!ENTITY Ouml "Ö">
<!ENTITY check "✓">
<!ENTITY hybull "⁃">
<!ENTITY Gg "⋙">
<!ENTITY Ccaron "Č">
<!ENTITY plus "+">
<!ENTITY fllig "ﬂ">
<!ENTITY forall "∀">
<!ENTITY dcaron "ď">
<!ENTITY gacute "ǵ">
<!ENTITY sc "≻">
<!ENTITY OHgr "Ω">
<!ENTITY emsp14 " ">
<!ENTITY hellip "…">
<!ENTITY lhard "↽">
<!ENTITY sstarf "⋆">
<!ENTITY samalg "∐">
<!ENTITY EEgr "Η">
<!ENTITY rhov "ϱ">
<!ENTITY b.epsi "𝛆">
<!ENTITY lsquo "‘">
]>
<book>
    <bookinfo>
        <title>Seam - Contextual Components</title>
        <subtitle>A Framework for Enterprise Java</subtitle>
        <issuenum>2.0</issuenum>
	<productnumber>1</productnumber>

	<!--xi:include href="Author_Group.xml" xmlns:xi="http://www.w3.org/2001/XInclude" /-->
</bookinfo>
    <preface id="Book-Preface">
        <title>Introduction to JBoss Seam</title>

        <para>
            Seam is an application framework for Enterprise Java. It is inspired by the following principles:
        </para>

        <variablelist>
        
            <varlistentry>
                <term><emphasis>One kind of "stuff"</emphasis></term>
                <listitem>
                    <para>
                        Seam defines a uniform component model for all business logic in your application. 
                        A Seam component may be stateful, with the state associated with any one of several
                        well-defined contexts, including the long-running, persistent, <emphasis>business process 
                        context</emphasis> and the <emphasis>conversation context</emphasis>, which is
                        preserved across multiple web requests in a user interaction.
                    </para>
                    <para>
                        There is no distinction between presentation tier components and business logic
                        components in Seam. You can layer your application according to whatever architecture
                        you devise, rather than being forced to shoehorn your application logic into an
                        unnatural layering scheme forced upon you by whatever combination of stovepipe 
                        frameworks you're using today.
                    </para>
                    <para>
                        Unlike plain Java EE or J2EE components, Seam components may <emphasis>simultaneously</emphasis>
                        access state associated with the web request and state held in transactional resources (without
                        the need to propagate web request state manually via method parameters). You might object
                        that the application layering imposed upon you by the old J2EE platform was a Good Thing.
                        Well, nothing stops you creating an equivalent layered architecture using Seam—the difference
                        is that <emphasis>you</emphasis> get to architect your own application and decide what the
                        layers are and how they work together.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Integrate JSF with EJB 3.0</emphasis></term>
                <listitem>
                    <para>
                        JSF and EJB 3.0 are two of the best new features of Java EE 5. EJB3 is a brand new
                        component model for server side business and persistence logic. Meanwhile, JSF is a
                        great component model for the presentation tier. Unfortunately, neither component
                        model is able to solve all problems in computing by itself. Indeed, JSF and EJB3
                        work best used together. But the Java EE 5 specification provides no standard way
                        to integrate the two component models. Fortunately, the creators of both models
                        foresaw this situation and provided standard extension points to allow extension
                        and integration with other frameworks.
                    </para>
                    <para>
                        Seam unifies the component models of JSF and EJB3, eliminating glue code, and letting
                        the developer think about the business problem.
                    </para>
                    <para>
                        It is possible to write Seam applications where "everything" is an EJB. This may come 
                        as a surprise if you're used to thinking of EJBs as coarse-grained, so-called 
                        "heavyweight" objects. However, version 3.0 has completely changed the nature of EJB 
                        from the point of view of the developer. An EJB is a fine-grained object—nothing 
                        more complex than an annotated JavaBean. Seam even encourages you to use session beans 
                        as JSF action listeners!                    
                    </para>
                    <para>
                        On the other hand, if you prefer not to adopt EJB 3.0 at this time, you don't have to.
                        Virtually any Java class may be a Seam component, and Seam provides all the functionality
                        that you expect from a "lightweight" container, and more, for any component, EJB or 
                        otherwise.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Integrated AJAX</emphasis></term>
                <listitem>
                    <para>
                        Seam supports the best open source JSF-based AJAX solutions: JBoss RichFaces and 
                        ICEfaces. These solutions let you add AJAX capability to your user interface without 
                        the need to write any JavaScript code.
                    </para>
                    <para>
                        Alternatively, Seam provides a built-in JavaScript remoting layer that lets you call 
                        components asynchronously from client-side JavaScript without the need for an intermediate 
                        action layer. You can even subscribe to server-side JMS topics and receive messages via AJAX
                        push.
                    </para>
                    <para>
                        Neither of these approaches would work well, were it not for Seam's built-in concurrency 
                        and state management, which ensures that many concurrent fine-grained, asynchronous AJAX 
                        requests are handled safely and efficiently on the server side.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Business process as a first class construct</emphasis></term>
                <listitem>
                    <para>
                        Optionally, Seam provides transparent business process management via jBPM. You won't 
                        believe how easy it is to implement complex workflows, collaboration and and task management 
                        using jBPM and Seam.
                    </para>
                    <para>
                        Seam even allows you to define presentation tier pageflow using the same language (jPDL)
                        that jBPM uses for business process definition.
                    </para>
                    <para>
                        JSF provides an incredibly rich event model for the presentation tier. Seam enhances this
                        model by exposing jBPM's business process related events via exactly the same event handling
                        mechanism, providing a uniform event model for Seam's uniform component model.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Declarative state management</emphasis></term>
                <listitem>
                    <para>
                        We're all used to the concept of declarative transaction management and declarative
                        security from the early days of EJB. EJB 3.0 even introduces declarative persistence context
                        management. These are three examples of a broader problem of managing state that is
                        associated with a particular <emphasis>context</emphasis>, while ensuring that all needed
                        cleanup occurs when the context ends. Seam takes the concept of declarative state
                        management much further and applies it to <emphasis>application state</emphasis>.
                        Traditionally, J2EE applications implement state management manually, by getting
                        and setting servlet session and request attributes. This approach to state management is the
                        source of many bugs and memory leaks when applications fail to clean up session attributes,
                        or when session data associated with different workflows collides in a multi-window
                        application. Seam has the potential to almost entirely eliminate this class of bugs.
                    </para>
                    <para>
                        Declarative application state management is made possible by the richness of the
                        <emphasis>context model</emphasis> defined by Seam. Seam extends the context model defined 
                        by the servlet spec—request, session, application—with two new
                        contexts—conversation and business process—that are more meaningful from the
                        point of view of the business logic.
                    </para>
                    <para>
                        You'll be amazed at how many things become easier once you start using conversations.
                        Have you ever suffered pain dealing with lazy association fetching in an ORM solution
                        like Hibernate or JPA? Seam's conversation-scoped persistence contexts mean you'll
                        rarely have to see a <literal>LazyInitializationException</literal>. Have you ever
                        had problems with the refresh button? The back button? With duplicate form submission?
                        With propagating messages across a post-then-redirect? Seam's conversation management 
                        solves these problems without you even needing to really think about them. They're all
                        symptoms of the broken state management architecture that has been prevalent since the 
                        earliest days of the web.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Bijection</emphasis></term>
                <listitem>
                    <para>
                        The notion of <emphasis>Inversion of Control</emphasis> or <emphasis>dependency injection</emphasis>
                        exists in both JSF and EJB3, as well as in numerous so-called "lightweight containers". Most of
                        these containers emphasize injection of components that implement <emphasis>stateless services</emphasis>.
                        Even when injection of stateful components is supported (such as in JSF), it is virtually useless
                        for handling application state because the scope of the stateful component cannot be defined with
                        sufficient flexibility, and because components belonging to wider scopes may not be injected into 
                        components belonging to narrower scopes.
                    </para>
                    <para>
                        <emphasis>Bijection</emphasis> differs from IoC in that it is <emphasis>dynamic</emphasis>, 
                        <emphasis>contextual</emphasis>, and <emphasis>bidirectional</emphasis>.
                        You can think of it as a mechanism for aliasing contextual variables (names in the various contexts
                        bound to the current thread) to attributes of the component. Bijection allows auto-assembly of stateful
                        components by the container. It even allows a component to safely and easily manipulate the
                        value of a context variable, just by assigning it to an attribute of the component.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Workspace management and multi-window browsing</emphasis></term>
                <listitem>
                    <para>
                        Seam applications let the user freely switch between multiple browser tabs, each associated with a
                        different, safely isolated, conversation. Applications may even take advantage of <emphasis>workspace 
                        management</emphasis>, allowing the user to switch between conversations (workspaces) in a single
                        browser tab. Seam provides not only correct multi-window operation, but also multi-window-like
                        operation in a single window!
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Prefer annotations to XML</emphasis></term>
                <listitem>
                    <para>
                        Traditionally, the Java community has been in a state of deep confusion about precisely 
                        what kinds of meta-information counts as configuration. J2EE and popular "lightweight"
                        containers have provided XML-based deployment descriptors both for things which are
                        truly configurable between different deployments of the system, and for any other kinds
                        or declaration which can not easily be expressed in Java. Java 5 annotations changed
                        all this.
                    </para>
                    <para>
                        EJB 3.0 embraces annotations and "configuration by exception" as the easiest way to provide
                        information to the container in a declarative form. Unfortunately, JSF is still heavily
                        dependent on verbose XML configuration files. Seam extends the annotations provided by
                        EJB 3.0 with a set of annotations for declarative state management and declarative
                        context demarcation. This lets you eliminate the noisy JSF managed bean declarations
                        and reduce the required XML to just that information which truly belongs in XML
                        (the JSF navigation rules).
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>Integration testing is easy</emphasis></term>
                <listitem>
                    <para>
                        Seam components, being plain Java classes, are by nature unit testable. But for complex applications,
                        unit testing alone is insufficient. Integration testing has traditionally been a messy and
                        difficult task for Java web applications. Therefore, Seam provides for testability of Seam
                        applications as a core feature of the framework. You can easily write JUnit or TestNG tests
                        that reproduce a whole interaction with a user, exercising all components of the system
                        apart from the view (the JSP or Facelets page). You can run these tests directly inside your
                        IDE, where Seam will automatically deploy EJB components using JBoss Embedded.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>The specs ain't perfect</emphasis></term>
                <listitem>
                    <para>
                        We think the latest incarnation of Java EE is great. But we know it's never going to be 
                        perfect. Where there are holes in the specifications (for example, limitations in the
                        JSF lifecycle for GET requests), Seam fixes them. And the authors of Seam are working
                        with the JCP expert groups to make sure those fixes make their way back into the next
                        revision of the standards.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><emphasis>There's more to a web application than serving HTML pages</emphasis></term>
                <listitem>
                    <para>
                        Today's web frameworks think too small. They let you get user input off a form and
                        into your Java objects. And then they leave you hanging. A truly complete web application
                        framework should address problems like persistence, concurrency, asynchronicity, state 
                        management, security, email, messaging, PDF and chart generation, workflow, wikitext
                        rendering, webservices, caching and more. Once you scratch the surface of Seam, you'll
                        be amazed at how many problems become simpler...
                    </para>
                    <para>
                        Seam integrates JPA and Hibernate3 for persistence, the EJB Timer Service and Quartz 
                        for lightweight asychronicity, jBPM for workflow, JBoss Rules for business rules, Meldware 
                        Mail for email, Hibernate Search and Lucene for full text search, JMS for messaging and JBoss 
                        Cache for page fragment caching. Seam layers an innovative rule-based security framework over
                        JAAS and JBoss Rules. There's even JSF tag libraries for rendering PDF, outgoing email, charts 
                        and wikitext. Seam components may be called synchronously as a Web Service, asynchronously 
                        from client-side JavaScript or Google Web Toolkit or, of course, directly from JSF.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><emphasis>Get started now!</emphasis></term>
                <listitem>
                    <para>
                        Seam works in any Java EE application server, and even works in Tomcat. If your environment
                        supports EJB 3.0, great! If it doesn't, no problem, you can use Seam's built-in transaction
                        management with JPA or Hibernate3 for persistence. Or, you can deploy JBoss Embedded in
                        Tomcat, and get full support for EJB 3.0.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <mediaobject>
          <imageobject>
            <imagedata fileref="/images/architecture.png" align="center"/>
          </imageobject>
        </mediaobject>

        <para>
            It turns out that the combination of Seam, JSF and EJB3 is <emphasis>the</emphasis> simplest way
            to write a complex web application in Java. You won't believe how little code is required!
        </para>

	<section id="Book-We_Need_Feedback">
	<title>Help Contribute</title>
	<para>
		If you find a typographical error in the <citetitle>Seam Reference Guide</citetitle>, or if you have thought of a way to make this manual better, we would love to hear from you! Please submit a report in JIRA: <ulink url="http://jira.jboss.com/jira/browse/JBSEAM">http://jira.jboss.com/jira/browse/JBSEAM</ulink> against the project <citetitle>Seam</citetitle> and component <citetitle>Documentation</citetitle>.
	</para>
	<para>
		If you have a suggestion for improving the documentation, try to be as specific as possible when describing it. If you have found an error, please include the section number and some of the surrounding text so we can find it easily.
	</para>
	<note><title>Note</title><para>Be sure to give us your name so you can receive full credit.</para></note>
	
	<note><title>Note</title><para>This content is taken from https://svn.jboss.org/repos/seam/trunk/doc/ and has yet to be branched.</para></note>
	
	<para>To access the content directly and make changes yourself:</para>
<screen>
svn co https://svn.jboss.org/repos/seam/trunk/doc/ --username yourname</screen>

</section>

    </preface>
    <chapter id="tutorial">
    <title>Seam Tutorial</title>

    <section id="try-examples">
        <title>Try the examples</title>

        <para> In this tutorial, we'll assume that you have downloaded JBoss AS 4.2. You should also have a copy of
            Seam downloaded and extracted to a work directory. </para>

        <para> The directory structure of each example in Seam follows this pattern: </para>

        <itemizedlist>
            <listitem>
                <para> Web pages, images and stylesheets may be found in
                        <filename>examples/<replaceable>registration</replaceable>/view</filename>
                </para>
            </listitem>
            <listitem>
                <para> Resources such as deployment descriptors and data import scripts may be found in
                            <filename>examples/<replaceable>registration</replaceable>/resources</filename>
                </para>
            </listitem>
            <listitem>
                <para> Java source code may be found in
                    <filename>examples/<replaceable>registration</replaceable>/src</filename>
                </para>
            </listitem>
            <listitem>
                <para> The Ant build script is
                    <filename>examples/<replaceable>registration</replaceable>/build.xml</filename>
                </para>
            </listitem>
        </itemizedlist>

        <section>
            <title>Running the examples on JBoss AS</title>

            <para> First, make sure you have Ant correctly installed, with <literal>$ANT_HOME</literal> and
                    <literal>$JAVA_HOME</literal> set correctly. Next, make sure you set the location of your JBoss AS
                4.2 installation in the <literal>build.properties</literal> file in the root folder of your Seam
                installation. If you haven't already done so, start JBoss AS now by typing <literal>bin/run.sh</literal>
                or <literal>bin/run.bat</literal> in the root directory of your JBoss installation. </para>

            <para> Now, build and deploy the example by typing <literal>ant deploy</literal> in the
                        <filename>examples/<replaceable>registration</replaceable></filename> directory. </para>

            <para> Try it out by accessing <ulink url="http://localhost:8080/seam-registration/">
                    <literal>http://localhost:8080/seam-registration/</literal>
                </ulink> with your web browser. </para>

        </section>

        <section>
            <title>Running the examples on Tomcat</title>

            <para> 
                First, make sure you have Ant correctly installed, with <literal>$ANT_HOME</literal> and
                <literal>$JAVA_HOME</literal> set correctly. Next, make sure you set the location of your Tomcat 
                6.0 installation in the <literal>build.properties</literal> file in the root folder of your Seam
                installation.  You will need to follow the instructions in <xref linkend="config.install.embedded"/>
                for installing JBoss Embedded on Tomcat 6.0.  JBoss Embedded is required to run the Seam demo
                applications on Tomcat. (However, it is possible to use Seam on Tomcat without JBoss Embedded.)
            </para>

            <para> 
                Now, build and deploy the example by typing <literal>ant tomcat.deploy</literal> in the
                <filename>examples/<replaceable>registration</replaceable></filename> directory.
            </para>

            <para>Finally, start Tomcat.</para>

            <para>
                Try it out by accessing <ulink url="http://localhost:8080/jboss-seam-registration/">
                <literal>http://localhost:8080/jboss-seam-registration/</literal>
                </ulink> with your web browser.
            </para>

            <para>
                When you deploy the example to Tomcat, any EJB3 components will run inside the JBoss Embeddable EJB3
                container, a complete standalone EJB3 container environment.
            </para>

        </section>

        <section>
            <title>Running the example tests</title>
            <para> 
                Most of the examples come with a suite of TestNG integration tests. The easiest way to run the tests
                is to run <literal>ant testexample</literal> inside the
                <filename>examples/<replaceable>registration</replaceable></filename> directory. It is also possible
                to run the tests inside your IDE using the TestNG plugin.
            </para>
        </section>

    </section>

    <section id="registration-example">
        <title>Your first Seam application: the registration example</title>

        <para> The registration example is a fairly trivial application that lets a new user store his username, real
            name and password in the database. The example isn't intended to show off all of the cool functionality of
            Seam. However, it demonstrates the use of an EJB3 session bean as a JSF action listener, and basic
            configuration of Seam. </para>

        <para> We'll go slowly, since we realize you might not yet be familiar with EJB 3.0. </para>

        <para> The start page displays a very basic form with three input fields. Try filling them in and then
            submitting the form. This will save a user object in the database. </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/registration.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/registration.png" align="center"/>
            </imageobject>
        </mediaobject>

        <section>
            <title>Understanding the code</title>

            <para> The example is implemented with two JSP pages, one entity bean and one stateless session bean. </para>

            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="/images/register.png" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="/images/register.png" align="center"/>
                </imageobject>
            </mediaobject>

            <para> Let's take a look at the code, starting from the "bottom". </para>

            <section>
                <title>The entity bean: <literal>User.java</literal></title>

                <para> We need an EJB entity bean for user data. This class defines <emphasis>persistence</emphasis> and
                        <emphasis>validation</emphasis> declaratively, via annotations. It also needs some extra
                    annotations that define the class as a Seam component. </para>

<example><title>user data</title>
<programlistingco>
<areaspec>
                            <area id="registration-entity-annotation" coords="1"/>
                            <area id="registration-name-annotation" coords="2"/>
                            <area id="registration-scope-annotation" coords="3"/>
                            <area id="registration-table-annotation" coords="4"/>
                            <area id="registration-attributes" coords="9"/>
                            <area id="registration-empty-constructor" coords="20"/>
                            <area id="registration-notnull" coords="22"/>
                            <area id="registration-id-annotation" coords="44"/>
                        </areaspec>
<programlisting><![CDATA[@Entity
@Name("user")
@Scope(SESSION)
@Table(name="users")
public class User implements Serializable
{
   private static final long serialVersionUID = 1881413500711441951L;
   
   private String username;
   private String password;
   private String name;
   
   public User(String name, String password, String username)
   {
      this.name = name;
      this.password = password;
      this.username = username;
   }
   
   public User() {}
   
   @NotNull @Length(min=5, max=15)
   public String getPassword()
   {
      return password;
   }

   public void setPassword(String password)
   {
      this.password = password;
   }
   
   @NotNull
   public String getName()
   {
      return name;
   }

   public void setName(String name)
   {
      this.name = name;
   }
   
   @Id @NotNull @Length(min=5, max=15)
   public String getUsername()
   {
      return username;
   }

   public void setUsername(String username)
   {
      this.username = username;
   }

}]]></programlisting>
                        <calloutlist>
                            <callout arearefs="registration-entity-annotation">
                                <para> The EJB3 standard <literal>@Entity</literal> annotation indicates that the
                                        <literal>User</literal> class is an entity bean. </para>
                            </callout>
                            <callout arearefs="registration-name-annotation">
                                <para> A Seam component needs a <emphasis>component name</emphasis> specified by the
                                        <link linkend="name-annotation">
                                        <literal>@Name</literal>
                                    </link> annotation. This name must be unique within the Seam application. When JSF
                                    asks Seam to resolve a context variable with a name that is the same as a Seam
                                    component name, and the context variable is currently undefined (null), Seam will
                                    instantiate that component, and bind the new instance to the context variable. In
                                    this case, Seam will instantiate a <literal>User</literal> the first time JSF
                                    encounters a variable named <literal>user</literal>. </para>
                            </callout>
                            <callout arearefs="registration-scope-annotation">
                                <para> Whenever Seam instantiates a component, it binds the new instance to a context
                                    variable in the component's <emphasis>default context</emphasis>. The default
                                    context is specified using the <link linkend="scope-annotation">
                                        <literal>@Scope</literal>
                                    </link> annotation. The <literal>User</literal> bean is a session scoped component.
                                </para>
                            </callout>
                            <callout arearefs="registration-table-annotation">
                                <para> The EJB standard <literal>@Table</literal> annotation indicates that the
                                        <literal>User</literal> class is mapped to the <literal>users</literal> table.
                                </para>
                            </callout>
                            <callout arearefs="registration-attributes">
                                <para>
                                    <literal>name</literal>, <literal>password</literal> and <literal>username</literal>
                                    are the persistent attributes of the entity bean. All of our persistent attributes
                                    define accessor methods. These are needed when this component is used by JSF in the
                                    render response and update model values phases. </para>
                            </callout>
                            <callout arearefs="registration-empty-constructor">
                                <para> An empty constructor is both required by both the EJB specification and by Seam.
                                </para>
                            </callout>
                            <callout arearefs="registration-notnull">
                                <para> The <literal>@NotNull</literal> and <literal>@Length</literal> annotations are
                                    part of the Hibernate Validator framework. Seam integrates Hibernate Validator and
                                    lets you use it for data validation (even if you are not using Hibernate for
                                    persistence). </para>
                            </callout>
                            <callout arearefs="registration-id-annotation">
                                <para> The EJB standard <literal>@Id</literal> annotation indicates the primary key
                                    attribute of the entity bean. </para>
                            </callout>
                        </calloutlist>
                    </programlistingco>
                    <para> The most important things to notice in this example are the <literal>@Name</literal> and
                            <literal>@Scope</literal> annotations. These annotations establish that this class is a Seam component. </para>
                    <para> We'll see below that the properties of our <literal>User</literal> class are bound to
                        directly to JSF components and are populated by JSF during the update model values phase. We
                        don't need any tedious glue code to copy data back and forth between the JSP pages and the
                        entity bean domain model. </para>
                    <para> However, entity beans shouldn't do transaction management or database access. So we can't use
                        this component as a JSF action listener. For that we need a session bean. </para>
                
	
	
	</example>
	
	
	
            </section>

            <section>
                <title>The stateless session bean class: <literal>RegisterAction.java</literal></title>

                <para> Most Seam application use session beans as JSF action listeners (you can use JavaBeans instead if
                    you like). </para>
                <para> We have exactly one JSF action in our application, and one session bean method attached to it. In
                    this case, we'll use a stateless session bean, since all the state associated with our action is
                    held by the <literal>User</literal> bean. </para>

                <para> This is the only really interesting code in the example! </para>

                <example><title/>
                    <programlistingco>
                        <areaspec>
                            <area id="registration-stateless-annotation" coords="1"/>
                            <area id="registration-in-annotation" coords="6"/>
                            <area id="registration-persistencecontext-annotation" coords="9"/>
                            <area id="registration-logger-annotation" coords="12"/>
                            <area id="registration-action-listener" coords="15"/>
                            <area id="registration-query" coords="18"/>
                            <area id="registration-log" coords="24"/>
                            <area id="registration-outcome" coords="25"/>
                            <area id="registration-builtin" coords="29"/>
                        </areaspec>
                        <programlisting><![CDATA[@Stateless
@Name("register")
public class RegisterAction implements Register
{

   @In
   private User user;
   
   @PersistenceContext
   private EntityManager em;
   
   @Logger
   private Log log;
   
   public String register()
   {
      List existing = em.createQuery(
         "select username from User where username=#{user.username}")
         .getResultList();
         
      if (existing.size()==0)
      {
         em.persist(user);
         log.info("Registered new user #{user.username}");
         return "/registered.xhtml";
      }
      else
      {
         FacesMessages.instance().add("User #{user.username} already exists");
         return null;
      }
   }

}]]></programlisting>

                        <calloutlist>
                            <callout arearefs="registration-stateless-annotation">
                                <para> The EJB standard <literal>@Stateless</literal> annotation marks this class as
                                    stateless session bean. </para>
                            </callout>
                            <callout arearefs="registration-in-annotation">
                                <para> The <link linkend="in-annotation">
                                        <literal>@In</literal>
                                    </link> annotation marks an attribute of the bean as injected by Seam. In this case,
                                    the attribute is injected from a context variable named <literal>user</literal> (the
                                    instance variable name). </para>
                            </callout>
                            <callout arearefs="registration-persistencecontext-annotation">
                                <para> The EJB standard <literal>@PersistenceContext</literal> annotation is used to
                                    inject the EJB3 entity manager. </para>
                            </callout>
                            <callout arearefs="registration-logger-annotation">
                                <para> The Seam <literal>@Logger</literal> annotation is used to inject the component's
                                        <literal>Log</literal> instance. </para>
                            </callout>
                            <callout arearefs="registration-action-listener">
                                <para> The action listener method uses the standard EJB3
                                    <literal>EntityManager</literal> API to interact with the database, and returns the
                                    JSF outcome. Note that, since this is a sesson bean, a transaction is automatically
                                    begun when the <literal>register()</literal> method is called, and committed when it
                                    completes. </para>
                            </callout>
                            <callout arearefs="registration-query">
                                <para> Notice that Seam lets you use a JSF EL expression inside EJB-QL. Under the
                                    covers, this results in an ordinary JPA <literal>setParameter()</literal> call on
                                    the standard JPA <literal>Query</literal> object. Nice, huh? </para>
                            </callout>
                            <callout arearefs="registration-log">
                                <para> The <literal>Log</literal> API lets us easily display templated log messages.
                                </para>
                            </callout>
                            <callout arearefs="registration-outcome">
                                <para> JSF action listener methods return a string-valued outcome that determines what
                                    page will be displayed next. A null outcome (or a void action listener method)
                                    redisplays the previous page. In plain JSF, it is normal to always use a JSF
                                        <emphasis>navigation rule</emphasis> to determine the JSF view id from the
                                    outcome. For complex application this indirection is useful and a good practice.
                                    However, for very simple examples like this one, Seam lets you use the JSF view id
                                    as the outcome, eliminating the requirement for a navigation rule. <emphasis>Note
                                        that when you use a view id as an outcome, Seam always performs a browser
                                        redirect.</emphasis>
                                </para>
                            </callout>
                            <callout arearefs="registration-builtin">
                                <para> Seam provides a number of <emphasis>built-in components</emphasis> to help solve
                                    common problems. The <literal>FacesMessages</literal> component makes it easy to
                                    display templated error or success messages. Built-in Seam components may be
                                    obtained by injection, or by calling an <literal>instance()</literal> method.
                                </para>
                            </callout>
                        </calloutlist>
                    </programlistingco>

                    <para> Note that we did not explicitly specify a <literal>@Scope</literal> this time. Each Seam
                        component type has a default scope if not explicitly specified. For stateless session beans, the
                        default scope is the stateless context. Actually, <emphasis>all</emphasis> stateless session
                        beans belong in the stateless context. </para>

                    <para> Our session bean action listener performs the business and persistence logic for our
                        mini-application. In more complex applications, we might need to layer the code and refactor
                        persistence logic into a dedicated data access component. That's perfectly trivial to do. But
                        notice that Seam does not force you into any particular strategy for application layering. </para>

                    <para> Furthermore, notice that our session bean has simultaneous access to context associated with
                        the web request (the form values in the <literal>User</literal> object, for example), and state
                        held in transactional resources (the <literal>EntityManager</literal> object). This is a break
                        from traditional J2EE architectures. Again, if you are more comfortable with the traditional
                        J2EE layering, you can certainly implement that in a Seam application. But for many
                        applications, it's simply not very useful. </para>

	</example>
	
            </section>

            <section>
                <title>The session bean local interface: <literal>Register.java</literal></title>

                <para>Naturally, our session bean needs a local interface.</para>

                <example><title/>
                    <programlisting><![CDATA[@Local
public interface Register
{
   public String register();
}]]></programlisting>
                </example>

                <para> That's the end of the Java code. Now onto the deployment descriptors. </para>

            </section>

            <section>
                <title>The Seam component deployment descriptor: <literal>components.xml</literal></title>

                <para> If you've used many Java frameworks before, you'll be used to having to declare all your
                    component classes in some kind of XML file that gradually grows more and more unmanageable as your
                    project matures. You'll be relieved to know that Seam does not require that application components
                    be accompanied by XML. Most Seam applications require a very small amount of XML that does not grow
                    very much as the project gets bigger. </para>

                <para> Nevertheless, it is often useful to be able to provide for <emphasis>some</emphasis> external
                    configuration of <emphasis>some</emphasis> components (particularly the components built in to
                    Seam). You have a couple of options here, but the most flexible option is to provide this
                    configuration in a file called <literal>components.xml</literal>, located in the
                    <literal>WEB-INF</literal> directory. We'll use the <literal>components.xml</literal> file to tell
                    Seam how to find our EJB components in JNDI: </para>

                <example><title/>
                    <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<components xmlns="http://jboss.com/products/seam/components"
            xmlns:core="http://jboss.com/products/seam/core"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation=
                "http://jboss.com/products/seam/core http://jboss.com/products/seam/core-2.1.xsd 
                 http://jboss.com/products/seam/components http://jboss.com/products/seam/components-2.1.xsd">
            
     <core:init jndi-pattern="@jndiPattern@"/>
     
</components>]]></programlisting>
                </example>

                <para> This code configures a property named <literal>jndiPattern</literal> of a built-in Seam component
                    named <literal>org.jboss.seam.core.init</literal>. The funny <literal>@</literal> symbols are
                    there because our Ant build script puts the correct JNDI pattern in when we deploy the application.</para>

            </section>

            <section>
                <title>The web deployment description: <literal>web.xml</literal></title>

                <para> The presentation layer for our mini-application will be deployed in a WAR. So we'll need a web
                    deployment descriptor. </para>

                <example><title>web deployment descriptor config</title>
                    <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5"
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
                        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

    <!-- Seam -->

    <listener>
        <listener-class>org.jboss.seam.servlet.SeamListener</listener-class>
    </listener>

    <!-- JSF -->
              
    <listener>
        <listener-class>com.sun.faces.config.ConfigureListener</listener-class>
    </listener>
    
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml</param-value>
    </context-param>
              
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.seam</url-pattern>
    </servlet-mapping>
              
    <session-config>
        <session-timeout>10</session-timeout>
    </session-config>

</web-app>]]></programlisting>
                </example>

                <para> This <literal>web.xml</literal> file configures Seam and JSF. The configuration you see here is
                    pretty much identical in all Seam applications. </para>

            </section>

            <section>
                <title>The JSF configration: <literal>faces-config.xml</literal></title>

                <para> Most Seam applications use JSF views as the presentation layer. So usually we'll need
                        <literal>faces-config.xml</literal>. In our case, we are going to use Facelets for
                        defining our views, so we need to tell JSF to use Facelets as its templating engine. </para>

                <example id="registration-faces-config-xml"><title>registration faces configuration</title>
                    <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<faces-config version="1.2"
              xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd">

    <!-- Facelets support -->
    <application>
        <view-handler>com.sun.facelets.FaceletViewHandler</view-handler>
    </application>
    
</faces-config>]]></programlisting>
                </example>

                <para> Note that we don't need
                    any JSF managed bean declarations! Our managed beans are annotated Seam components. In Seam applications,
                    the <literal>faces-config.xml</literal> is used much less often than in plain JSF. </para>

                <para> In fact, once you have all the basic descriptors set up, the <emphasis>only</emphasis> XML you
                    need to write as you add new functionality to a Seam application is orchestration: navigation rules 
                    or jBPM process definitions. Seam takes the view that <emphasis>process flow</emphasis> and
                        <emphasis>configuration data</emphasis> are the only things that truly belong in XML. </para>

                <para> In this simple example, we don't even need a navigation rule, since we decided to embed the view
                    id in our action code. </para>

            </section>

            <section>
                <title>The EJB deployment descriptor: <literal>ejb-jar.xml</literal></title>

                <para> The <literal>ejb-jar.xml</literal> file integrates Seam with EJB3, by attaching the
                        <literal>SeamInterceptor</literal> to all session beans in the archive. </para>

                <programlisting><![CDATA[<ejb-jar xmlns="http://java.sun.com/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
                             http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd"
         version="3.0">
         
   <interceptors>
      <interceptor>
         <interceptor-class>org.jboss.seam.ejb.SeamInterceptor</interceptor-class>
      </interceptor>
   </interceptors>
   
   <assembly-descriptor>
      <interceptor-binding>
         <ejb-name>*</ejb-name>
         <interceptor-class>org.jboss.seam.ejb.SeamInterceptor</interceptor-class>
      </interceptor-binding>
   </assembly-descriptor>
   
</ejb-jar>]]></programlisting>

            </section>

            <section>
                <title>The EJB persistence deployment descriptor: <literal>persistence.xml</literal></title>

                <para> The <literal>persistence.xml</literal> file tells the EJB persistence provider where to find the
                    datasource, and contains some vendor-specific settings. In this case, enables automatic schema
                    export at startup time. </para>

                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
                                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd" 
             version="1.0">

   <persistence-unit name="userDatabase">
      <provider>org.hibernate.ejb.HibernatePersistence</provider>
      <jta-data-source>java:/DefaultDS</jta-data-source>
      <properties>
         <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
      </properties>
    </persistence-unit>
    
</persistence>]]></programlisting>

            </section>

            <section>
                <title>The view: <literal>register.xhtml</literal> and <literal>registered.xhtml</literal></title>

                <para> The view pages for a Seam application could be implemented using any technology that supports
                    JSF. In this example we use Facelets, because we think it's better than JSP.</para>

                <example id="registration-simpleform"><title>registration form</title>
                    <programlisting><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:s="http://jboss.com/products/seam/taglib"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core">

   <head>
      <title>Register New User</title>
   </head>
   <body>
      <f:view>
         <h:form>
            <s:validateAll>
               <h:panelGrid columns="2">
                  Username: <h:inputText value="#{user.username}" required="true"/>
                  Real Name: <h:inputText value="#{user.name}" required="true"/>
                  Password: <h:inputSecret value="#{user.password}" required="true"/>
               </h:panelGrid>
            </s:validateAll>
            <h:messages/>
            <h:commandButton value="Register" action="#{register.register}"/>
         </h:form>
      </f:view>
   </body>

</html>]]></programlisting>
                </example>

                <para> The only thing here that is specific to Seam is the
                    <literal>&lt;s:validateAll&gt;</literal> tag. This JSF component tells JSF to validate all
                    the contained input fields against the Hibernate Validator annotations specified on the entity bean. </para>

                <example id="registration-simplepage"><title>registration page</title>
                    <programlisting><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:f="http://java.sun.com/jsf/core">

   <head>
      <title>Successfully Registered New User</title>
   </head>
   <body>
      <f:view>
         Welcome, #{user.name}, you are successfully registered as #{user.username}.
      </f:view>
   </body>

</html>
]]></programlisting>
                </example>


                <para> This is a boring old Facelets page using some embedded EL. There is nothing specific to Seam
                    here. </para>

            </section>

            <section>
                <title>The EAR deployment descriptor: <literal>application.xml</literal></title>

                <para> Finally, since our application is deployed as an EAR, we need a deployment descriptor there, too. </para>

                <example id="registration-application-xml"><title>registration application</title>
                    <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<application xmlns="http://java.sun.com/xml/ns/javaee" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
                                 http://java.sun.com/xml/ns/javaee/application_5.xsd"
             version="5">
             
    <display-name>Seam Registration</display-name>

    <module>
        <web>
            <web-uri>jboss-seam-registration.war</web-uri>
            <context-root>/seam-registration</context-root>
        </web>
    </module>
    <module>
        <ejb>jboss-seam-registration.jar</ejb>
    </module>
    <module>
        <ejb>jboss-seam.jar</ejb>
    </module>
    <module>
        <java>jboss-el.jar</java>
    </module>

</application>]]></programlisting>
                </example>

                <para> This deployment descriptor links modules in the enterprise archive and binds the web application
                    to the context root <literal>/seam-registration</literal>. </para>

            <para> We've now seen <emphasis>all</emphasis> the files in the entire application! </para>

        </section>
</section>

        <section>
            <title>How it works</title>

            <para> When the form is submitted, JSF asks Seam to resolve the variable named <literal>user</literal>.
                Since there is no value already bound to that name (in any Seam context), Seam instantiates the
                    <literal>user</literal> component, and returns the resulting <literal>User</literal> entity bean
                instance to JSF after storing it in the Seam session context. </para>
            <para> The form input values are now validated against the Hibernate Validator constraints specified on the
                    <literal>User</literal> entity. If the constraints are violated, JSF redisplays the page. Otherwise,
                JSF binds the form input values to properties of the <literal>User</literal> entity bean. </para>
            <para> Next, JSF asks Seam to resolve the variable named <literal>register</literal>. Seam finds the
                    <literal>RegisterAction</literal> stateless session bean in the stateless context and returns it.
                JSF invokes the <literal>register()</literal> action listener method. </para>
            <para> Seam intercepts the method call and injects the <literal>User</literal> entity from the Seam session
                context, before continuing the invocation. </para>
            <para> The <literal>register()</literal> method checks if a user with the entered username already exists.
                If so, an error message is queued with the <literal>FacesMessages</literal> component, and a null
                outcome is returned, causing a page redisplay. The <literal>FacesMessages</literal> component
                interpolates the JSF expression embedded in the message string and adds a JSF
                <literal>FacesMessage</literal> to the view. </para>
            <para> If no user with that username exists, the <literal>"/registered.xhtml"</literal> outcome triggers a
                browser redirect to the <literal>registered.xhtml</literal> page. When JSF comes to render the page, it
                asks Seam to resolve the variable named <literal>user</literal> and uses property values of the returned
                    <literal>User</literal> entity from Seam's session scope. </para>

        </section>

    </section>

    <section id="messages">
        <title>Clickable lists in Seam: the messages example</title>

        <para> Clickable lists of database search results are such an important part of any online application that Seam
            provides special functionality on top of JSF to make it easier to query data using EJB-QL or HQL and display
            it as a clickable list using a JSF <literal>&lt;h:dataTable&gt;</literal>. The messages example
            demonstrates this functionality. </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/messages.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/messages.png" align="center"/>
            </imageobject>
        </mediaobject>

        <section>
            <title>Understanding the code</title>
            <para> The message list example has one entity bean, <literal>Message</literal>, one session bean,
                    <literal>MessageListBean</literal> and one JSP. </para>

            <section>
                <title>The entity bean: <literal>Message.java</literal></title>

                <para> The <literal>Message</literal> entity defines the title, text, date and time of a message, and a
                    flag indicating whether the message has been read: </para>

                <example><title/>
                    <programlisting><![CDATA[@Entity
@Name("message")
@Scope(EVENT)
public class Message implements Serializable
{
   private Long id;
   private String title;
   private String text;
   private boolean read;
   private Date datetime;
   
   @Id @GeneratedValue
   public Long getId() {
      return id;
   }
   public void setId(Long id) {
      this.id = id;
   }
   
   @NotNull @Length(max=100)
   public String getTitle() {
      return title;
   }
   public void setTitle(String title) {
      this.title = title;
   }
   
   @NotNull @Lob
   public String getText() {
      return text;
   }
   public void setText(String text) {
      this.text = text;
   }
   
   @NotNull
   public boolean isRead() {
      return read;
   }
   public void setRead(boolean read) {
      this.read = read;
   }
   
   @NotNull 
   @Basic @Temporal(TemporalType.TIMESTAMP)
   public Date getDatetime() {
      return datetime;
   }
   public void setDatetime(Date datetime) {
      this.datetime = datetime;
   }
   
}]]></programlisting>
                </example>

            </section>

            <section>
                <title>The stateful session bean: <literal>MessageManagerBean.java</literal></title>

                <para> Just like in the previous example, we have a session bean, <literal>MessageManagerBean</literal>,
                    which defines the action listener methods for the two buttons on our form. One of the buttons
                    selects a message from the list, and displays that message. The other button deletes a message. So
                    far, this is not so different to the previous example. </para>

                <para> But <literal>MessageManagerBean</literal> is also responsible for fetching the list of messages
                    the first time we navigate to the message list page. There are various ways the user could navigate
                    to the page, and not all of them are preceded by a JSF action—the user might have
                    bookmarked the page, for example. So the job of fetching the message list takes place in a Seam
                        <emphasis>factory method</emphasis>, instead of in an action listener method. </para>

                <para> We want to cache the list of messages in memory between server requests, so we will make this a
                    stateful session bean. </para>

                <example><title/>
                    <programlistingco>
                        <areaspec>
                            <area id="messages-datamodel" coords="7"/>
                            <area id="messages-datamodelselection" coords="10"/>
                            <area id="messages-out" coords="11"/>
                            <area id="messages-persistencecontext" coords="14"/>
                            <area id="messages-factory" coords="17"/>
                            <area id="messages-select" coords="24"/>
                            <area id="messages-delete" coords="29"/>
                            <area id="messages-remove" coords="36"/>
                        </areaspec>
                        <programlisting><![CDATA[@Stateful
@Scope(SESSION)
@Name("messageManager")
public class MessageManagerBean implements Serializable, MessageManager
{

   @DataModel
   private List<Message> messageList;
   
   @DataModelSelection
   @Out(required=false)
   private Message message;
   
   @PersistenceContext(type=EXTENDED)
   private EntityManager em;
   
   @Factory("messageList")
   public void findMessages()
   {
      messageList = em.createQuery("from Message msg order by msg.datetime desc")
                      .getResultList();
   }
   
   public void select()
   {
      message.setRead(true);
   }
   
   public void delete()
   {
      messageList.remove(message);
      em.remove(message);
      message=null;
   }
   
   @Remove
   public void destroy() {}

}]]></programlisting>
                        <calloutlist>
                            <callout arearefs="messages-datamodel">
                                <para> The <literal>@DataModel</literal> annotation exposes an attibute of type
                                        <literal>java.util.List</literal> to the JSF page as an instance of
                                        <literal>javax.faces.model.DataModel</literal>. This allows us to use the list
                                    in a JSF <literal>&lt;h:dataTable&gt;</literal> with clickable links for
                                    each row. In this case, the <literal>DataModel</literal> is made available in a
                                    session context variable named <literal>messageList</literal>. </para>
                            </callout>
                            <callout arearefs="messages-datamodelselection">
                                <para> The <literal>@DataModelSelection</literal> annotation tells Seam to inject the
                                        <literal>List</literal> element that corresponded to the clicked link. </para>
                            </callout>
                            <callout arearefs="messages-out">
                                <para> The <literal>@Out</literal> annotation then exposes the selected value directly
                                    to the page. So ever time a row of the clickable list is selected, the
                                        <literal>Message</literal> is injected to the attribute of the stateful bean,
                                    and the subsequently <emphasis>outjected</emphasis> to the event context variable
                                    named <literal>message</literal>. </para>
                            </callout>
                            <callout arearefs="messages-persistencecontext">
                                <para> This stateful bean has an EJB3 <emphasis>extended persistence context</emphasis>.
                                    The messages retrieved in the query remain in the managed state as long as the bean
                                    exists, so any subsequent method calls to the stateful bean can update them without
                                    needing to make any explicit call to the <literal>EntityManager</literal>. </para>
                            </callout>
                            <callout arearefs="messages-factory">
                                <para> The first time we navigate to the JSP page, there will be no value in the
                                        <literal>messageList</literal> context variable. The <literal>@Factory</literal>
                                    annotation tells Seam to create an instance of <literal>MessageManagerBean</literal>
                                    and invoke the <literal>findMessages()</literal> method to initialize the value. We
                                    call <literal>findMessages()</literal> a <emphasis>factory method</emphasis> for
                                        <literal>messages</literal>. </para>
                            </callout>
                            <callout arearefs="messages-select">
                                <para> The <literal>select()</literal> action listener method marks the selected
                                        <literal>Message</literal> as read, and updates it in the database. </para>
                            </callout>
                            <callout arearefs="messages-delete">
                                <para> The <literal>delete()</literal> action listener method removes the selected
                                        <literal>Message</literal> from the database. </para>
                            </callout>
                            <callout arearefs="messages-remove">
                                <para> All stateful session bean Seam components <emphasis>must</emphasis> have a method
                                    with no parameters marked <literal>@Remove</literal> that Seam uses to remove 
                                    the stateful bean when the Seam context ends, and clean up any server-side state.
                                </para>
                            </callout>
                        </calloutlist>
                    </programlistingco>
                </example>

                <para> Note that this is a session-scoped Seam component. It is associated with the user login session,
                    and all requests from a login session share the same instance of the component. (In Seam
                    applications, we usually use session-scoped components sparingly.) </para>

            </section>

            <section>
                <title>The session bean local interface: <literal>MessageManager.java</literal></title>

                <para> All session beans have a business interface, of course. </para>

                <programlisting><![CDATA[@Local
public interface MessageManager
{
   public void findMessages();
   public void select();
   public void delete();
   public void destroy();
}]]></programlisting>

                <para> From now on, we won't show local interfaces in our code examples. </para>

                <para> Let's skip over <literal>components.xml</literal>, <literal>persistence.xml</literal>,
                        <literal>web.xml</literal>, <literal>ejb-jar.xml</literal>, <literal>faces-config.xml</literal>
                    and <literal>application.xml</literal> since they are much the same as the previous example, and go
                    straight to the JSP. </para>

            </section>

            <section>
                <title>The view: <literal>messages.jsp</literal></title>

                <para> The JSP page is a straightforward use of the JSF <literal>&lt;h:dataTable&gt;</literal>
                    component. Again, nothing specific to Seam. </para>

                <example><title/>
                    <programlisting><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<html>
 <head>
  <title>Messages</title>
 </head>
 <body>
  <f:view>
   <h:form>
     <h2>Message List</h2>
     <h:outputText value="No messages to display" 
                   rendered="#{messageList.rowCount==0}"/>
     <h:dataTable var="msg" value="#{messageList}" 
                  rendered="#{messageList.rowCount>0}">
        <h:column>
           <f:facet name="header">
              <h:outputText value="Read"/>
           </f:facet>
           <h:selectBooleanCheckbox value="#{msg.read}" disabled="true"/>
        </h:column>
        <h:column>
           <f:facet name="header">
              <h:outputText value="Title"/>
           </f:facet>
           <h:commandLink value="#{msg.title}" action="#{messageManager.select}"/>
        </h:column>
        <h:column>
           <f:facet name="header">
              <h:outputText value="Date/Time"/>
           </f:facet>
           <h:outputText value="#{msg.datetime}">
              <f:convertDateTime type="both" dateStyle="medium" timeStyle="short"/>
           </h:outputText>
        </h:column>
        <h:column>
           <h:commandButton value="Delete" action="#{messageManager.delete}"/>
        </h:column>
     </h:dataTable>
     <h3><h:outputText value="#{message.title}"/></h3>
     <div><h:outputText value="#{message.text}"/></div>
   </h:form>
  </f:view>
 </body>
</html>]]></programlisting>
                </example>

            </section>

        </section>

        <section>
            <title>How it works</title>

            <para> The first time we navigate to the <literal>messages.jsp</literal> page, whether by a JSF postback
                (faces request) or a direct browser GET request (non-faces request), the page will try to resolve the
                    <literal>messageList</literal> context variable. Since this context variable is not initialized,
                Seam will call the factory method <literal>findMessages()</literal>, which performs a query against the
                database and results in a <literal>DataModel</literal> being outjected. This
                <literal>DataModel</literal> provides the row data needed for rendering the
                    <literal>&lt;h:dataTable&gt;</literal>. </para>

            <para> When the user clicks the <literal>&lt;h:commandLink&gt;</literal>, JSF calls the
                    <literal>select()</literal> action listener. Seam intercepts this call and injects the selected row
                data into the <literal>message</literal> attribute of the <literal>messageManager</literal> component.
                The action listener fires, marking the selected <literal>Message</literal> as read. At the end of the
                call, Seam outjects the selected <literal>Message</literal> to the context variable named
                    <literal>message</literal>. Next, the EJB container commits the transaction, and the change to the
                    <literal>Message</literal> is flushed to the database. Finally, the page is re-rendered,
                redisplaying the message list, and displaying the selected message below it. </para>

            <para> If the user clicks the <literal>&lt;h:commandButton&gt;</literal>, JSF calls the
                    <literal>delete()</literal> action listener. Seam intercepts this call and injects the selected row
                data into the <literal>message</literal> attribute of the <literal>messageList</literal> component. The
                action listener fires, removing the selected <literal>Message</literal> from the list, and also calling
                    <literal>remove()</literal> on the <literal>EntityManager</literal>. At the end of the call, Seam
                refreshes the <literal>messageList</literal> context variable and clears the context variable named
                    <literal>message</literal>. The EJB container commits the transaction, and deletes the
                    <literal>Message</literal> from the database. Finally, the page is re-rendered, redisplaying the
                message list. </para>

        </section>

    </section>

    <section id="todo">
        <title>Seam and jBPM: the todo list example</title>

        <para> jBPM provides sophisticated functionality for workflow and task management. To get a small taste of how
            jBPM integrates with Seam, we'll show you a simple "todo list" application. Since managing lists of tasks is
            such core functionality for jBPM, there is hardly any Java code at all in this example. </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/todo.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/todo.png" align="center"/>
            </imageobject>
        </mediaobject>

        <section>
            <title>Understanding the code</title>
            <para> The center of this example is the jBPM process definition. There are also two JSPs and two trivial
                JavaBeans (There was no reason to use session beans, since they do not access the database, or have any
                other transactional behavior). Let's start with the process definition: </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="todo-startstate" coords="3"/>
                        <area id="todo-tasknode" coords="7"/>
                        <area id="todo-task" coords="8"/>
                        <area id="todo-assignment" coords="9"/>
                        <area id="todo-endstate" coords="14"/>
                    </areaspec>
                    <programlisting><![CDATA[<process-definition name="todo">
   
   <start-state name="start">
      <transition to="todo"/>
   </start-state>
   
   <task-node name="todo">
      <task name="todo" description="#{todoList.description}">
         <assignment actor-id="#{actor.id}"/>
      </task>
      <transition to="done"/>
   </task-node>
   
   <end-state name="done"/>
   
</process-definition>]]></programlisting>
                    <calloutlist>
                        <callout arearefs="todo-startstate">
                            <para> The <literal>&lt;start-state&gt;</literal> node represents the logical start
                                of the process. When the process starts, it immediately transitions to the
                                <literal>todo</literal> node. </para>
                        </callout>
                        <callout arearefs="todo-tasknode">
                            <para> The <literal>&lt;task-node&gt;</literal> node represents a <emphasis>wait
                                    state</emphasis>, where business process execution pauses, waiting for one or more
                                tasks to be performed. </para>
                        </callout>
                        <callout arearefs="todo-task">
                            <para> The <literal>&lt;task&gt;</literal> element defines a task to be performed by
                                a user. Since there is only one task defined on this node, when it is complete,
                                execution resumes, and we transition to the end state. The task gets its description
                                from a Seam component named <literal>todoList</literal> (one of the JavaBeans). </para>
                        </callout>
                        <callout arearefs="todo-assignment">
                            <para> Tasks need to be assigned to a user or group of users when they are created. In this
                                case, the task is assigned to the current user, which we get from a built-in Seam
                                component named <literal>actor</literal>. Any Seam component may be used to perform task
                                assignment. </para>
                        </callout>
                        <callout arearefs="todo-endstate">
                            <para> The <literal>&lt;end-state&gt;</literal> node defines the logical end of the
                                business process. When execution reaches this node, the process instance is destroyed.
                            </para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

            <para> If we view this process definition using the process definition editor provided by JBossIDE, this is
                what it looks like: </para>

            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="/images/todo-process.png" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="/images/todo-process.png" align="center"/>
                </imageobject>
            </mediaobject>

            <para> This document defines our <emphasis>business process</emphasis> as a graph of nodes. This is the most
                trivial possible business process: there is one <emphasis>task</emphasis> to be performed, and when that
                task is complete, the business process ends. </para>

            <para> The first JavaBean handles the login screen <literal>login.jsp</literal>. Its job is just to
                initialize the jBPM actor id using the <literal>actor</literal> component. (In a real application, it
                would also need to authenticate the user.) </para>

            <example><title/>
                <programlisting><![CDATA[@Name("login")
public class Login {
   
   @In
   private Actor actor;
   
   private String user;

   public String getUser() {
      return user;
   }

   public void setUser(String user) {
      this.user = user;
   }
   
   public String login()
   {
      actor.setId(user);
      return "/todo.jsp";
   }
}]]></programlisting>
            </example>

            <para> Here we see the use of <literal>@In</literal> to inject the built-in <literal>Actor</literal>
                component. </para>

            <para> The JSP itself is trivial: </para>

            <example><title/>
                <programlisting><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h"%>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f"%>
<html>
<head>
<title>Login</title>
</head>
<body>
<h1>Login</h1>
<f:view>
    <h:form>
      <div>
        <h:inputText value="#{login.user}"/>
        <h:commandButton value="Login" action="#{login.login}"/>
      </div>
    </h:form>
</f:view>
</body>
</html>]]></programlisting>

            </example>

            <para> The second JavaBean is responsible for starting business process instances, and ending tasks. </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="todo-description" coords="6"/>
                        <area id="todo-createprocess-annotation" coords="15"/>
                        <area id="todo-task-annotations" coords="18"/>
                    </areaspec>
                    <programlisting><![CDATA[@Name("todoList")
public class TodoList {
   
   private String description;
   
   public String getDescription()
   {
      return description;
   }

   public void setDescription(String description) {
      this.description = description;
   }
   
   @CreateProcess(definition="todo")
   public void createTodo() {}
   
   @StartTask @EndTask
   public void done() {}

}]]></programlisting>
                    <calloutlist>
                        <callout arearefs="todo-description">
                            <para> The description property accepts user input form the JSP page, and exposes it to the
                                process definition, allowing the task description to be set. </para>
                        </callout>
                        <callout arearefs="todo-createprocess-annotation">
                            <para> The Seam <literal>@CreateProcess</literal> annotation creates a new jBPM process
                                instance for the named process definition. </para>
                        </callout>
                        <callout arearefs="todo-task-annotations">
                            <para> The Seam <literal>@StartTask</literal> annotation starts work on a task. The
                                    <literal>@EndTask</literal> ends the task, and allows the business process execution
                                to resume. </para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

            <para> In a more realistic example, <literal>@StartTask</literal> and <literal>@EndTask</literal> would not
                appear on the same method, because there is usually work to be done using the application in order to
                complete the task. </para>

            <para> Finally, the meat of the application is in <literal>todo.jsp</literal>: </para>

            <example><title/>
                <programlisting><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<%@ taglib uri="http://jboss.com/products/seam/taglib" prefix="s" %>
<html>
<head>
<title>Todo List</title>
</head>
<body>
<h1>Todo List</h1>
<f:view>
   <h:form id="list">
      <div>
         <h:outputText value="There are no todo items." 
                       rendered="#{empty taskInstanceList}"/>
         <h:dataTable value="#{taskInstanceList}" var="task" 
                      rendered="#{not empty taskInstanceList}">
            <h:column>
                <f:facet name="header">
                    <h:outputText value="Description"/>
                </f:facet>
                <h:inputText value="#{task.description}"/>
            </h:column>
            <h:column>
                <f:facet name="header">
                    <h:outputText value="Created"/>
                </f:facet>
                <h:outputText value="#{task.taskMgmtInstance.processInstance.start}">
                    <f:convertDateTime type="date"/>
                </h:outputText>
            </h:column>
            <h:column>
                <f:facet name="header">
                    <h:outputText value="Priority"/>
                </f:facet>
                <h:inputText value="#{task.priority}" style="width: 30"/>
            </h:column>
            <h:column>
                <f:facet name="header">
                    <h:outputText value="Due Date"/>
                </f:facet>
                <h:inputText value="#{task.dueDate}" style="width: 100">
                    <f:convertDateTime type="date" dateStyle="short"/>
                </h:inputText>
            </h:column>
            <h:column>
                <s:button value="Done" action="#{todoList.done}" taskInstance="#{task}"/>
            </h:column>
         </h:dataTable>
      </div>
      <div>
      <h:messages/>
      </div>
      <div>
         <h:commandButton value="Update Items" action="update"/>
      </div>
   </h:form>
   <h:form id="new">
      <div>
         <h:inputText value="#{todoList.description}"/>
         <h:commandButton value="Create New Item" action="#{todoList.createTodo}"/>
      </div>
   </h:form>
</f:view>
</body>
</html>]]></programlisting>
            </example>

            <para> Let's take this one piece at a time. </para>

            <para> The page renders a list of tasks, which it gets from a built-in Seam component named
                    <literal>taskInstanceList</literal>. The list is defined inside a JSF form. </para>

            <programlisting><![CDATA[<h:form id="list">
   <div>
      <h:outputText value="There are no todo items." rendered="#{empty taskInstanceList}"/>
      <h:dataTable value="#{taskInstanceList}" var="task" 
                   rendered="#{not empty taskInstanceList}">
         ...
      </h:dataTable>
   </div>
</h:form>]]></programlisting>

            <para> Each element of the list is an instance of the jBPM class <literal>TaskInstance</literal>. The
                following code simply displays the interesting properties of each task in the list. For the description,
                priority and due date, we use input controls, to allow the user to update these values. </para>

            <programlisting><![CDATA[<h:column>
    <f:facet name="header">
       <h:outputText value="Description"/>
    </f:facet>
    <h:inputText value="#{task.description}"/>
</h:column>
<h:column>
    <f:facet name="header">
        <h:outputText value="Created"/>
    </f:facet>
    <h:outputText value="#{task.taskMgmtInstance.processInstance.start}">
        <f:convertDateTime type="date"/>
    </h:outputText>
</h:column>
<h:column>
    <f:facet name="header">
        <h:outputText value="Priority"/>
    </f:facet>
    <h:inputText value="#{task.priority}" style="width: 30"/>
</h:column>
<h:column>
    <f:facet name="header">
        <h:outputText value="Due Date"/>
    </f:facet>
    <h:inputText value="#{task.dueDate}" style="width: 100">
        <f:convertDateTime type="date" dateStyle="short"/>
    </h:inputText>
</h:column>]]></programlisting>


            <para> This button ends the task by calling the action method annotated <literal>@StartTask
                @EndTask</literal>. It passes the task id to Seam as a request parameter: </para>

            <programlisting><![CDATA[<h:column>
    <s:button value="Done" action="#{todoList.done}" taskInstance="#{task}"/>
</h:column>]]></programlisting>

            <para> (Note that this is using a Seam <literal>&lt;s:button&gt;</literal> JSF control from the
                    <literal>seam-ui.jar</literal> package.) </para>

            <para> This button is used to update the properties of the tasks. When the form is submitted, Seam and jBPM
                will make any changes to the tasks persistent. There is no need for any action listener method: </para>

            <programlisting><![CDATA[<h:commandButton value="Update Items" action="update"/>]]></programlisting>

            <para> A second form on the page is used to create new items, by calling the action method annotated
                    <literal>@CreateProcess</literal>. </para>

            <programlisting><![CDATA[<h:form id="new">
    <div>
        <h:inputText value="#{todoList.description}"/>
        <h:commandButton value="Create New Item" action="#{todoList.createTodo}"/>
    </div>
</h:form>]]></programlisting>

            <para> There are several other files needed for the example, but they are just standard jBPM and Seam
                configuration and not very interesting. </para>
        </section>

        <section>
            <title>How it works</title>
            <para>TODO</para>
        </section>

    </section>

    <section id="numberguess">
        <title>Seam pageflow: the numberguess example</title>

        <para> For Seam applications with relatively freeform (ad hoc) navigation, JSF/Seam navigation rules are a
            perfectly good way to define the page flow. For applications with a more constrained style of navigation,
            especially for user interfaces which are more stateful, navigation rules make it difficult to really
            understand the flow of the system. To understand the flow, you need to piece it together from the view
            pages, the actions and the navigation rules. </para>

        <para> Seam allows you to use a jPDL process definition to define pageflow. The simple number guessing example
            shows how this is done. </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/numberguess.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/numberguess.png" align="center"/>
            </imageobject>
        </mediaobject>

        <section>
            <title>Understanding the code</title>
            <para> The example is implemented using one JavaBean, three JSP pages and a jPDL pageflow definition. Let's
                begin with the pageflow: </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="numberguess-page" coords="8"/>
                        <area id="numberguess-transition" coords="10"/>
                        <area id="numberguess-action" coords="11"/>
                        <area id="numberguess-decision" coords="16"/>
                    </areaspec>
                    <programlisting><![CDATA[<pageflow-definition 
        xmlns="http://jboss.com/products/seam/pageflow"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://jboss.com/products/seam/pageflow 
                            http://jboss.com/products/seam/pageflow-2.1.xsd"
        name="numberGuess">
   
   <start-page name="displayGuess" view-id="/numberGuess.jspx">
      <redirect/>
      <transition name="guess" to="evaluateGuess">
         <action expression="#{numberGuess.guess}"/>
      </transition>
      <transition name="giveup" to="giveup"/>
   </start-page>
   
   <decision name="evaluateGuess" expression="#{numberGuess.correctGuess}">
      <transition name="true" to="win"/>
      <transition name="false" to="evaluateRemainingGuesses"/>
   </decision>
   
   <decision name="evaluateRemainingGuesses" expression="#{numberGuess.lastGuess}">
      <transition name="true" to="lose"/>
      <transition name="false" to="displayGuess"/>
   </decision>
   
   <page name="giveup" view-id="/giveup.jspx">
      <redirect/>
      <transition name="yes" to="lose"/>
      <transition name="no" to="displayGuess"/>
   </page>
   
   <page name="win" view-id="/win.jspx">
      <redirect/>
      <end-conversation/>
   </page>
   
   <page name="lose" view-id="/lose.jspx">
      <redirect/>
      <end-conversation/>
   </page>
   
</pageflow-definition>]]></programlisting>
                    <calloutlist>
                        <callout arearefs="numberguess-page">
                            <para> The <literal>&lt;page&gt;</literal> element defines a wait state where the
                                system displays a particular JSF view and waits for user input. The
                                <literal>view-id</literal> is the same JSF view id used in plain JSF navigation rules.
                                The <literal>redirect</literal> attribute tells Seam to use post-then-redirect when
                                navigating to the page. (This results in friendly browser URLs.) </para>
                        </callout>
                        <callout arearefs="numberguess-transition">
                            <para> The <literal>&lt;transition&gt;</literal> element names a JSF outcome. The
                                transition is triggered when a JSF action results in that outcome. Execution will then
                                proceed to the next node of the pageflow graph, after invocation of any jBPM transition
                                actions. </para>
                        </callout>
                        <callout arearefs="numberguess-action">
                            <para> A transition <literal>&lt;action&gt;</literal> is just like a JSF action,
                                except that it occurs when a jBPM transition occurs. The transition action can invoke
                                any Seam component. </para>
                        </callout>
                        <callout arearefs="numberguess-decision">
                            <para> A <literal>&lt;decision&gt;</literal> node branches the pageflow, and
                                determines the next node to execute by evaluating a JSF EL expression. </para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

            <para> Here is what the pageflow looks like in the JBossIDE pageflow editor: </para>

            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="/images/numberguess-pageflow.png" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="/images/numberguess-pageflow.png" align="center"/>
                </imageobject>
            </mediaobject>

            <para> Now that we have seen the pageflow, it is very, very easy to understand the rest of the application! </para>

            <para> Here is the main page of the application, <literal>numberGuess.jspx</literal>: </para>

            <example><title/>
                <programlisting><![CDATA[<<?xml version="1.0"?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" 
          xmlns:h="http://java.sun.com/jsf/html"
          xmlns:f="http://java.sun.com/jsf/core"
          xmlns:s="http://jboss.com/products/seam/taglib"
          xmlns="http://www.w3.org/1999/xhtml"
          version="2.0">
  <jsp:output doctype-root-element="html" 
              doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
              doctype-system="http://www.w3c.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
  <jsp:directive.page contentType="text/html"/>
  <html>
  <head>
    <title>Guess a number...</title>
    <link href="niceforms.css" rel="stylesheet" type="text/css" />
    <script language="javascript" type="text/javascript" src="niceforms.js" />
  </head>
  <body>
    <h1>Guess a number...</h1>
    <f:view>
	  <h:form styleClass="niceform">
	    
	    <div>
	    <h:messages globalOnly="true"/>
	    <h:outputText value="Higher!" 
	           rendered="#{numberGuess.randomNumber gt numberGuess.currentGuess}"/>
	    <h:outputText value="Lower!" 
	           rendered="#{numberGuess.randomNumber lt numberGuess.currentGuess}"/>
		</div>
		
		<div>
        I'm thinking of a number between 
        <h:outputText value="#{numberGuess.smallest}"/> and 
        <h:outputText value="#{numberGuess.biggest}"/>. You have 
        <h:outputText value="#{numberGuess.remainingGuesses}"/> guesses.
        </div>
        
        <div>
        Your guess: 
        <h:inputText value="#{numberGuess.currentGuess}" id="inputGuess" 
                     required="true" size="3" 
                     rendered="#{(numberGuess.biggest-numberGuess.smallest) gt 20}">
          <f:validateLongRange maximum="#{numberGuess.biggest}" 
                               minimum="#{numberGuess.smallest}"/>
        </h:inputText>
        <h:selectOneMenu value="#{numberGuess.currentGuess}" 
                         id="selectGuessMenu" required="true"
                         rendered="#{(numberGuess.biggest-numberGuess.smallest) le 20 and 
                                     (numberGuess.biggest-numberGuess.smallest) gt 4}">
          <s:selectItems value="#{numberGuess.possibilities}" var="i" label="#{i}"/>
        </h:selectOneMenu>
        <h:selectOneRadio value="#{numberGuess.currentGuess}" id="selectGuessRadio" 
                          required="true"
                          rendered="#{(numberGuess.biggest-numberGuess.smallest) le 4}">
          <s:selectItems value="#{numberGuess.possibilities}" var="i" label="#{i}"/>
        </h:selectOneRadio>
		<h:commandButton value="Guess" action="guess"/>
        <s:button value="Cheat" view="/confirm.jspx"/>
        <s:button value="Give up" action="giveup"/>
		</div>
		
		<div>
        <h:message for="inputGuess" style="color: red"/>
        </div>
        
	  </h:form>
    </f:view>
  </body>
  </html>
</jsp:root>]]></programlisting>
            </example>

            <para> Notice how the command button names the <literal>guess</literal> transition instead of calling an
                action directly. </para>

            <para> The <literal>win.jspx</literal> page is predictable: </para>

            <example><title/>
                <programlisting><![CDATA[<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" 
          xmlns:h="http://java.sun.com/jsf/html"
          xmlns:f="http://java.sun.com/jsf/core"
          xmlns="http://www.w3.org/1999/xhtml"
          version="2.0">
  <jsp:output doctype-root-element="html"
              doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
              doctype-system="http://www.w3c.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
  <jsp:directive.page contentType="text/html"/>
  <html>
  <head>
    <title>You won!</title>
    <link href="niceforms.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <h1>You won!</h1>
    <f:view>
      Yes, the answer was <h:outputText value="#{numberGuess.currentGuess}" />.
      It took you <h:outputText value="#{numberGuess.guessCount}" /> guesses.
      <h:outputText value="But you cheated, so it doesn't count!" 
                    rendered="#{numberGuess.cheat}"/>
      Would you like to <a href="numberGuess.seam">play again</a>?
    </f:view>
  </body>
  </html>
</jsp:root>
]]></programlisting>
            </example>

            <para> As is <literal>lose.jspx</literal> (which I can't be bothered copy/pasting). Finally, the JavaBean
                Seam component: </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="numberguess-create" coords="13"/>
                    </areaspec>
                    <programlisting><![CDATA[@Name("numberGuess")
@Scope(ScopeType.CONVERSATION)
public class NumberGuess implements Serializable {
   
   private int randomNumber;
   private Integer currentGuess;
   private int biggest;
   private int smallest;
   private int guessCount;
   private int maxGuesses;
   private boolean cheated;
   
   @Create
   public void begin()
   {
      randomNumber = new Random().nextInt(100);
      guessCount = 0;
      biggest = 100;
      smallest = 1;
   }
   
   public void setCurrentGuess(Integer guess)
   {
      this.currentGuess = guess;
   }
   
   public Integer getCurrentGuess()
   {
      return currentGuess;
   }
   
   public void guess()
   {
      if (currentGuess>randomNumber)
      {
         biggest = currentGuess - 1;
      }
      if (currentGuess<randomNumber)
      {
         smallest = currentGuess + 1;
      }
      guessCount ++;
   }
   
   public boolean isCorrectGuess()
   {
      return currentGuess==randomNumber;
   }
   
   public int getBiggest()
   {
      return biggest;
   }
   
   public int getSmallest()
   {
      return smallest;
   }
   
   public int getGuessCount()
   {
      return guessCount;
   }
   
   public boolean isLastGuess()
   {
      return guessCount==maxGuesses;
   }

   public int getRemainingGuesses() {
      return maxGuesses-guessCount;
   }

   public void setMaxGuesses(int maxGuesses) {
      this.maxGuesses = maxGuesses;
   }

   public int getMaxGuesses() {
      return maxGuesses;
   }

   public int getRandomNumber() {
      return randomNumber;
   }

   public void cheated()
   {
      cheated = true;
   }
   
   public boolean isCheat() {
      return cheated;
   }
   
   public List<Integer> getPossibilities()
   {
      List<Integer> result = new ArrayList<Integer>();
      for(int i=smallest; i<=biggest; i++) result.add(i);
      return result;
   }
   
}
]]></programlisting>
                    <calloutlist>
                        <callout arearefs="numberguess-create">
                            <para> The first time a JSP page asks for a <literal>numberGuess</literal> component, Seam
                                will create a new one for it, and the <literal>@Create</literal> method will be invoked,
                                allowing the component to initialize itself. </para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

         
            <para>The <literal>pages.xml</literal> file starts a Seam
                <emphasis>conversation</emphasis> (much more about that later), and specifies the
                pageflow definition to use for the conversation's page flow. 
            </para>

            
            <example><title/>
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<pages xmlns="http://jboss.com/products/seam/pages"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://jboss.com/products/seam/pages http://jboss.com/products/seam/pages-2.1.xsd">

  <page view-id="/numberGuess.jspx">
    <begin-conversation join="true" pageflow="numberGuess"/>
  </page>

  <page view-id="/confirm.jspx">
    <begin-conversation nested="true" pageflow="cheat"/>
  </page>

</pages>      
]]></programlisting>                  
            </example>
            
               <para> As you can see, this Seam component is pure business logic! It doesn't need to know anything at all
                about the user interaction flow. This makes the component potentially more reuseable. </para>
            
        </section>

        <section>
            <title>How it works</title>
            <para>TODO</para>
        </section>

    </section>

    <section id="booking">
        <title>A complete Seam application: the Hotel Booking example</title>

        <section>
            <title>Introduction</title>

            <para> The booking application is a complete hotel room reservation system incorporating the following
                features: </para>

            <itemizedlist>
                <listitem>
                    <para>User registration</para>
                </listitem>
                <listitem>
                    <para>Login</para>
                </listitem>
                <listitem>
                    <para>Logout</para>
                </listitem>
                <listitem>
                    <para>Set password</para>
                </listitem>
                <listitem>
                    <para>Hotel search</para>
                </listitem>
                <listitem>
                    <para>Hotel selection</para>
                </listitem>
                <listitem>
                    <para>Room reservation</para>
                </listitem>
                <listitem>
                    <para>Reservation confirmation</para>
                </listitem>
                <listitem>
                    <para>Existing reservation list</para>
                </listitem>
            </itemizedlist>

      <screenshot>
        <screeninfo>Booking example</screeninfo>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/booking.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/booking.png" align="center"/>
          </imageobject>
        </mediaobject>
      </screenshot>

            <para> The booking application uses JSF, EJB 3.0 and Seam, together with Facelets for the view. There is
                also a port of this application to JSF, Facelets, Seam, JavaBeans and Hibernate3. </para>

            <para> One of the things you'll notice if you play with this application for long enough is that it is
                extremely <emphasis>robust</emphasis>. You can play with back buttons and browser refresh and opening
                multiple windows and entering nonsensical data as much as you like and you will find it very difficult
                to make the application crash. You might think that we spent weeks testing and fixing bugs to achive
                this. Actually, this is not the case. Seam was designed to make it very straightforward to build robust
                web applications and a lot of robustness that you are probably used to having to code yourself comes
                naturally and automatically with Seam. </para>
            <para> As you browse the sourcecode of the example application, and learn how the application works, observe
                how the declarative state management and integrated validation has been used to achieve this robustness. </para>

        </section>
 
        <section>
            <title>Overview of the booking example</title>

            <para> The project structure is identical to the previous one, to install and deploy this application,
                please refer to <xref linkend="try-examples"/>. Once you've successfully started the application, you
                can access it by pointing your browser to <ulink url="http://localhost:8080/seam-booking/">
                    <literal>http://localhost:8080/seam-booking/</literal>
                </ulink>
            </para>

            <para> Just nine classes (plus six session beans local interfaces) where used to implement this application.
                Six session bean action listeners contain all the business logic for the listed features. </para>

            <itemizedlist>
                <listitem>
                    <para><literal>BookingListAction</literal> retrieves existing bookings for the currently logged in user. </para>
                </listitem>
                <listitem>
                    <para><literal>ChangePasswordAction</literal> updates the password of the currently logged in user.</para>
                </listitem>
                <listitem>
                    <para><literal>HotelBookingAction</literal> implements the core functionality of the application: hotel
                    room searching, selection, booking and booking confirmation. This functionality is implemented as a
                        <emphasis>conversation</emphasis>, so this is the most interesting class in the application. </para></listitem>
                <listitem>
                    <para><literal>RegisterAction</literal> registers a new system user.</para>
                </listitem>
            </itemizedlist>

            <para> Three entity beans implement the application's persistent domain model. </para>

            <itemizedlist>
                <listitem>
                    <para><literal>Hotel</literal> is an entity bean that represent a hotel </para></listitem>
                <listitem>
                    <para><literal>Booking</literal> is an entity bean that represents an existing booking </para></listitem>
                <listitem>
                    <para><literal>User</literal> is an entity bean to represents a user who can make hotel bookings</para>
                </listitem>
            </itemizedlist>

        </section>

        <section>
            <title>Understanding Seam conversations</title>
            <para> We encourage you browse the sourcecode at your pleasure. In this tutorial we'll concentrate upon one
                particular piece of functionality: hotel search, selection, booking and confirmation. From the point of
                view of the user, everything from selecting a hotel to confirming a booking is one continuous unit of
                work, a <emphasis>conversation</emphasis>. Searching, however, is <emphasis>not</emphasis> part of the
                conversation. The user can select multiple hotels from the same search results page, in different
                browser tabs. </para>
            <para> Most web application architectures have no first class construct to represent a conversation. This
                causes enormous problems managing state associated with the conversation. Usually, Java web applications
                use a combination of two techniques: first, some state is thrown into the
                <literal>HttpSession</literal>; second, persistable state is flushed to the database after every
                request, and reconstructed from the database at the beginning of each new request. </para>
            <para> Since the database is the least scalable tier, this often results in an utterly unacceptable lack of
                scalability. Added latency is also a problem, due to the extra traffic to and from the database on every
                request. To reduce this redundant traffic, Java applications often introduce a data (second-level) cache
                that keeps commonly accessed data between requests. This cache is necessarily inefficient, because
                invalidation is based upon an LRU policy instead of being based upon when the user has finished working
                with the data. Furthermore, because the cache is shared between many concurrent transactions, we've
                introduced a whole raft of problem's associated with keeping the cached state consistent with the
                database. </para>
            <para> Now consider the state held in the <literal>HttpSession</literal>. By very careful programming, we
                might be able to control the size of the session data. This is a lot more difficult than it sounds,
                since web browsers permit ad hoc non-linear navigation. But suppose we suddenly discover a system
                requirement that says that a user is allowed to have <emphasis>mutiple concurrent
                conversations</emphasis>, halfway through the development of the system (this has happened to me).
                Developing mechanisms to isolate session state associated with different concurrent conversations, and
                incorporating failsafes to ensure that conversation state is destroyed when the user aborts one of the
                conversations by closing a browser window or tab is not for the faint hearted (I've implemented this
                stuff twice so far, once for a client application, once for Seam, but I'm famously psychotic). </para>
            <para> Now there is a better way. </para>
            <para> Seam introduces the <emphasis>conversation context</emphasis> as a first class construct. You can
                safely keep conversational state in this context, and be assured that it will have a well-defined
                lifecycle. Even better, you won't need to be continually pushing data back and forth between the
                application server and the database, since the conversation context is a natural cache of data that the
                user is currently working with. </para>
            <para> Usually, the components we keep in the conversation context are stateful session beans. (We can also
                keep entity beans and JavaBeans in the conversation context.) There is an ancient canard in the Java
                community that stateful session beans are a scalability killer. This may have been true in 1998 when
                WebFoobar 1.0 was released. It is no longer true today. Application servers like JBoss AS have extremely
                sophisticated mechanisms for stateful session bean state replication. (For example, the JBoss EJB3
                container performs fine-grained replication, replicating only those bean attribute values which actually
                changed.) Note that all the traditional technical arguments for why stateful beans are inefficient apply
                equally to the <literal>HttpSession</literal>, so the practice of shifting state from business tier
                stateful session bean components to the web session to try and improve performance is unbelievably
                misguided. It is certainly possible to write unscalable applications using stateful session beans, by
                using stateful beans incorrectly, or by using them for the wrong thing. But that doesn't mean you should
                    <emphasis>never</emphasis> use them. Anyway, Seam guides you toward a safe usage model. Welcome to
                2005. </para>
            <para> OK, I'll stop ranting now, and get back to the tutorial. </para>

            <para> The booking example application shows how stateful components with different scopes can collaborate
                together to achieve complex behaviors. The main page of the booking application allows the user to
                search for hotels. The search results are kept in the Seam session scope. When the user navigates to one
                of these hotels, a conversation begins, and a conversation scoped component calls back to the session
                scoped component to retrieve the selected hotel. </para>

            <para> The booking example also demonstrates the use of RichFaces Ajax to implement rich client behavior without
                the use of handwritten JavaScript. </para>

            <para> The search functionality is implemented using a session-scope stateful session bean, similar to the
                one we saw in the message list example above. </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="booking-stateful-annotation" coords="1"/>
                        <area id="booking-restrict-annotation" coords="4"/>
                        <area id="booking-datamodel-annotation" coords="15"/>
                        <area id="booking-destroy-annotation" coords="70"/>
                    </areaspec>
                    <programlisting><![CDATA[@Stateful
@Name("hotelSearch")
@Scope(ScopeType.SESSION)
@Restrict("#{identity.loggedIn}")
public class HotelSearchingAction implements HotelSearching
{
   
   @PersistenceContext
   private EntityManager em;
   
   private String searchString;
   private int pageSize = 10;
   private int page;
   
   @DataModel
   private List<Hotel> hotels;
   
   public void find()
   {
      page = 0;
      queryHotels();
   }
   public void nextPage()
   {
      page++;
      queryHotels();
   }
      
   private void queryHotels()
   {
      hotels = 
          em.createQuery("select h from Hotel h where lower(h.name) like #{pattern} " + 
                         "or lower(h.city) like #{pattern} " + 
                         "or lower(h.zip) like #{pattern} " +
                         "or lower(h.address) like #{pattern}")
            .setMaxResults(pageSize)
            .setFirstResult( page * pageSize )
            .getResultList();
   }
   
   public boolean isNextPageAvailable()
   {
      return hotels!=null && hotels.size()==pageSize;
   }
   
   public int getPageSize() {
      return pageSize;
   }
   
   public void setPageSize(int pageSize) {
      this.pageSize = pageSize;
   }
   
   @Factory(value="pattern", scope=ScopeType.EVENT)
   public String getSearchPattern()
   {
      return searchString==null ? 
            "%" : '%' + searchString.toLowerCase().replace('*', '%') + '%';
   }
   
   public String getSearchString()
   {
      return searchString;
   }
   
   public void setSearchString(String searchString)
   {
      this.searchString = searchString;
   }
   
   @Remove
   public void destroy() {}
}]]></programlisting>
                    <calloutlist>
                        <callout arearefs="booking-stateful-annotation">
                            <para> The EJB standard <literal>@Stateful</literal> annotation identifies this class as a
                                stateful session bean. Stateful session beans are scoped to the conversation context by
                                default. </para>
                        </callout>
                        <callout arearefs="booking-restrict-annotation">
                            <para> The <literal>@Restrict</literal> annotation applies a security restriction to the
                                component. It restricts access to the component allowing only logged-in users. The
                                security chapter explains more about security in Seam. </para>
                        </callout>
                        <callout arearefs="booking-datamodel-annotation">
                            <para> The <link linkend="datamodel-annotation">
                                    <literal>@DataModel</literal>
                                </link> annotation exposes a <literal>List</literal> as a JSF
                                <literal>ListDataModel</literal>. This makes it easy to implement clickable lists for
                                search screens. In this case, the list of hotels is exposed to the page as a
                                    <literal>ListDataModel</literal> in the conversation variable named
                                <literal>hotels</literal>. </para>
                        </callout>
                        <callout arearefs="booking-destroy-annotation">
                            <para> The EJB standard <literal>@Remove</literal> annotation specifies that a stateful
                                session bean should be removed and its state destroyed after invocation of the annotated
                                method. In Seam, all stateful session beans must define a method with no parameters marked
                                    <literal>@Remove</literal>. This method will be
                                called when Seam destroys the session context.</para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

            <para> The main page of the application is a Facelets page. Let's look at the fragment which relates to
                searching for hotels: </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="booking-support-element" coords="14"/>
                        <area id="booking-status-element" coords="20"/>
                        <area id="booking-outputpanel-element" coords="37"/>
                        <area id="booking-link-element" coords="61"/>
                    </areaspec>
                    <programlisting><![CDATA[<div class="section">
  
    <span class="errors">
       <h:messages globalOnly="true"/>
    </span>
    
    <h1>Search Hotels</h1>

	<h:form id="searchCriteria">
	<fieldset> 
	   <h:inputText id="searchString" value="#{hotelSearch.searchString}" 
                    style="width: 165px;">
         <a:support event="onkeyup" actionListener="#{hotelSearch.find}" 
                    reRender="searchResults" />
       </h:inputText>
       &#160;
	   <a:commandButton id="findHotels" value="Find Hotels" action="#{hotelSearch.find}" 
                        reRender="searchResults"/>
       &#160;
       <a:status>
          <f:facet name="start">
             <h:graphicImage value="/img/spinner.gif"/>
          </f:facet>
       </a:status>
	   <br/>
       <h:outputLabel for="pageSize">Maximum results:</h:outputLabel>&#160;
       <h:selectOneMenu value="#{hotelSearch.pageSize}" id="pageSize">
          <f:selectItem itemLabel="5" itemValue="5"/>
          <f:selectItem itemLabel="10" itemValue="10"/>
          <f:selectItem itemLabel="20" itemValue="20"/>
       </h:selectOneMenu>
    </fieldset>
    </h:form>
    
</div>

<a:outputPanel id="searchResults">
  <div class="section">
    <h:outputText value="No Hotels Found"
                  rendered="#{hotels != null and hotels.rowCount==0}"/>
    <h:dataTable id="hotels" value="#{hotels}" var="hot" 
                 rendered="#{hotels.rowCount>0}">
        <h:column>
            <f:facet name="header">Name</f:facet>
            #{hot.name}
        </h:column>
        <h:column>
            <f:facet name="header">Address</f:facet>
            #{hot.address}
        </h:column>
        <h:column>
            <f:facet name="header">City, State</f:facet>
            #{hot.city}, #{hot.state}, #{hot.country}
        </h:column> 
        <h:column>
            <f:facet name="header">Zip</f:facet>
            #{hot.zip}
        </h:column>
        <h:column>
            <f:facet name="header">Action</f:facet>
            <s:link id="viewHotel" value="View Hotel" 
                    action="#{hotelBooking.selectHotel(hot)}"/>
        </h:column>
    </h:dataTable>
    <s:link value="More results" action="#{hotelSearch.nextPage}" 
            rendered="#{hotelSearch.nextPageAvailable}"/>
  </div>
</a:outputPanel>    ]]></programlisting>
                    <calloutlist>
                        <callout arearefs="booking-support-element">
                            <para> The RichFaces Ajax <literal>&lt;a:support&gt;</literal> tag allows a JSF action
                                event listener to be called by asynchronous <literal>XMLHttpRequest</literal> when a
                                JavaScript event like <literal>onkeyup</literal> occurs. Even better, the
                                    <literal>reRender</literal> attribute lets us render a fragment of the JSF page and
                                perform a partial page update when the asynchronous response is received. </para>
                        </callout>
                        <callout arearefs="booking-status-element">
                            <para> The RichFaces Ajax <literal>&lt;a:status&gt;</literal> tag lets us display a cheesy
                                annimated image while we wait for asynchronous requests to return. </para>
                        </callout>
                        <callout arearefs="booking-outputpanel-element">
                            <para> The RichFaces Ajax <literal>&lt;a:outputPanel&gt;</literal> tag defines a region of
                                the page which can be re-rendered by an asynchronous request. </para>
                        </callout>
                        <callout arearefs="booking-link-element">
                            <para> The Seam <literal>&lt;s:link&gt;</literal> tag lets us attach a JSF action
                                listener to an ordinary (non-JavaScript) HTML link. The advantage of this over the
                                standard JSF <literal>&lt;h:commandLink&gt;</literal> is that it preserves the
                                operation of "open in new window" and "open in new tab". Also notice that we use a
                                method binding with a parameter: <literal>#{hotelBooking.selectHotel(hot)}</literal>.
                                This is not possible in the standard Unified EL, but Seam provides an extension to the
                                EL that lets you use parameters on any method binding expression. </para>
                            <para> If you're wondering how navigation occurs,
                                you can find all the rules in <literal>WEB-INF/pages.xml</literal>;
                                this is discussed in <xref linkend="events.pageaction.navigation"/>. </para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

            <para> This page displays the search results dynamically as we type, and lets us choose a hotel and pass it
                to the <literal>selectHotel()</literal> method of the <literal>HotelBookingAction</literal>, which is
                where the <emphasis>really</emphasis> interesting stuff is going to happen. </para>


            <para> Now let's see how the booking example application uses a conversation-scoped stateful session bean to
                achieve a natural cache of persistent data related to the conversation. The following code example is
                pretty long. But if you think of it as a list of scripted actions that implement the various steps of
                the conversation, it's understandable. Read the class from top to bottom, as if it were a story. </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="booking-extendedpersistencecontext-annotation" coords="7"/>
                        <area id="booking-out-annotation" coords="17"/>
                        <area id="booking-begin-annotation" coords="31"/>
                        <area id="booking-end-annotation" coords="72"/>
                        <area id="booking-dest-annotation" coords="85"/>
                    </areaspec>
                    <programlisting><![CDATA[@Stateful
@Name("hotelBooking")
@Restrict("#{identity.loggedIn}")
public class HotelBookingAction implements HotelBooking
{
   
   @PersistenceContext(type=EXTENDED)
   private EntityManager em;
   
   @In 
   private User user;
   
   @In(required=false) @Out
   private Hotel hotel;
   
   @In(required=false) 
   @Out(required=false)
   private Booking booking;
     
   @In
   private FacesMessages facesMessages;
      
   @In
   private Events events;
   
   @Logger 
   private Log log;
   
   private boolean bookingValid;
   
   @Begin
   public void selectHotel(Hotel selectedHotel)
   {
      hotel = em.merge(selectedHotel);
   }
   
   public void bookHotel()
   {      
      booking = new Booking(hotel, user);
      Calendar calendar = Calendar.getInstance();
      booking.setCheckinDate( calendar.getTime() );
      calendar.add(Calendar.DAY_OF_MONTH, 1);
      booking.setCheckoutDate( calendar.getTime() );
   }
   
   public void setBookingDetails()
   {
      Calendar calendar = Calendar.getInstance();
      calendar.add(Calendar.DAY_OF_MONTH, -1);
      if ( booking.getCheckinDate().before( calendar.getTime() ) )
      {
         facesMessages.addToControl("checkinDate", "Check in date must be a future date");
         bookingValid=false;
      }
      else if ( !booking.getCheckinDate().before( booking.getCheckoutDate() ) )
      {
         facesMessages.addToControl("checkoutDate", 
                                    "Check out date must be later than check in date");
         bookingValid=false;
      }
      else
      {
         bookingValid=true;
      }
   }
   
   public boolean isBookingValid()
   {
      return bookingValid;
   }
   
   @End
   public void confirm()
   {
      em.persist(booking);
      facesMessages.add("Thank you, #{user.name}, your confimation number " + 
                        " for #{hotel.name} is #{booking.id}");
      log.info("New booking: #{booking.id} for #{user.username}");
      events.raiseTransactionSuccessEvent("bookingConfirmed");
   }
   
   @End
   public void cancel() {}
   
   @Remove
   public void destroy() {}
]]></programlisting>
                    <calloutlist>
                        <callout arearefs="booking-extendedpersistencecontext-annotation">
                            <para> This bean uses an EJB3 <emphasis>extended persistence context</emphasis>, so that any
                                entity instances remain managed for the whole lifecycle of the stateful session bean.
                            </para>
                        </callout>
                        <callout arearefs="booking-out-annotation">
                            <para> The <link linkend="out-annotation">
                                    <literal>@Out</literal>
                                </link> annotation declares that an attribute value is <emphasis>outjected</emphasis> to
                                a context variable after method invocations. In this case, the context variable named
                                    <literal>hotel</literal> will be set to the value of the <literal>hotel</literal>
                                instance variable after every action listener invocation completes. </para>
                        </callout>
                        <callout arearefs="booking-begin-annotation">
                            <para> The <link linkend="begin-annotation">
                                    <literal>@Begin</literal>
                                </link> annotation specifies that the annotated method begins a <emphasis>long-running
                                    conversation</emphasis>, so the current conversation context will not be destroyed
                                at the end of the request. Instead, it will be reassociated with every request from the
                                current window, and destroyed either by timeout due to conversation inactivity or
                                invocation of a matching <literal>@End</literal> method. </para>
                        </callout>
                        <callout arearefs="booking-end-annotation">
                            <para> The <link linkend="end-annotation">
                                    <literal>@End</literal>
                                </link> annotation specifies that the annotated method ends the current long-running
                                conversation, so the current conversation context will be destroyed at the end of the
                                request. </para>
                        </callout>
                        <callout arearefs="booking-dest-annotation">
                            <para> This EJB remove method will be called when Seam destroys the conversation context.
                                Don't forget to define this method! </para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

            <para>
                <literal>HotelBookingAction</literal> contains all the action listener methods that implement selection,
                booking and booking confirmation, and holds state related to this work in its instance variables. We
                think you'll agree that this code is much cleaner and simpler than getting and setting
                    <literal>HttpSession</literal> attributes. </para>

            <para> Even better, a user can have multiple isolated conversations per login session. Try it! Log in, run a
                search, and navigate to different hotel pages in multiple browser tabs. You'll be able to work on
                creating two different hotel reservations at the same time. If you leave any one conversation inactive
                for long enough, Seam will eventually time out that conversation and destroy its state. If, after ending
                a conversation, you backbutton to a page of that conversation and try to perform an action, Seam will
                detect that the conversation was already ended, and redirect you to the search page. </para>

        </section>

        <section>
            <title>The Seam UI control library</title>
            <para> If you check inside the WAR file for the booking application, you'll find
                <literal>seam-ui.jar</literal> in the <literal>WEB-INF/lib</literal> directory. This package contains a
                number of JSF custom controls that integrate with Seam. The booking application uses the
                    <literal>&lt;s:link&gt;</literal> control for navigation from the search screen to the hotel
                page: </para>

            <programlisting><![CDATA[<s:link value="View Hotel" action="#{hotelBooking.selectHotel(hot)}"/>]]></programlisting>

            <para> The use of <literal>&lt;s:link&gt;</literal> here allows us to attach an action listener to a
                HTML link without breaking the browser's "open in new window" feature. The standard JSF
                    <literal>&lt;h:commandLink&gt;</literal> does not work with "open in new window". We'll see
                later that <literal>&lt;s:link&gt;</literal> also offers a number of other useful features,
                including conversation propagation rules. </para>

            <para> The booking application uses some other Seam and RichFaces Ajax controls, especially on the
                    <literal>/book.xhtml</literal> page. We won't get into the details of those controls here, but if
                you want to understand this code, please refer to the chapter covering Seam's functionality for JSF form
                validation. </para>
        </section>

        <section>
            <title>The Seam Debug Page</title>

            <para> The WAR also includes <literal>seam-debug.jar</literal>.  The Seam debug page will be availabled 
                if this jar is deployed in
                    <literal>WEB-INF/lib</literal>, along with the Facelets, and if you set the debug property
                of the <literal>init</literal> component:</para>
            
            <programlisting><![CDATA[<core:init jndi-pattern="@jndiPattern@" debug="true"/>]]></programlisting>                            

            <para>  This page lets you browse and inspect the Seam components
                in any of the Seam contexts associated with your current login session. Just point your browser at
                    <ulink url="http://localhost:8080/seam-booking/debug.seam">
                    <literal>http://localhost:8080/seam-booking/debug.seam</literal>
                </ulink>. </para>

            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="/images/debug.png" align="center"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="/images/debug.png" align="center"/>
                </imageobject>
            </mediaobject>

        </section>

    </section>

    <section id="dvdstore">
        <title>A complete application featuring Seam and jBPM: the DVD Store example</title>

        <para> The DVD Store demo application shows the practical usage of jBPM for both task management and pageflow. </para>

        <para> The user screens take advantage of a jPDL pageflow to implement searching and shopping cart
            functionality. </para>

        <screenshot>
        <screeninfo>DVD Store example</screeninfo>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/dvdsearch.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/dvdsearch.png" align="center"/>
          </imageobject>
        </mediaobject>
      </screenshot>

        <para> The administration screens take use jBPM to manage the approval and shipping cycle for orders. The
            business process may even be changed dynamically, by selecting a different process definition! </para>

        <screenshot>
        <screeninfo>DVD Store example</screeninfo>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/dvdtasks.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/dvdtasks.png" align="center"/>
          </imageobject>
        </mediaobject>
      </screenshot>

        <para>TODO</para>
        <para>Look in the <literal>dvdstore</literal> directory.</para>
    </section>

    <section id="hibernate">
        <title>An example of Seam with Hibernate: the Hibernate Booking example</title>

        <para> The Hibernate Booking demo is a straight port of the Booking demo to an alternative architecture that
            uses Hibernate for persistence and JavaBeans instead of session beans. </para>

        <para>TODO</para>
        <para>Look in the <literal>hibernate</literal> directory.</para>
    </section>

    <section id="blog">
        <title>A RESTful Seam application: the Blog example</title>

        <para> Seam makes it very easy to implement applications which keep state on the server-side. However,
            server-side state is not always appropriate, especially in for functionality that serves up
                <emphasis>content</emphasis>. For this kind of problem we often need to let the user bookmark pages and
            have a relatively stateless server, so that any page can be accessed at any time, via the bookmark. The Blog
            example shows how to a implement RESTful application using Seam. Every page of the application can be
            bookmarked, including the search results page. </para>

        <screenshot>
        <screeninfo>Blog example</screeninfo>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/blog.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/blog.png" align="center"/>
          </imageobject>
        </mediaobject>
      </screenshot>

        <para> The Blog example demonstrates the use of "pull"-style MVC, where instead of using action listener methods
            to retrieve data and prepare the data for the view, the view pulls data from components as it is being
            rendered. </para>

        <section>
            <title>Using "pull"-style MVC</title>

            <para> This snippet from the <literal>index.xhtml</literal> facelets page displays a list of recent blog
                entries: </para>

            <example><title/>
                <programlisting><![CDATA[<h:dataTable value="#{blog.recentBlogEntries}" var="blogEntry" rows="3">
   <h:column>
      <div class="blogEntry">
         <h3>#{blogEntry.title}</h3>
         <div>
            <h:outputText escape="false" 
                  value="#{blogEntry.excerpt==null ? blogEntry.body : blogEntry.excerpt}"/>
         </div>
         <p>
            <h:outputLink value="entry.seam" rendered="#{blogEntry.excerpt!=null}">
               <f:param name="blogEntryId" value="#{blogEntry.id}"/>
               Read more...
            </h:outputLink>
         </p>
         <p>
            [Posted on 
            <h:outputText value="#{blogEntry.date}">
               <f:convertDateTime timeZone="#{blog.timeZone}" 
                                  locale="#{blog.locale}" type="both"/>
            </h:outputText>]
            &#160;
            <h:outputLink value="entry.seam">[Link]
               <f:param name="blogEntryId" value="#{blogEntry.id}"/>
            </h:outputLink>
         </p>
      </div>
   </h:column>
</h:dataTable>]]></programlisting>
            </example>

            <para> If we navigate to this page from a bookmark, how does the data used by the
                    <literal>&lt;h:dataTable&gt;</literal> actually get initialized? Well, what happens is that
                the <literal>Blog</literal> is retrieved lazily—"pulled"—when needed, by a Seam
                component named <literal>blog</literal>. This is the opposite flow of control to what is usual in
                traditional web action-based frameworks like Struts. </para>

            <example><title/>
                <programlistingco>
                    <areaspec>
                        <area id="blog-seampc" coords="7"/>
                        <area id="blog-unwrap" coords="9"/>
                    </areaspec>
                    <programlisting><![CDATA[@Name("blog")
@Scope(ScopeType.STATELESS)
@AutoCreate
public class BlogService 
{
   
   @In EntityManager entityManager;
  
   @Unwrap
   public Blog getBlog()
   {
      return (Blog) entityManager.createQuery("select distinct b from Blog b left join fetch b.blogEntries")
            .setHint("org.hibernate.cacheable", true)
            .getSingleResult();
   }

}]]></programlisting>
                    <calloutlist>
                        <callout arearefs="blog-seampc">
                            <para> This component uses a <emphasis>seam-managed persistence context</emphasis>. Unlike
                                the other examples we've seen, this persistence context is managed by Seam, instead of
                                by the EJB3 container. The persistence context spans the entire web request, allowing us
                                to avoid any exceptions that occur when accessing unfetched associations in the view.
                            </para>
                        </callout>
                        <callout arearefs="blog-unwrap">
                            <para> The <literal>@Unwrap</literal> annotation tells Seam to provide the return value of
                                the method—the <literal>Blog</literal>—instead of the actual
                                    <literal>BlogService</literal> component to clients. This is the Seam
                                    <emphasis>manager component pattern</emphasis>. </para>
                        </callout>
                    </calloutlist>
                </programlistingco>
            </example>

            <para> This is good so far, but what about bookmarking the result of form submissions, such as a search
                results page? </para>

        </section>

        <section>
            <title>Bookmarkable search results page</title>

            <para> The blog example has a tiny form in the top right of each page that allows the user to search for
                blog entries. This is defined in a file, <literal>menu.xhtml</literal>, included by the facelets
                template, <literal>template.xhtml</literal>: </para>

            <example><title/>
                <programlisting><![CDATA[<div id="search">
   <h:form>
      <h:inputText value="#{searchAction.searchPattern}"/>
      <h:commandButton value="Search" action="/search.xhtml"/>
   </h:form>
</div>]]></programlisting>
            </example>

            <para> To implement a bookmarkable search results page, we need to perform a browser redirect after
                processing the search form submission. Because we used the JSF view id as the action outcome, Seam
                automatically redirects to the view id when the form is submitted. Alternatively, we could have defined
                a navigation rule like this: </para>

	<example><title/>
		<programlisting><![CDATA[<navigation-rule>
   <navigation-case>
      <from-outcome>searchResults</from-outcome>
      <to-view-id>/search.xhtml</to-view-id>
      <redirect/>
   </navigation-case>
</navigation-rule>]]></programlisting>
</example>

            <para> Then the form would have looked like this: </para>

	    <example><title/>
		    <programlisting><![CDATA[<div id="search">
   <h:form>
      <h:inputText value="#{searchAction.searchPattern}"/>
      <h:commandButton value="Search" action="searchResults"/>
   </h:form>
</div>]]></programlisting>
            </example>

            <para> But when we redirect, we need to include the values submitted with the form as request parameters, to
                get a bookmarkable URL like
                <literal>http://localhost:8080/seam-blog/search.seam?searchPattern=seam</literal>. JSF does not provide
                an easy way to do this, but Seam does. We use a Seam <emphasis>page parameter</emphasis>, defined in
                    <literal>WEB-INF/pages.xml</literal>: </para>

	    <example><title/>
		    <programlisting><![CDATA[<pages>
   <page view-id="/search.xhtml">
      <param name="searchPattern" value="#{searchService.searchPattern}"/>
   </page>
   ...
</pages>]]></programlisting>
            </example>

            <para> This tells Seam to include the value of <literal>#{searchService.searchPattern}</literal> as a
                request parameter named <literal>searchPattern</literal> when redirecting to the page, and then re-apply
                the value of that parameter to the model before rendering the page. </para>

            <para> The redirect takes us to the <literal>search.xhtml</literal> page: </para>

	    <example><title/>
		    <programlisting><![CDATA[<h:dataTable value="#{searchResults}" var="blogEntry">
   <h:column>
      <div>
         <h:outputLink value="entry.seam">
            <f:param name="blogEntryId" value="#{blogEntry.id}"/>
            #{blogEntry.title}
         </h:outputLink>
         posted on 
         <h:outputText value="#{blogEntry.date}">
            <f:convertDateTime timeZone="#{blog.timeZone}" locale="#{blog.locale}" type="both"/>
         </h:outputText>
      </div>
   </h:column>
</h:dataTable>]]></programlisting>
            </example>

            <para> Which again uses "pull"-style MVC to retrieve the actual search results: </para>

	    <example><title/>
		    <programlisting><![CDATA[@Name("searchService")
public class SearchService 
{
   
   @In
   private EntityManager entityManager;
   
   private String searchPattern;
   
   @Factory("searchResults")
   public List<BlogEntry> getSearchResults()
   {
      if (searchPattern==null)
      {
         return null;
      }
      else
      {
         return entityManager.createQuery("select be from BlogEntry be "" + 
                      "where lower(be.title) like :searchPattern " + 
                      "lower(be.body) like :searchPattern order by be.date desc")
               .setParameter( "searchPattern", getSqlSearchPattern() )
               .setMaxResults(100)
               .getResultList();
      }
   }

   private String getSqlSearchPattern()
   {
      return searchPattern==null ? "" :
             '%' + searchPattern.toLowerCase().replace('*', '%').replace('?', '_') + '%';
   }

   public String getSearchPattern()
   {
      return searchPattern;
   }

   public void setSearchPattern(String searchPattern)
   {
      this.searchPattern = searchPattern;
   }

}]]></programlisting>
            </example>

        </section>

        <section>
            <title>Using "push"-style MVC in a RESTful application</title>

            <para> Very occasionally, it makes more sense to use push-style MVC for processing RESTful pages, and so
                Seam provides the notion of a <emphasis>page action</emphasis>. The Blog example uses a page action for
                the blog entry page, <literal>entry.xhtml</literal>. Note that this is a little bit contrived, it would
                have been easier to use pull-style MVC here as well. </para>

            <para> The <literal>entryAction</literal> component works much like an action class in a traditional
                push-MVC action-oriented framework like Struts: </para>

	<example><title/>
		<programlisting><![CDATA[@Name("entryAction")
@Scope(STATELESS)
public class EntryAction
{
   @In(create=true) 
   private Blog blog;
   
   @Out
   private BlogEntry blogEntry;
   
   public void loadBlogEntry(String id) throws EntryNotFoundException
   {
      blogEntry = blog.getBlogEntry(id);
      if (blogEntry==null) throw new EntryNotFoundException(id);
   }
   
}]]></programlisting>
            </example>

            <para> Page actions are also declared in <literal>pages.xml</literal>: </para>

	    <example><title/>
		    <programlisting><![CDATA[<pages>
   ...

   <page view-id="/entry.xhtml" action="#{entryAction.loadBlogEntry(blogEntry.id)}">
      <param name="blogEntryId" value="#{blogEntry.id}"/>
   </page>

   <page view-id="/post.xhtml" action="#{loginAction.challenge}"/>

   <page view-id="*" action="#{blog.hitCount.hit}"/>

</pages>]]></programlisting>
            </example>

            <para> Notice that the example is using page actions for some other functionality—the login
                challenge, and the pageview counter. Also notice the use of a parameter in the page action method
                binding. This is not a standard feature of JSF EL, but Seam lets you use it, not just for page actions,
                but also in JSF method bindings. </para>

            <para> When the <literal>entry.xhtml</literal> page is requested, Seam first binds the page parameter
                    <literal>blogEntryId</literal> to the model, then runs the page action, which retrieves the needed
                data—the <literal>blogEntry</literal>—and places it in the Seam event context.
                Finally, the following is rendered: </para>

	<example><title/>
		<programlisting><![CDATA[<div class="blogEntry">
   <h3>#{blogEntry.title}</h3>
   <div>
      <h:outputText escape="false" value="#{blogEntry.body}"/>
   </div>
   <p>
      [Posted on&#160;
      <h:outputText value="#{blogEntry.date}">
         <f:convertDateTime timezone="#{blog.timeZone}" 
                            locale="#{blog.locale}" type="both"/>
      </h:outputText>]
   </p>
</div>]]></programlisting>
            </example>

            <para> If the blog entry is not found in the database, the <literal>EntryNotFoundException</literal>
                exception is thrown. We want this exception to result in a 404 error, not a 505, so we annotate the
                exception class: </para>

	<example><title/>
		
                <programlisting><![CDATA[@ApplicationException(rollback=true)
@HttpError(errorCode=HttpServletResponse.SC_NOT_FOUND)
public class EntryNotFoundException extends Exception
{
   EntryNotFoundException(String id)
   {
      super("entry not found: " + id);
   }
}]]></programlisting>
            </example>

            <para> An alternative implementation of the example does not use the parameter in the method binding: </para>

	    <example><title/>
		    <programlisting><![CDATA[@Name("entryAction")
@Scope(STATELESS)
public class EntryAction
{
   @In(create=true) 
   private Blog blog;
   
   @In @Out
   private BlogEntry blogEntry;
   
   public void loadBlogEntry() throws EntryNotFoundException
   {
      blogEntry = blog.getBlogEntry( blogEntry.getId() );
      if (blogEntry==null) throw new EntryNotFoundException(id);
   }
   
}]]></programlisting>

                <programlisting><![CDATA[<pages>
   ...

   <page view-id="/entry.xhtml" action="#{entryAction.loadBlogEntry}">
      <param name="blogEntryId" value="#{blogEntry.id}"/>
   </page>
   
   ...
</pages>]]></programlisting></example>
            

            <para> It is a matter of taste which implementation you prefer. </para>

        </section>

    </section>

</chapter>
    <chapter id="gettingstarted">
    <title>Getting started with Seam, using seam-gen</title>

    <para>The Seam distribution includes a command line utility that makes it really easy to set up an Eclipse project,
        generate some simple Seam skeleton code, and reverse engineer an application from a preexisting database.</para>

    <para>This is the easy way to get your feet wet with Seam, and gives you some ammunition for next time you find
        yourself trapped in an elevator with one of those tedious Ruby guys ranting about how great and wonderful his
        new toy is for building totally trivial applications that put things in databases.</para>

    <para>In this release, seam-gen works best for people with JBoss AS. You can use the generated project with other
        J2EE or Java EE 5 application servers by making a few manual changes to the project configuration.</para>

    <para>You <emphasis>can</emphasis> use seam-gen without Eclipse, but in this tutorial, we want to show you how to
        use it in conjunction with Eclipse for debugging and integration testing. If you don't want to install Eclipse,
        you can still follow along with this tutorial—all steps can be performed from the command line.</para>

    <para>Seam-gen is basically just a big ugly Ant script wrapped around Hibernate Tools, together with some templates.
        That makes it easy to customize if you need to.</para>

    <section>
        <title>Before you start</title>

        <para>Make sure you have JDK 5 or JDK 6, JBoss AS 4.2 and Ant 1.6, along with recent versions of Eclipse, the
            JBoss IDE plugin for Eclipse and the TestNG plugin for Eclipse correctly installed before starting. Add your
            JBoss installation to the JBoss Server View in Eclipse. Start JBoss in debug mode. Finally, start a command
            prompt in the directory where you unzipped the Seam distribution.</para>

        <para>JBoss has sophisticated support for hot re-deployment of WARs and EARs. Unfortunately, due to bugs in the
            JVM, repeated redeployment of an EAR—which is common during development—eventually causes the JVM to run out
            of perm gen space. For this reason, we recommend running JBoss in a JVM with a large perm gen space at
            development time. If you're running JBoss from JBoss IDE, you can configure this in the server launch
            configuration, under "VM arguments". We suggest the following values:</para>

        <programlisting>-Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512</programlisting>

        <para>If you don't have so much memory available, the following is our minimum recommendation:</para>

        <programlisting>-Xms256m -Xmx512m -XX:PermSize=128m -XX:MaxPermSize=256</programlisting>

        <para>If you're running JBoss from the command line, you can configure the JVM options in
            <literal>bin/run.conf</literal>.</para>

        <para>If you don't want to bother with this stuff now, you don't have to—come back to it later, when you get
            your first <literal>OutOfMemoryException</literal>.</para>
    </section>

    <section>
        <title>Setting up a new Eclipse project</title>

        <para>The first thing we need to do is configure seam-gen for your environment: JBoss AS installation directory,
            Eclipse workspace, and database connection. It's easy, just type:</para>

        <programlisting>cd jboss-seam-2.0.x
seam setup</programlisting>

        <para>And you will be prompted for the needed information:</para>

        <programlisting>~/workspace/jboss-seam$ ./seam setup
Buildfile: build.xml

init:

setup:
     [echo] Welcome to seam-gen :-)
    [input] Enter your Java project workspace (the directory that contains your Seam projects) [C:/Projects] [C:/Projects]
/Users/pmuir/workspace
    [input] Enter your JBoss home directory [C:/Program Files/jboss-4.2.2.GA] [C:/Program Files/jboss-4.2.2.GA]
/Applications/jboss-4.2.2.GA
    [input] Enter the project name [myproject] [myproject]
helloworld
     [echo] Accepted project name as: helloworld
    [input] Select a RichFaces skin (not applicable if using ICEFaces) [blueSky] ([blueSky], classic, ruby, wine, deepMarine, emeraldTown, sakura, DEFAULT)

    [input] Is this project deployed as an EAR (with EJB components) or a WAR (with no EJB support) [ear]  ([ear], war, )

    [input] Enter the Java package name for your session beans [com.mydomain.helloworld] [com.mydomain.helloworld]
org.jboss.helloworld
    [input] Enter the Java package name for your entity beans [org.jboss.helloworld] [org.jboss.helloworld]

    [input] Enter the Java package name for your test cases [org.jboss.helloworld.test] [org.jboss.helloworld.test]

    [input] What kind of database are you using? [hsql]  ([hsql], mysql, oracle, postgres, mssql, db2, sybase, enterprisedb, h2)
mysql
    [input] Enter the Hibernate dialect for your database [org.hibernate.dialect.MySQLDialect] [org.hibernate.dialect.MySQLDialect]

    [input] Enter the filesystem path to the JDBC driver jar [lib/hsqldb.jar] [lib/hsqldb.jar]
/Users/pmuir/java/mysql.jar
    [input] Enter JDBC driver class for your database [com.mysql.jdbc.Driver] [com.mysql.jdbc.Driver]

    [input] Enter the JDBC URL for your database [jdbc:mysql:///test] [jdbc:mysql:///test]
jdbc:mysql:///helloworld
    [input] Enter database username [sa] [sa]
pmuir
    [input] Enter database password [] []

    [input] skipping input as property hibernate.default_schema.new has already been set.
    [input] Enter the database catalog name (it is OK to leave this blank) [] []

    [input] Are you working with tables that already exist in the database? [n]  (y, [n], )
y
    [input] Do you want to drop and recreate the database tables and data in import.sql each time you deploy? [n]  (y, [n], )
n
    [input] Enter your ICEfaces home directory (leave blank to omit ICEfaces) [] []

[propertyfile] Creating new property file: /Users/pmuir/workspace/jboss-seam/seam-gen/build.properties
     [echo] Installing JDBC driver jar to JBoss server
     [echo] Type 'seam create-project' to create the new project

BUILD SUCCESSFUL
Total time: 1 minute 32 seconds
~/workspace/jboss-seam $ </programlisting>

        <para>The tool provides sensible defaults, which you can accept by just pressing enter at the prompt.</para>

        <para>The most important choice you need to make is between EAR deployment and WAR deployment of your project.
            EAR projects support EJB 3.0 and require Java EE 5. WAR projects do not support EJB 3.0, but may be deployed
            to a J2EE environment. The packaging of a WAR is also simpler to understand. If you installed an EJB3-ready
            application server like JBoss, choose <literal>ear</literal>. Otherwise, choose <literal>war</literal>.
            We'll assume that you've chosen an EAR deployment for the rest of the tutorial, but you can follow exactly
            the same steps for a WAR deployment.</para>

        <para>If you are working with an existing data model, make sure you tell seam-gen that the tables already exist
            in the database.</para>

        <para>The settings are stored in <literal>seam-gen/build.properties</literal>, but you can also modify them
            simply by running <literal>seam setup</literal> a second time.</para>

        <para>Now we can create a new project in our Eclipse workspace directory, by typing:</para>

        <programlisting>seam new-project</programlisting>

        <programlisting>C:\Projects\jboss-seam&gt;seam new-project
Buildfile: build.xml

...

new-project:
     [echo] A new Seam project named 'helloworld' was created in the C:\Projects directory
     [echo] Type 'seam explode' and go to http://localhost:8080/helloworld
     [echo] Eclipse Users: Add the project into Eclipse using File &gt; New &gt; Project and select General &gt; Project (not Java Project)
     [echo] NetBeans Users: Open the project in NetBeans

BUILD SUCCESSFUL
Total time: 7 seconds
C:\Projects\jboss-seam&gt;</programlisting>

        <para>This copies the Seam jars, dependent jars and the JDBC driver jar to a new Eclipse project, and generates
            all needed resources and configuration files, a facelets template file and stylesheet, along with Eclipse
            metadata and an Ant build script. The Eclipse project will be automatically deployed to an exploded
            directory structure in JBoss AS as soon as you add the project using <literal>New -&gt; Project...
                -&gt; General -&gt; Project -&gt; Next</literal>, typing the <literal>Project name</literal>
                (<literal>helloworld</literal> in this case), and then clicking <literal>Finish</literal>. Do not select
                <literal>Java Project</literal> from the New Project wizard.</para>

        <para>If your default JDK in Eclipse is not a Java SE 5 or Java SE 6 JDK, you will need to select a Java SE 5
            compliant JDK using <literal>Project -&gt; Properties -&gt; Java Compiler</literal>.</para>

        <para>Alternatively, you can deploy the project from outside Eclipse by typing <literal>seam explode</literal>.</para>

        <para>Go to <literal>http://localhost:8080/helloworld</literal> to see a welcome page. This is a facelets page,
                <literal>view/home.xhtml</literal>, using the template <literal>view/layout/template.xhtml</literal>.
            You can edit this page, or the template, in eclipse, and see the results <emphasis>immediately</emphasis>,
            by clicking refresh in your browser.</para>

        <para>Don't get scared by the XML configuration documents that were generated into the project directory. They
            are mostly standard Java EE stuff, the stuff you need to create once and then never look at again, and they
            are 90% the same between all Seam projects. (They are so easy to write that even seam-gen can do it.)</para>

        <para>The generated project includes three database and persistence configurations. The
            <literal>persistence-test.xml</literal> and
            <literal>import-test.sql</literal> files are used when running the TestNG unit tests against HSQLDB. The
            database schema and the test data in <literal>import-test.sql</literal> is always exported to the database
            before running tests. The <literal>myproject-dev-ds.xml</literal>, <literal>persistence-dev.xml</literal>and
                <literal>import-dev.sql</literal> files are for use when deploying the application to your development
            database. The schema might be exported automatically at deployment, depending upon whether you told seam-gen
            that you are working with an existing database. The <literal>myproject-prod-ds.xml</literal>,
                <literal>persistence-prod.xml</literal>and <literal>import-prod.sql</literal> files are for use when
            deploying the application to your production database. The schema is not exported automatically at
            deployment.</para>
    </section>

    <section>
        <title>Creating a new action</title>

        <para>If you're used to traditional action-style web frameworks, you're probably wondering how you can create a
            simple web page with a stateless action method in Java. If you type:</para>

        <programlisting>seam new-action</programlisting>

        <para>Seam will prompt for some information, and generate a new facelets page and Seam component for your
            project.</para>

        <programlisting>C:\Projects\jboss-seam&gt;seam new-action
Buildfile: build.xml

validate-workspace:

validate-project:

action-input:
    [input] Enter the Seam component name
ping
    [input] Enter the local interface name [Ping]

    [input] Enter the bean class name [PingBean]

    [input] Enter the action method name [ping]

    [input] Enter the page name [ping]


setup-filters:

new-action:
     [echo] Creating a new stateless session bean component with an action method
     [copy] Copying 1 file to C:\Projects\helloworld\src\action\org\jboss\helloworld
     [copy] Copying 1 file to C:\Projects\helloworld\src\action\org\jboss\helloworld
     [copy] Copying 1 file to C:\Projects\helloworld\src\action\org\jboss\helloworld\test
     [copy] Copying 1 file to C:\Projects\helloworld\src\action\org\jboss\helloworld\test
     [copy] Copying 1 file to C:\Projects\helloworld\view
     [echo] Type 'seam restart' and go to http://localhost:8080/helloworld/ping.seam

BUILD SUCCESSFUL
Total time: 13 seconds
C:\Projects\jboss-seam&gt;</programlisting>

        <para>Because we've added a new Seam component, we need to restart the exploded directory deployment. You can do
            this by typing <literal>seam restart</literal>, or by running the <literal>restart</literal> target in the
            generated project <literal>build.xml</literal> file from inside Eclipse. Another way to force a restart is
            to edit the file <literal>resources/META-INF/application.xml</literal> in Eclipse. <emphasis>Note that you
                do not need to restart JBoss each time you change the application.</emphasis></para>

        <para>Now go to <literal>http://localhost:8080/helloworld/ping.seam</literal> and click the button. You can see
            the code behind this action by looking in the project <literal>src</literal> directory. Put a breakpoint in
            the <literal>ping()</literal> method, and click the button again.</para>

        <para>Finally, locate the <literal>PingTest.xml</literal> file in the test package and run the integration tests
            using the TestNG plugin for Eclipse. Alternatively, run the tests using <literal>seam test</literal> or the
                <literal>test</literal> target of the generated build.</para>
    </section>

    <section>
        <title>Creating a form with an action</title>

        <para>The next step is to create a form. Type:</para>

        <programlisting>seam new-form</programlisting>

        <programlisting>C:\Projects\jboss-seam&gt;seam new-form
Buildfile: C:\Projects\jboss-seam\seam-gen\build.xml

validate-workspace:

validate-project:

action-input:
    [input] Enter the Seam component name
hello
    [input] Enter the local interface name [Hello]

    [input] Enter the bean class name [HelloBean]

    [input] Enter the action method name [hello]

    [input] Enter the page name [hello]


setup-filters:

new-form:
     [echo] Creating a new stateful session bean component with an action method
     [copy] Copying 1 file to C:\Projects\hello\src\com\hello
     [copy] Copying 1 file to C:\Projects\hello\src\com\hello
     [copy] Copying 1 file to C:\Projects\hello\src\com\hello\test
     [copy] Copying 1 file to C:\Projects\hello\view
     [copy] Copying 1 file to C:\Projects\hello\src\com\hello\test
     [echo] Type 'seam restart' and go to http://localhost:8080/hello/hello.seam

BUILD SUCCESSFUL
Total time: 5 seconds
C:\Projects\jboss-seam&gt;</programlisting>

        <para>Restart the application again, and go to <literal>http://localhost:8080/helloworld/hello.seam</literal>.
            Then take a look at the generated code. Run the test. Try adding some new fields to the form and Seam
            component (remember to restart the deployment each time you change the Java code).</para>
    </section>

    <section>
        <title>Generating an application from an existing database</title>

        <para>Manually create some tables in your database. (If you need to switch to a different database, just run
                <literal>seam setup</literal> again.) Now type:</para>

        <programlisting>seam generate-entities</programlisting>

        <para>Restart the deployment, and go to <literal>http://localhost:8080/helloworld</literal>. You can browse the
            database, edit existing objects, and create new objects. If you look at the generated code, you'll probably
            be amazed how simple it is! Seam was designed so that data access code is easy to write by hand, even for
            people who don't want to cheat by using seam-gen.</para>
    </section>
    
    <section>
        <title>Generating an application from existing JPA/EJB3 entities</title>

        <para>Place your existing, valid entity classes inside the <literal>src/model</literal>. Now type</para>

        <programlisting>seam generate-ui</programlisting>

        <para>Restart the deployment, and go to <literal>http://localhost:8080/helloworld</literal>.</para>
    </section>

    <section>
        <title>Deploying the application as an EAR</title>

        <para>Finally, we want to be able to deploy the application using standard Java EE 5 packaging. First, we need
            to remove the exploded directory by running <literal>seam unexplode</literal>. To deploy the EAR, we can
            type <literal>seam deploy</literal> at the command prompt, or run the <literal>deploy</literal> target of
            the generated project build script. You can undeploy using <literal>seam undeploy</literal> or the
                <literal>undeploy</literal> target.</para>

        <para>By default, the application will be deployed with the <emphasis>dev profile</emphasis>. The EAR will
            include the <literal>persistence-dev.xml</literal> and <literal>import-dev.sql</literal> files, and the
                <literal>myproject-dev-ds.xml</literal> file will be deployed. You can change the profile, and use the
                <emphasis>prod profile</emphasis>, by typing</para>

        <programlisting>seam -Dprofile=prod deploy</programlisting>

        <para>You can even define new deployment profiles for your application. Just add appropriately named files to
            your project—for example, <literal>persistence-staging.xml</literal>, <literal>import-staging.sql</literal>
            and <literal>myproject-staging-ds.xml</literal>—and select the name of the profile using
                <literal>-Dprofile=staging</literal>.</para>
    </section>

    <section id="gettingstarted-hotdeployment">
        <title>Seam and incremental hot deployment</title>

        <para>When you deploy your Seam application as an exploded directory, you'll get some support for incremental
            hot deployment at development time. You need to enable debug mode in both Seam and Facelets, by adding this
            line to <literal>components.xml</literal>:</para>

        <programlisting>&lt;core:init debug="true"/&gt;</programlisting>

        <para>Now, the following files may be redeployed without requiring a full restart of the web application:</para>

        <itemizedlist>
            <listitem>
                <para>any facelets page</para>
            </listitem>

            <listitem>
                <para>any <literal>pages.xml</literal> file</para>
            </listitem>
        </itemizedlist>

        <para>But if we want to change any Java code, we still need to do a full restart of the application. (In JBoss
            this may be accomplished by touching the top level deployment descriptor: <literal>application.xml</literal>
            for an EAR deployment, or <literal>web.xml</literal> for a WAR deployment.)</para>

        <para>But if you really want a fast edit/compile/test cycle, Seam supports incremental redeployment of JavaBean
            components. To make use of this functionality, you must deploy the JavaBean components into the
                <literal>WEB-INF/dev</literal> directory, so that they will be loaded by a special Seam classloader,
            instead of by the WAR or EAR classloader.</para>

        <para>You need to be aware of the following limitations:</para>

        <itemizedlist>
            <listitem>
                <para>the components must be JavaBean components, they cannot be EJB3 beans (we are working on fixing
                    this limitation)</para>
            </listitem>

            <listitem>
                <para>entities can never be hot-deloyed</para>
            </listitem>

            <listitem>
                <para>components deployed via <literal>components.xml</literal> may not be hot-deployed</para>
            </listitem>

            <listitem>
                <para>the hot-deployable components will not be visible to any classes deployed outside of
                        <literal>WEB-INF/dev</literal></para>
            </listitem>

            <listitem>
               <para>Seam debug mode must be enabled and <literal>jboss-seam-debug.jar</literal>
                   must be in <literal>WEB-INF/lib</literal></para>
            </listitem>
            
            <listitem>
               <para>You must have the Seam filter installed in web.xml</para>
            </listitem>
        </itemizedlist>

        <para>If you create a WAR project using seam-gen, incremental hot deployment is available out of the box for
            classes in the <literal>src/action</literal> source directory. However, seam-gen does not support
            incremental hot deployment for EAR projects.</para>
    </section>

    <section>
        <title>Using Seam with JBoss 4.0</title>

        <para> Seam 2.0 was developed for JavaServer Faces 1.2. When using JBoss AS, we recommend using JBoss 4.2, which
            bundles the JSF 1.2 reference implementation. However, it is still possible to use Seam 2.0 on the JBoss 4.0
            platform. There are two basic steps required to do this: install an EJB3-enabled version of JBoss 4.0 and
            replace MyFaces with the JSF 1.2 reference implementation.  Once you complete these steps, Seam 2.0 
            applications can be deployed to JBoss 4.0.</para>

        <section>
            <title>Install JBoss 4.0</title>
            <para>JBoss 4.0 does not ship a default configuration compatible with Seam. To run Seam, you must install
                JBoss 4.0.5 using the JEMS 1.2 installer with the ejb3 profile selected. Seam will not run with an
                installation that doesn't include EJB3 support. The JEMS installer can be downloaded from <ulink url="http://labs.jboss.com/jemsinstaller/downloads">http://labs.jboss.com/jemsinstaller/downloads</ulink>. </para>
        </section>

        <section>
            <title>Install the JSF 1.2 RI</title>

            <para> The web configuration for JBoss 4.0 can be found in the
                    <literal>server/default/deploy/jbossweb-tomcat55.sar</literal>. You'll need to delete
                    <literal>myfaces-api.jar</literal> any <literal>myfaces-impl.jar</literal> from the
                    <literal>jsf-libs </literal>directory. Then, you'll need to copy <literal>jsf-api.jar</literal>,
                    <literal>jsf-impl.jar</literal>, <literal>el-api.jar</literal>, and <literal>el-ri.jar</literal>
                to that directory. The JSF JARs can be found in the Seam <literal>lib</literal> directory. The el JARs
                can be obtained from the Seam 1.2 release. </para>

            <para>You'll also need to edit the <literal>conf/web.xml</literal>, replacing
                <literal>myfaces-impl.jar</literal> with <literal>jsf-impl.jar</literal>. </para>
        </section>



    </section>

</chapter>
    <chapter id="concepts">
    <title>The contextual component model</title>
    <para> 
        The two core concepts in Seam are the notion of a <emphasis>context</emphasis> and the notion of a
        <emphasis>component</emphasis>. Components are stateful objects, usually EJBs, and an instance of a
        component is associated with a context, and given a name in that context. <emphasis>Bijection</emphasis>
        provides a mechanism for aliasing internal component names (instance variables) to contextual names, allowing
        component trees to be dynamically assembled, and reassembled by Seam.
    </para>
    
    <para>
        Let's start by describing the contexts built in to Seam.
    </para>

    <sect1>
        <title>Seam contexts</title>
        <para> Seam contexts are created and destroyed by the framework. The application does not control context
            demarcation via explicit Java API calls. Context are usually implicit. In some cases, however, contexts are
            demarcated via annotations. </para>
        <para> The basic Seam contexts are: </para>

        <itemizedlist>
            <listitem>
                <para> Stateless context </para>
            </listitem>
            <listitem>
                <para> Event (or request) context </para>
            </listitem>
            <listitem>
                <para> Page context </para>
            </listitem>
            <listitem>
                <para> Conversation context </para>
            </listitem>
            <listitem>
                <para> Session context </para>
            </listitem>
            <listitem>
                <para> Business process context </para>
            </listitem>
            <listitem>
                <para> Application context </para>
            </listitem>
        </itemizedlist>

        <para> 
            You will recognize some of these contexts from servlet and related specifications. However, two of them
            might be new to you: <emphasis>conversation context</emphasis>, and <emphasis>business process
            context</emphasis>. One reason state management in web applications is so fragile and error-prone is that
            the three built-in contexts (request, session and application) are not especially meaningful from the point
            of view of the business logic. A user login session, for example, is a fairly arbitrary construct in terms
            of the actual application work flow. Therefore, most Seam components are scoped to the conversation or
            business process contexts, since they are the contexts which are most meaningful in terms of the
            application.
        </para>

        <para>
            Let's look at each context in turn.
        </para>

        <sect2>
            <title>Stateless context</title>
            <para>
                Components which are truly stateless (stateless session beans, primarily) always live in the
                stateless context (this is really a non-context). Stateless components are not very interesting, and are
                arguably not very object-oriented. Nevertheless, they are important and often useful.
            </para>
        </sect2>

        <sect2>
            <title>Event context</title>
            <para>
                The event context is the "narrowest" stateful context, and is a generalization of the notion of the
                web request context to cover other kinds of events. Nevertheless, the event context associated with the
                lifecycle of a JSF request is the most important example of an event context, and the one you will work
                with most often. Components associated with the event context are destroyed at the end of the request,
                but their state is available and well-defined for at least the lifecycle of the request.
            </para>
            <para> 
                When you invoke a Seam component via RMI, or Seam Remoting, the event context is created and
                destroyed just for the invocation.
            </para>
        </sect2>

        <sect2>
            <title>Page context</title>
            <para>
                The page context allows you to associate state with a particular instance of a rendered page. You can
                initialize state in your event listener, or while actually rendering the page, and then have access to
                it from any event that originates from that page. This is especially useful for functionality like
                clickable lists, where the list is backed by changing data on the server side. The state is actually
                serialized to the client, so this construct is extremely robust with respect to multi-window operation
                and the back button.
            </para>
        </sect2>

        <sect2>
            <title>Conversation context</title>
            <para>
                The conversation context is a truly central concept in Seam. A <emphasis>conversation</emphasis> is a
                unit of work from the point of view of the user. It might span several interactions with the user,
                several requests, and several database transactions. But to the user, a conversation solves a single
                problem. For example, "book hotel", "approve contract", "create order" are all conversations. You might
                like to think of a conversation implementing a single "use case" or "user story", but the relationship 
                is not necessarily quite exact.
            </para>
            <para>
                A conversation holds state associated with "what the user is doing now, in this window". A single
                user may have multiple conversations in progress at any point in time, usually in multiple windows. The
                conversation context allows us to ensure that state from the different conversations does not collide
                and cause bugs.
            </para>
            <para>
                It might take you some time to get used to thinking of applications in terms of conversations. But
                once you get used to it, we think you'll love the notion, and never be able to not think in terms of
                conversations again!
            </para>
            <para>
                Some conversations last for just a single request. Conversations that span multiple requests must be
                demarcated using annotations provided by Seam.
            </para>
            <para>
                Some conversations are also <emphasis>tasks</emphasis>. A task is a conversation that is significant
                in terms of a long-running business process, and has the potential to trigger a business process state
                transition when it is successfully completed. Seam provides a special set of annotations for task
                demarcation.
            </para>
            <para>
                Conversations may be <emphasis>nested</emphasis>, with one conversation taking place "inside" a wider
                conversation. This is an advanced feature.
            </para>
            <para>
                Usually, conversation state is actually held by Seam in the servlet session between requests. Seam
                implements configurable <emphasis>conversation timeout</emphasis>, automatically destroying inactive
                conversations, and thus ensuring that the state held by a single user login session does not grow
                without bound if the user abandons conversations.
            </para>
            <para>
                Seam serializes processing of concurrent requests that take place in the same long-running
                conversation context, in the same process.
            </para>
            <para>
                Alternatively, Seam may be configured to keep conversational state in the client browser.
            </para> 
        </sect2>

        <sect2>
            <title>Session context</title>
            <para>
                A session context holds state associated with the user login session. While there are some cases
                where it is useful to share state between several conversations, we generally frown on the use of
                session context for holding components other than global information about the logged in user.
            </para>
            <para> 
                In a JSR-168 portal environment, the session context represents the portlet session. 
            </para>
        </sect2>

        <sect2>
            <title>Business process context</title>
            <para> 
                The business process context holds state associated with the long running business process. This
                state is managed and made persistent by the BPM engine (JBoss jBPM). The business process spans multiple
                interactions with multiple users, so this state is shared between multiple users, but in a well-defined
                manner. The current task determines the current business process instance, and the lifecycle of the
                business process is defined externally using a <emphasis>process definition language</emphasis>, so
                there are no special annotations for business process demarcation. 
            </para>
        </sect2>

        <sect2>
            <title>Application context</title>
            <para> 
                The application context is the familiar servlet context from the servlet spec. Application context is
                mainly useful for holding static information such as configuration data, reference data or metamodels.
                For example, Seam stores its own configuration and metamodel in the application context. 
            </para>
        </sect2>

        <sect2>
            <title>Context variables</title>
            <para> 
                A context defines a namespace, a set of <emphasis>context variables</emphasis>. These work much the
                same as session or request attributes in the servlet spec. You may bind any value you like to a context
                variable, but usually we bind Seam component instances to context variables. 
            </para>

            <para> 
                So, within a context, a component instance is identified by the context variable name (this is
                usually, but not always, the same as the component name). You may programatically access a named
                component instance in a particular scope via the <literal>Contexts</literal> class, which provides
                access to several thread-bound instances of the <literal>Context</literal> interface: 
            </para>

            <programlisting><![CDATA[User user = (User) Contexts.getSessionContext().get("user");]]></programlisting>

            <para>
                You may also set or change the value associated with a name: 
            </para>

            <programlisting><![CDATA[Contexts.getSessionContext().set("user", user);]]></programlisting>

            <para> 
                Usually, however, we obtain components from a context via injection, and put component instances into
                a context via outjection. 
            </para>
        </sect2>

        <sect2>
            <title>Context search priority</title>
            <para> 
                Sometimes, as above, component instances are obtained from a particular known scope. Other times, all
                stateful scopes are searched, in <emphasis>priority order</emphasis>. The order is as follows: 
            </para>

            <itemizedlist>
                <listitem>
                    <para> Event context </para>
                </listitem>
                <listitem>
                    <para> Page context </para>
                </listitem>
                <listitem>
                    <para> Conversation context </para>
                </listitem>
                <listitem>
                    <para> Session context </para>
                </listitem>
                <listitem>
                    <para> Business process context </para>
                </listitem>
                <listitem>
                    <para> Application context </para>
                </listitem>
            </itemizedlist>

            <para> 
                You can perform a priority search by calling <literal>Contexts.lookupInStatefulContexts()</literal>.
                Whenever you access a component by name from a JSF page, a priority search occurs. 
            </para>

        </sect2>

        <sect2 id="concurrency">
            <title>Concurrency model</title>
            <para> 
                Neither the servlet nor EJB specifications define any facilities for managing concurrent requests
                originating from the same client. The servlet container simply lets all threads run concurrently and
                leaves enforcing threadsafeness to application code. The EJB container allows stateless components to be
                accessed concurrently, and throws an exception if multiple threads access a stateful session bean. 
            </para>
            <para> 
                This behavior might have been okay in old-style web applications which were based around
                fine-grained, synchronous requests. But for modern applications which make heavy use of many
                fine-grained, asynchronous (AJAX) requests, concurrency is a fact of life, and must be supported by the
                programming model. Seam weaves a concurrency management layer into its context model. 
            </para>
            <para> 
                The Seam session and application contexts are multithreaded. Seam will allow concurrent requests in a
                context to be processed concurrently. The event and page contexts are by nature single threaded. The
                business process context is strictly speaking multi-threaded, but in practice concurrency is
                sufficiently rare that this fact may be disregarded most of the time. Finally, Seam enforces a
                <emphasis>single thread per conversation per process</emphasis> model for the conversation context
                by serializing concurrent requests in the same long-running conversation context. 
            </para>
            <para> 
                Since the session context is multithreaded, and often contains volatile state, session scope
                components are always protected by Seam from concurrent access. Seam serializes requests to session
                scope session beans and JavaBeans by default (and detects and breaks any deadlocks that occur). This is
                not the default behaviour for application scoped components however, since application scoped components
                do not usually hold volatile state and because synchronization at the global level is
                <emphasis>extremely</emphasis> expensive. However, you can force a serialized threading model on any
                session bean or JavaBean component by adding the <literal>@Synchronized</literal> annotation. 
            </para>
            <para> 
                This concurrency model means that AJAX clients can safely use volatile session and conversational
                state, without the need for any special work on the part of the developer.
            </para>
        </sect2>

    </sect1>

    <sect1>
        <title>Seam components</title>
        <para> 
            Seam components are POJOs (Plain Old Java Objects). In particular, they are JavaBeans or EJB 3.0
            enterprise beans. While Seam does not require that components be EJBs and can even be used without an EJB
            3.0 compliant container, Seam was designed with EJB 3.0 in mind and includes deep integration with EJB 3.0.
            Seam supports the following <emphasis>component types</emphasis>. 
        </para>

        <itemizedlist>
            <listitem>
                <para> EJB 3.0 stateless session beans </para>
            </listitem>
            <listitem>
                <para> EJB 3.0 stateful session beans </para>
            </listitem>
            <listitem>
                <para> EJB 3.0 entity beans </para>
            </listitem>
            <listitem>
                <para> JavaBeans </para>
            </listitem>
            <listitem>
                <para> EJB 3.0 message-driven beans </para>
            </listitem>
        </itemizedlist>

        <sect2>
            <title>Stateless session beans</title>
            <para> 
                Stateless session bean components are not able to hold state across multiple invocations. Therefore,
                they usually work by operating upon the state of other components in the various Seam contexts. They may
                be used as JSF action listeners, but cannot provide properties to JSF components for display. 
            </para>
            <para> 
                Stateless session beans always live in the stateless context. 
            </para>
            <para> 
                Stateless session beans can be accessed concurrently as a new instance is used for each request. 
                Assigning the instance to the request is the responsibility of the EJB3 container (normally instances
                will be allocated from a reusable pool meaning that you may find any instance variables contain data
                from previous uses of the bean). 
            </para>
            <para> 
                Stateless session beans are the least interesting kind of Seam component. 
            </para> 
            <para>
                Seam stateless session bean components may be instantiated using <literal>Component.getInstance()</literal>
                or <literal>@In(create=true)</literal>. They should not be directly instantiated via JNDI lookup
                or the <literal>new</literal> operator.
            </para> 
        </sect2>

        <sect2>
            <title>Stateful session beans</title>
            <para> 
                Stateful session bean components are able to hold state not only across multiple invocations of the
                bean, but also across multiple requests. Application state that does not belong in the database should
                usually be held by stateful session beans. This is a major difference between Seam and many other web
                application frameworks. Instead of sticking information about the current conversation directly in the
                <literal>HttpSession</literal>, you should keep it in instance variables of a stateful session bean
                that is bound to the conversation context. This allows Seam to manage the lifecycle of this state for
                you, and ensure that there are no collisions between state relating to different concurrent
                conversations. 
            </para>
            <para> 
                Stateful session beans are often used as JSF action listener, and as backing beans that provide
                properties to JSF components for display or form submission. 
            </para>
            <para> 
                By default, stateful session beans are bound to the conversation context. They may never be bound to
                the page or stateless contexts. 
            </para>
            <para> 
                Concurrent requests to session-scoped stateful session beans are always serialized by Seam. 
            </para>   
            <para>
                Seam stateful session bean components may be instantiated using <literal>Component.getInstance()</literal>
                or <literal>@In(create=true)</literal>. They should not be directly instantiated via JNDI lookup
                or the <literal>new</literal> operator.
            </para> 
        </sect2>

        <sect2>
            <title>Entity beans</title>
            <para> 
                Entity beans may be bound to a context variable and function as a seam component. Because entities
                have a persistent identity in addition to their contextual identity, entity instances are usually bound
                explicitly in Java code, rather than being instantiated implicitly by Seam. 
            </para>
            <para> 
                Entity bean components do not support bijection or context demarcation. Nor does invocation of an
                entity bean trigger validation. 
            </para>
            <para> 
                Entity beans are not usually used as JSF action listeners, but do often function as backing beans
                that provide properties to JSF components for display or form submission. In particular, it is common to
                use an entity as a backing bean, together with a stateless session bean action listener to implement
                create/update/delete type functionality. 
            </para>
            <para>
                By default, entity beans are bound to the conversation context. They may never be bound to the
                stateless context. 
            </para>
            <para> 
                Note that it in a clustered environment is somewhat less efficient to bind an entity bean directly to
                a conversation or session scoped Seam context variable than it would be to hold a reference to the
                entity bean in a stateful session bean. For this reason, not all Seam applications define entity beans
                to be Seam components. 
            </para>
            <para>
                Seam entity bean components may be instantiated using <literal>Component.getInstance()</literal>,
                <literal>@In(create=true)</literal> or directly using the <literal>new</literal> operator.
            </para> 
        </sect2>

        <sect2>
            <title>JavaBeans</title>
            <para> 
                Javabeans may be used just like a stateless or stateful session bean. However, they do not provide
                the functionality of a session bean (declarative transaction demarcation, declarative security,
                efficient clustered state replication, EJB 3.0 persistence, timeout methods, etc). 
            </para>
            <para> 
                In a later chapter, we show you how to use Seam and Hibernate without an EJB container. In this use
                case, components are JavaBeans instead of session beans. Note, however, that in many application servers
                it is somewhat less efficient to cluster conversation or session scoped Seam JavaBean components than it
                is to cluster stateful session bean components. 
            </para>
            <para> 
                By default, JavaBeans are bound to the event context. 
            </para>
            <para> 
                Concurrent requests to session-scoped JavaBeans are always serialized by Seam. 
            </para>
            <para>
                Seam JavaBean components may be instantiated using <literal>Component.getInstance()</literal>
                or <literal>@In(create=true)</literal>. They should not be directly instantiated using the 
                <literal>new</literal> operator.
            </para> 
        </sect2>

        <sect2>
            <title>Message-driven beans</title>
            <para> 
                Message-driven beans may function as a seam component. However, message-driven beans are called quite
                differently to other Seam components - instead of invoking them via the context variable, they listen
                for messages sent to a JMS queue or topic. 
            </para>
            <para> 
                Message-driven beans may not be bound to a Seam context. Nor do they have access to the session or
                conversation state of their "caller". However, they do support bijection and some other Seam
                functionality. 
            </para>
            <para>
                Message-driven beans are never instantiated by the application. They are instantiated by the EJB
                container when a message is received.
            </para>
        </sect2>

        <sect2>
            <title>Interception</title>
            <para> 
                In order to perform its magic (bijection, context demarcation, validation, etc), Seam must intercept
                component invocations. For JavaBeans, Seam is in full control of instantiation of the component, and no
                special configuration is needed. For entity beans, interception is not required since bijection and
                context demarcation are not defined. For session beans, we must register an EJB interceptor for the
                session bean component. We could use an annotation, as follows: 
            </para>

            <programlisting><![CDATA[@Stateless
@Interceptors(SeamInterceptor.class)
public class LoginAction implements Login { 
    ... 
}]]></programlisting>

            <para> 
                But a much better way is to define the interceptor in <literal>ejb-jar.xml</literal>. 
            </para>

            <programlisting><![CDATA[<interceptors>
   <interceptor>
      <interceptor-class>org.jboss.seam.ejb.SeamInterceptor</interceptor-class>
   </interceptor>
</interceptors>
   
<assembly-descriptor>
   <interceptor-binding>
      <ejb-name>*</ejb-name>
      <interceptor-class>org.jboss.seam.ejb.SeamInterceptor</interceptor-class>
   </interceptor-binding>
</assembly-descriptor>]]></programlisting>

        </sect2>

        <sect2>
            <title>Component names</title>
            <para> 
                All seam components need a name. We can assign a name to a component using the
                <literal>@Name</literal> annotation: 
            </para>

            <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    ... 
}]]></programlisting>

            <para> 
                This name is the <emphasis>seam component name</emphasis> and is not related to any other name
                defined by the EJB specification. However, seam component names work just like JSF managed bean names
                and you can think of the two concepts as identical. 
            </para>

            <para>
                <literal>@Name</literal> is not the only way to define a component name, but we always need
                to specify the name <emphasis>somewhere</emphasis>. If we don't, then none of the other
                Seam annotations will function.
            </para>

            <para> 
                Just like in JSF, a seam component instance is usually bound to a context variable with the same name
                as the component name. So, for example, we would access the <literal>LoginAction</literal> using
                <literal>Contexts.getStatelessContext().get("loginAction")</literal>. In particular, whenever Seam
                itself instantiates a component, it binds the new instance to a variable with the component name.
                However, again like JSF, it is possible for the application to bind a component to some other context
                variable by programmatic API call. This is only useful if a particular component serves more than one
                role in the system. For example, the currently logged in <literal>User</literal> might be bound to the
                <literal>currentUser</literal> session context variable, while a <literal>User</literal> that is the
                subject of some administration functionality might be bound to the <literal>user</literal> conversation
                context variable. 
            </para>

            <para> 
                For very large applications, and for built-in seam components, qualified names are often used. 
            </para>

            <programlisting><![CDATA[@Name("com.jboss.myapp.loginAction")
@Stateless
public class LoginAction implements Login { 
    ... 
}]]></programlisting>

            <para> 
                We may use the qualified component name both in Java code and in JSF's expression language: 
            </para>

            <programlisting><![CDATA[<h:commandButton type="submit" value="Login"
                 action="#{com.jboss.myapp.loginAction.login}"/>]]></programlisting>

            <para> 
                Since this is noisy, Seam also provides a means of aliasing a qualified name to a simple name. Add a
                line like this to the <literal>components.xml</literal> file: 
            </para>

            <programlisting><![CDATA[<factory name="loginAction" scope="STATELESS" value="#{com.jboss.myapp.loginAction}"/>]]></programlisting>

            <para> 
                All of the built-in Seam components have qualified names, but most of them are aliased to a simple
                name by the <literal>components.xml</literal> file included in the Seam jar. 
            </para>

        </sect2>

        <sect2>
            <title>Defining the component scope</title>
            <para> 
                We can override the default scope (context) of a component using the <literal>@Scope</literal>
                annotation. This lets us define what context a component instance is bound to, when it is instantiated
                by Seam. 
            </para>

            <programlisting><![CDATA[@Name("user")
@Entity
@Scope(SESSION)
public class User { 
    ... 
}]]></programlisting>

            <para>
                <literal>org.jboss.seam.ScopeType</literal> defines an enumeration of possible scopes.
            </para>

        </sect2>

        <sect2>
            <title>Components with multiple roles</title>
            <para> 
                Some Seam component classes can fulfill more than one role in the system. For example, we often have
                a <literal>User</literal> class which is usually used as a session-scoped component representing the
                current user but is used in user administration screens as a conversation-scoped component. The
                <literal>@Role</literal> annotation lets us define an additional named role for a component, with a
                different scope—it lets us bind the same component class to different context variables. (Any
                Seam component <emphasis>instance</emphasis> may be bound to multiple context variables, but this lets
                us do it at the class level, and take advantage of auto-instantiation.) 
            </para>

            <programlisting><![CDATA[@Name("user")
@Entity
@Scope(CONVERSATION)
@Role(name="currentUser", scope=SESSION)
public class User { 
    ... 
}]]></programlisting>

            <para>
                The <literal>@Roles</literal> annotation lets us specify as many additional roles as we like.
            </para>

            <programlisting><![CDATA[@Name("user")
@Entity
@Scope(CONVERSATION)
@Roles({@Role(name="currentUser", scope=SESSION),
        @Role(name="tempUser", scope=EVENT)})
public class User { 
    ... 
}]]></programlisting>

        </sect2>

        <sect2>
            <title>Built-in components</title>
            <para>
                Like many good frameworks, Seam eats its own dogfood and is implemented mostly as a set of built-in
                Seam interceptors (see later) and Seam components. This makes it easy for applications to interact with
                built-in components at runtime or even customize the basic functionality of Seam by replacing the
                built-in components with custom implementations. The built-in components are defined in the Seam
                namespace <literal>org.jboss.seam.core</literal> and the Java package of the same name.
            </para>
            <para> 
                The built-in components may be injected, just like any Seam components, but they also provide
                convenient static <literal>instance()</literal> methods: 
            </para>
            <programlisting><![CDATA[FacesMessages.instance().add("Welcome back, #{user.name}!");]]></programlisting>
        </sect2>

    </sect1>

    <sect1>
        <title>Bijection</title>
        <para>
            <emphasis>Dependency injection</emphasis> or <emphasis>inversion of control</emphasis> is by now a familiar
            concept to most Java developers. Dependency injection allows a component to obtain a reference to another
            component by having the container "inject" the other component to a setter method or instance variable. In
            all dependency injection implementations that we have seen, injection occurs when the component is
            constructed, and the reference does not subsequently change for the lifetime of the component instance. For
            stateless components, this is reasonable. From the point of view of a client, all instances of a particular
            stateless component are interchangeable. On the other hand, Seam emphasizes the use of stateful components.
            So traditional dependency injection is no longer a very useful construct. Seam introduces the notion of
            <emphasis>bijection</emphasis> as a generalization of injection. In contrast to injection, bijection is: 
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>contextual</emphasis> - bijection is used to assemble stateful components from various
                    different contexts (a component from a "wider" context may even have a reference to a component from
                    a "narrower" context)
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>bidirectional</emphasis> - values are injected from context variables into attributes of
                    the component being invoked, and also <emphasis>outjected</emphasis> from the component attributes
                    back out to the context, allowing the component being invoked to manipulate the values of contextual
                    variables simply by setting its own instance variables 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>dynamic</emphasis> - since the value of contextual variables changes over time, and since
                    Seam components are stateful, bijection takes place every time a component is invoked 
                </para>
            </listitem>
        </itemizedlist>

        <para> 
            In essence, bijection lets you alias a context variable to a component instance variable, by specifying
            that the value of the instance variable is injected, outjected, or both. Of course, we use annotations to
            enable bijection.
        </para>

        <para> 
            The <literal>@In</literal> annotation specifies that a value should be injected, either into an instance
            variable: 
        </para>

        <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    @In User user;
    ... 
}]]></programlisting>

        <para> 
            or into a setter method: 
        </para>

        <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    User user;
    
    @In
    public void setUser(User user) {
        this.user=user;
    }
    
    ... 
}]]></programlisting>


        <para> 
            By default, Seam will do a priority search of all contexts, using the name of the property or instance
            variable that is being injected. You may wish to specify the context variable name explicitly, using, for
            example, <literal>@In("currentUser")</literal>. 
        </para>

        <para> 
            If you want Seam to create an instance of the component when there is no existing component instance
            bound to the named context variable, you should specify <literal>@In(create=true)</literal>. If the value is
            optional (it can be null), specify <literal>@In(required=false)</literal>. 
        </para>
        
        <para>
            For some components, it can be repetitive to have to specify <literal>@In(create=true)</literal> everywhere
            they are used. In such cases, you can annotate the component <literal>@AutoCreate</literal>, and then it
            will always be created, whenever needed, even without the explicit use of <literal>create=true</literal>.
        </para>

        <para> 
            You can even inject the value of an expression: 
        </para>

        <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    @In("#{user.username}") String username;
    ... 
}]]></programlisting>

        <para>
            Injected values are disinjected (i.e, set to <literal>null</literal>) immediately after method 
            completion and outjection.
        </para>
        
        <para> 
            (There is much more information about component lifecycle and injection in the next chapter.) 
        </para>

        <para> 
            The <literal>@Out</literal> annotation specifies that an attribute should be outjected, either from an
            instance variable: 
        </para>

        <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    @Out User user;
    ... 
}]]></programlisting>

        <para> 
            or from a getter method: 
        </para>

        <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    User user;
    
    @Out
    public User getUser() {
        return user;
    }
    
    ... 
}]]></programlisting>

        <para> 
            An attribute may be both injected and outjected: 
        </para>

        <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    @In @Out User user;
    ... 
}]]></programlisting>

        <para> 
            or: 
        </para>

        <programlisting><![CDATA[@Name("loginAction")
@Stateless
public class LoginAction implements Login { 
    User user;
    
    @In
    public void setUser(User user) {
        this.user=user;
    }
    
    @Out
    public User getUser() {
        return user;
    }
    
    ... 
}]]></programlisting>

    </sect1>

    <sect1>
        <title>Lifecycle methods</title>
        
        <para> 
            Session bean and entity bean Seam components support all the usual EJB 3.0 lifecycle callback
            (<literal>@PostConstruct</literal>, <literal>@PreDestroy</literal>, etc). But Seam also supports 
            the use of any of these callbacks with JavaBean components. However, since these annotations are
            not available in a J2EE environment, Seam defines two additional component lifecycle callbacks,
            equivalent to <literal>@PostConstruct</literal> and <literal>@PreDestroy</literal>.
        </para>
        
        <para> 
            The <literal>@Create</literal> method is called after Seam instantiates a component. 
            Components may define only one <literal>@Create</literal> method. 
        </para>
        
        <para> 
            The <literal>@Destroy</literal> method is called when the context that the Seam component is bound to
            ends. Components may define only one <literal>@Destroy</literal> method.
        </para>
        
        <para>
            In addition, stateful session bean components <emphasis>must</emphasis> define a method with no parameters 
            annotated <literal>@Remove</literal>. This method is called by Seam when the context ends.
        </para>
        
        <para> 
            Finally, a related annotation is the <literal>@Startup</literal> annotation, which may be applied to any
            application or session scoped component. The <literal>@Startup</literal> annotation tells Seam to
            instantiate the component immediately, when the context begins, instead of waiting until it is first
            referenced by a client. It is possible to control the order of instantiation of startup components by
            specifying <literal>@Startup(depends={....})</literal>. 
        </para>
        
    </sect1>
    
    <sect1>
        <title>Conditional installation</title>
        
        <para>
            The <literal>@Install</literal> annotation lets you control conditional installation of components that
            are required in some deployment scenarios and not in others. This is useful if:
        </para>
        
        <itemizedlist>
        	<listitem>
        		<para>
        		    You want to mock out some infrastructural component in tests.
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        		    You want change the implementation of a component in certain
        		    deployment scenarios.
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        		    You want to install some components only if their dependencies are
        		    available (useful for framework authors).
        		</para>
        	</listitem>
        </itemizedlist>
        
        <para>
            <literal>@Install</literal> works by letting you specify <emphasis>precedence</emphasis>
            and <emphasis>dependencies</emphasis>. 
        </para>
        
        <para>
            The precedence of a component is a number that Seam uses to decide which component to
            install when there are multiple classes with the same component name in the classpath.
            Seam will choose the component with the higher precendence. There are some predefined
            precedence values (in ascending order):
        </para>
        
        <orderedlist>
        	<listitem>
        		<para>
        		    <literal>BUILT_IN</literal> — the lowest precedece components are
        		    the components built in to Seam. 
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        		    <literal>FRAMEWORK</literal> — components defined by third-party 
        		    frameworks may override built-in components, but are overridden by
        		    application components. 
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        		    <literal>APPLICATION</literal> — the default precedence. This is 
                    appropriate for most application components.
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        		    <literal>DEPLOYMENT</literal> — for application components which
        		    are deployment-specific. 
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        		    <literal>MOCK</literal> — for mock objects used in testing. 
        		</para>
        	</listitem>
        </orderedlist>
        
        <para>
            Suppose we have a component named <literal>messageSender</literal> that talks to
            a JMS queue. 
        </para>
        
        <programlisting><![CDATA[@Name("messageSender") 
public class MessageSender {
    public void sendMessage() {
        //do something with JMS
    }
}]]></programlisting>
        
        <para>
            In our unit tests, we don't have a JMS queue available, so we would like to stub
            out this method. We'll create a <emphasis>mock</emphasis> component that exists
            in the classpath when unit tests are running, but is never deployed with the
            application:
        </para>
        
        <programlisting><![CDATA[@Name("messageSender") 
@Install(precedence=MOCK)
public class MockMessageSender extends MessageSender {
    public void sendMessage() {
        //do nothing!
    }
}]]></programlisting>

        <para>
            The <literal>precedence</literal> helps Seam decide which version to use when it finds
            both components in the classpath.
        </para>
        
        <para>
            This is nice if we are able to control exactly which classes are in the classpath. But
            if I'm writing a reusable framework with many dependecies, I don't want to have to 
            break that framework across many jars. I want to be able to decide which components
            to install depending upon what other components are installed, and upon what classes
            are available in the classpath. The <literal>@Install</literal> annotation also 
            controls this functionality. Seam uses this mechanism internally to enable conditional 
            installation of many of the built-in components. However, you probably won't need to
            use it in your application.
        </para>
        
    </sect1>

    <sect1>
        <title>Logging</title>
        
        <para> 
            Who is not totally fed up with seeing noisy code like this? 
         </para>

        <programlisting><![CDATA[private static final Log log = LogFactory.getLog(CreateOrderAction.class);
        
public Order createOrder(User user, Product product, int quantity) {
    if ( log.isDebugEnabled() ) {
        log.debug("Creating new order for user: " + user.username() + 
            " product: " + product.name() 
            + " quantity: " + quantity);
    }
    return new Order(user, product, quantity);
}]]></programlisting>

        <para> 
            It is difficult to imagine how the code for a simple log message could possibly be more verbose. There is
            more lines of code tied up in logging than in the actual business logic! I remain totally astonished that
            the Java community has not come up with anything better in 10 years. 
        </para>

        <para> 
            Seam provides a logging API that simplifies this code significantly: 
        </para>

        <programlisting><![CDATA[@Logger private Log log;
        
public Order createOrder(User user, Product product, int quantity) {
    log.debug("Creating new order for user: #0 product: #1 quantity: #2", user.username(), product.name(), quantity);
    return new Order(user, product, quantity);
}]]></programlisting>

        <para>
            It doesn't matter if you declare the <literal>log</literal> variable static or not—it will work 
            either way, except for entity bean components which require the <literal>log</literal> variable to be
            static.
        </para>

        <para> 
            Note that we don't need the noisy <literal>if ( log.isDebugEnabled() )</literal> guard, since string
            concatenation happens <emphasis>inside</emphasis> the <literal>debug()</literal> method. Note also that we
            don't usually need to specify the log category explicitly, since Seam knows what component it is injecting
            the <literal>Log</literal> into. 
        </para>
        
        <!-- Lets not document this now, cos we should migrate to use the printf format
        <para>
            You can use <literal>java.text.MessageFormat</literal> formatted strings:
        </para>
        
        <programlisting><![CDATA[log.debug("The time is {0,time}", new Date());]]></programlisting>
        -->

        <para> 
            If <literal>User</literal> and <literal>Product</literal> are Seam components available in the current
            contexts, it gets even better: 
        </para>

        <programlisting><![CDATA[@Logger private Log log;
        
public Order createOrder(User user, Product product, int quantity) {
    log.debug("Creating new order for user: #{user.username} product: #{product.name} quantity: #0", quantity);
    return new Order(user, product, quantity);
}]]></programlisting>

        <para>
            Seam logging automagically chooses whether to send output to log4j or JDK logging. If log4j is in the
            classpath, Seam with use it. If it is not, Seam will use JDK logging.
        </para>

    </sect1>

    <sect1>
        <title>The <literal>Mutable</literal> interface and <literal>@ReadOnly</literal></title>
        <para> 
            Many application servers feature an amazingly broken implementation of <literal>HttpSession</literal>
            clustering, where changes to the state of mutable objects bound to the session are only replicated when the
            application calls <literal>setAttribute()</literal> explicitly. This is a source of bugs that can not
            effectively be tested for at development time, since they will only manifest when failover occurs.
            Furthermore, the actual replication message contains the entire serialized object graph bound to the session
            attribute, which is inefficient. 
        </para>

        <para> 
            Of course, EJB stateful session beans must perform automatic dirty checking and replication of mutable
            state and a sophisticated EJB container can introduce optimizations such as attribute-level replication.
            Unfortunately, not all Seam users have the good fortune to be working in an environment that supports EJB
            3.0. So, for session and conversation scoped JavaBean and entity bean components, Seam provides an extra
            layer of cluster-safe state management over the top of the web container session clustering. 
        </para>

        <para> 
            For session or conversation scoped JavaBean components, Seam automatically forces replication to occur by
            calling <literal>setAttribute()</literal> once in every request that the component was invoked by the
            application. Of course, this strategy is inefficient for read-mostly components. You can control this
            behavior by implementing the <literal>org.jboss.seam.core.Mutable</literal> interface, or by extending
            <literal>org.jboss.seam.core.AbstractMutable</literal>, and writing your own dirty-checking logic inside
            the component. For example, 
        </para>

        <programlisting><![CDATA[@Name("account")
public class Account extends AbstractMutable
{
    private BigDecimal balance;
    
    public void setBalance(BigDecimal balance)
    {
        setDirty(this.balance, balance);
        this.balance = balance;
    }
    
    public BigDecimal getBalance()
    {
        return balance;
    }
    
    ...
    
}]]></programlisting>

        <para> 
            Or, you can use the <literal>@ReadOnly</literal> annotation to achieve a similar effect: 
        </para>

        <programlisting><![CDATA[@Name("account")
public class Account
{
    private BigDecimal balance;
    
    public void setBalance(BigDecimal balance)
    {
        this.balance = balance;
    }
    
    @ReadOnly
    public BigDecimal getBalance()
    {
        return balance;
    }
    
    ...
    
}]]></programlisting>

        <para> 
            For session or conversation scoped entity bean components, Seam automatically forces replication to occur
            by calling <literal>setAttribute()</literal> once in every request, <emphasis>unless the (conversation-scoped) 
            entity is currently associated with a Seam-managed persistence context, in which case no replication is 
            needed</emphasis>. This strategy is not necessarily efficient, so session or conversation scope entity beans 
            should be used with care. You can always write a stateful session bean or JavaBean component to "manage" the 
            entity bean instance. For example, 
        </para>

        <programlisting><![CDATA[@Stateful
@Name("account")
public class AccountManager extends AbstractMutable
{
    private Account account; // an entity bean
    
    @Unwrap
    public void getAccount()
    {
        return account;
    }
    
    ...
    
}]]></programlisting>

        <para> 
            Note that the <literal>EntityHome</literal> class in the Seam Application Framework provides a great example 
            of managing an entity bean instance using a Seam component. 
        </para>

    </sect1>

    <sect1>
        <title>Factory and manager components</title>
        <para> 
            We often need to work with objects that are not Seam components. But we still want to be able to inject
            them into our components using <literal>@In</literal> and use them in value and method binding expressions,
            etc. Sometimes, we even need to tie them into the Seam context lifecycle (<literal>@Destroy</literal>, for
            example). So the Seam contexts can contain objects which are not Seam components, and Seam provides a couple
            of nice features that make it easier to work with non-component objects bound to contexts. 
        </para>

        <para> 
            The <emphasis>factory component pattern</emphasis> lets a Seam component act as the instantiator for a
            non-component object. A <emphasis>factory method</emphasis> will be called when a context variable is
            referenced but has no value bound to it. We define factory methods using the <literal>@Factory</literal>
            annotation. The factory method binds a value to the context variable, and determines the scope of the bound
            value. There are two styles of factory method. The first style returns a value, which is bound to the
            context by Seam:
        </para>

        <programlisting><![CDATA[@Factory(scope=CONVERSATION)
public List<Customer> getCustomerList() { 
    return ... ;
} ]]></programlisting>

        <para> 
            The second style is a method of type <literal>void</literal> which binds the value to the context
            variable itself: 
        </para>

        <programlisting><![CDATA[@DataModel List<Customer> customerList;

@Factory("customerList")
public void initCustomerList() { 
    customerList = ...  ;
} ]]></programlisting>

        <para> 
            In both cases, the factory method is called when we reference the <literal>customerList</literal> context
            variable and its value is null, and then has no further part to play in the lifecycle of the value. An even
            more powerful pattern is the <emphasis>manager component pattern</emphasis>. In this case, we have a Seam
            component that is bound to a context variable, that manages the value of the context variable, while
            remaining invisible to clients. 
        </para>

        <para> 
            A manager component is any component with an <literal>@Unwrap</literal> method. This method returns the
            value that will be visable to clients, and is called <emphasis>every time</emphasis> a context variable is
            referenced. 
        </para>
        


        <programlisting><![CDATA[@Name("customerList")
@Scope(CONVERSATION)
public class CustomerListManager
{
    ...
    
    @Unwrap
    public List<Customer> getCustomerList() { 
        return ... ;
    }
}]]></programlisting>

        <para> 
            The manager component pattern is especially useful if we have an object where you need more control over the 
            lifecycle of the component.  For example, if you have a heavyweight object that needs a cleanup operation when 
            the context ends you could <literal>@Unwrap</literal> the object, and perform cleanup in the 
            <literal>@Destroy</literal> method of the manager component.
        </para>
        
        <programlisting><![CDATA[@Name("hens")
@Scope(APPLICATION) 
public class HenHouse {
    
    Set<Hen> hens;
    
    @In(required=false) Hen hen;
    
    @Unwrap
    public List<Hen> getHens() {
        if (hens == null) {
            // Setup our hens
        }
        return hens;
    }
    
    @Observer({"chickBorn", "chickenBoughtAtMarket"})
    public addHen() {
        hens.add(hen);
    }
    
    @Observer("chickenSoldAtMarket")
    public removeHen() {
        hens.remove(hen);
    }
    
    @Observer("foxGetsIn")
    public removeAllHens() {
        hens.clear();
    }
    ...
}]]> </programlisting>

	<para>
		Here the managed component observes many events which change the underlying object. 
		The component manages these actions itself, and because the object is unwrapped
		on every access, a consistent view is provided.
	</para>

    </sect1>

</chapter>
    <chapter id="xml">

        <title>Configuring Seam components</title>
        
        <para> 
            The philosophy of minimizing XML-based configuration is extremely strong in Seam. Nevertheless,
            there are various reasons why we might want to configure a Seam component using XML: to isolate
            deployment-specific information from the Java code, to enable the creation of re-usable frameworks,
            to configure Seam's built-in functionality, etc.
            Seam provides two basic approaches to configuring components: configuration via property settings in a
            properties file or in <literal>web.xml</literal>, and configuration via <literal>components.xml</literal>. 
        </para>

        <sect1>
            <title>Configuring components via property settings</title>
            <para> 
                Seam components may be provided with configuration properties either via servlet context parameters,
                or via a properties file named <literal>seam.properties</literal> in the root of the classpath. 
            </para>
            <para> 
                The configurable Seam component must expose JavaBeans-style property setter methods for the
                configurable attributes. If a Seam component named <literal>com.jboss.myapp.settings</literal> has a
                setter method named <literal>setLocale()</literal>, we can provide a property named
                <literal>com.jboss.myapp.settings.locale</literal> in the <literal>seam.properties</literal> file or
                as a servlet context parameter, and Seam will set the value of the <literal>locale</literal> attribute
                whenever it instantiates the component. 
            </para>
            <para> 
                The same mechanism is used to configure Seam itself. For example, to set the conversation timeout, we
                provide a value for <literal>org.jboss.seam.core.manager.conversationTimeout</literal> in
                <literal>web.xml</literal> or <literal>seam.properties</literal>. (There is a built-in Seam
                component named <literal>org.jboss.seam.core.manager</literal> with a setter method named
                <literal>setConversationTimeout()</literal>.) 
            </para>
        </sect1>

        <sect1>
            <title>Configuring components via <literal>components.xml</literal></title>
            
            <para> 
                The <literal>components.xml</literal> file is a bit more powerful than property settings. It lets
                you: 
            </para>

            <itemizedlist>
                <listitem>
                    <para> Configure components that have been installed automatically—including both built-in
                        components, and application components that have been annotated with the
                        <literal>@Name</literal> annotation and picked up by Seam's deployment scanner. </para>
                </listitem>
                <listitem>
                    <para> Install classes with no <literal>@Name</literal> annotation as Seam components—this
                        is most useful for certain kinds of infrastructural components which can be installed multiple
                        times different names (for example Seam-managed persistence contexts). </para>
                </listitem>
                <listitem>
                    <para> Install components that <emphasis>do</emphasis> have a <literal>@Name</literal> annotation
                        but are not installed by default because of an <literal>@Install</literal> annotation that
                        indicates the component should not be installed. </para>
                </listitem>
                <listitem>
                    <para> Override the scope of a component. </para>
                </listitem>
            </itemizedlist>

            <para> 
                A <literal>components.xml</literal> file may appear in one of three different places: 
            </para>

            <itemizedlist>
                <listitem>
                    <para>The <literal>WEB-INF</literal> directory of a <literal>war</literal>.</para>
                </listitem>
                <listitem>
                    <para>The <literal>META-INF</literal> directory of a <literal>jar</literal>.</para>
                </listitem>
                <listitem>
                    <para>
                        Any directory of a <literal>jar</literal> that contains classes with an
                        <literal>@Name</literal> annotation.
                    </para>
                </listitem>
            </itemizedlist>

            <para> 
                Usually, Seam components are installed when the deployment scanner discovers a class with a
                <literal>@Name</literal> annotation sitting in an archive with a <literal>seam.properties</literal>
                file or a <literal>META-INF/components.xml</literal> file. (Unless the component has an 
                <literal>@Install</literal> annotation indicating it should not be installed by default.) 
                The <literal>components.xml</literal> file lets us handle special cases where we need
                to override the annotations. 
            </para>

            <para>
                For example, the following <literal>components.xml</literal> file installs jBPM: 
            </para>

            <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:bpm="http://jboss.com/products/seam/bpm">
    <bpm:jbpm/>
</components>]]></programlisting>

            <para>
                This example does the same thing:
            </para>

            <programlisting><![CDATA[<components>
    <component class="org.jboss.seam.bpm.Jbpm"/>
</components>]]></programlisting>

            <para>
                This one installs and configures two different Seam-managed persistence contexts:
            </para>

            <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components" 
            xmlns:persistence="http://jboss.com/products/seam/persistence"

    <persistence:managed-persistence-context name="customerDatabase"
                       persistence-unit-jndi-name="java:/customerEntityManagerFactory"/>
        
    <persistence:managed-persistence-context name="accountingDatabase"
                       persistence-unit-jndi-name="java:/accountingEntityManagerFactory"/>            

</components>]]></programlisting>

            <para>
                As does this one:
            </para>

            <programlisting><![CDATA[<components>
    <component name="customerDatabase" 
              class="org.jboss.seam.persistence.ManagedPersistenceContext">
        <property name="persistenceUnitJndiName">java:/customerEntityManagerFactory</property>
    </component>
    
    <component name="accountingDatabase"
              class="org.jboss.seam.persistence.ManagedPersistenceContext">
        <property name="persistenceUnitJndiName">java:/accountingEntityManagerFactory</property>
    </component>
</components>]]></programlisting>

            <para>
                This example creates a session-scoped Seam-managed persistence context (this is not recommended in
                practice):
            </para>

            <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components" 
            xmlns:persistence="http://jboss.com/products/seam/persistence"

  <persistence:managed-persistence-context name="productDatabase" 
                                          scope="session"
                     persistence-unit-jndi-name="java:/productEntityManagerFactory"/>        

</components>]]></programlisting>

            <programlisting><![CDATA[<components>
            
    <component name="productDatabase"
              scope="session"
              class="org.jboss.seam.persistence.ManagedPersistenceContext">
        <property name="persistenceUnitJndiName">java:/productEntityManagerFactory</property>
    </component>

</components>]]></programlisting>

            <para>
                It is common to use the <literal>auto-create</literal> option for infrastructural
                objects like persistence contexts, which saves you from having to explicitly
                specify <literal>create=true</literal> when you use the <literal>@In</literal>
                annotation.
            </para>

            <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components" 
            xmlns:persistence="http://jboss.com/products/seam/persistence"

  <persistence:managed-persistence-context name="productDatabase" 
                                    auto-create="true"
                     persistence-unit-jndi-name="java:/productEntityManagerFactory"/>        

</components>]]></programlisting>

            <programlisting><![CDATA[<components>
            
    <component name="productDatabase"
        auto-create="true"
              class="org.jboss.seam.persistence.ManagedPersistenceContext">
        <property name="persistenceUnitJndiName">java:/productEntityManagerFactory</property>
    </component>

</components>]]></programlisting>

            <para>
                The <literal>&lt;factory&gt;</literal> declaration lets you specify a value or method binding
                expression that will be evaluated to initialize the value of a context variable when it is first
                referenced.
            </para>

            <programlisting><![CDATA[<components>

    <factory name="contact" method="#{contactManager.loadContact}" scope="CONVERSATION"/>

</components>]]></programlisting>

            <para> 
                You can create an "alias" (a second name) for a Seam component like so: 
            </para>

            <programlisting><![CDATA[<components>

    <factory name="user" value="#{actor}" scope="STATELESS"/>

</components>]]></programlisting>

            <para> 
                You can even create an "alias" for a commonly used expression: 
            </para>

            <programlisting><![CDATA[<components>

    <factory name="contact" value="#{contactManager.contact}" scope="STATELESS"/>

</components>]]></programlisting>

            <para>
                It is especially common to see the use of <literal>auto-create="true"</literal> with the
                <literal>&lt;factory&gt;</literal> declaration:
            </para>

            <programlisting><![CDATA[<components>

    <factory name="session" value="#{entityManager.delegate}" scope="STATELESS" auto-create="true"/>

</components>]]></programlisting>

            <para> 
                Sometimes we want to reuse the same <literal>components.xml</literal> file with minor changes during
                both deployment and testing. Seam lets you place wildcards of the form <literal>@wildcard@</literal> in
                the <literal>components.xml</literal> file which can be replaced either by your Ant build script (at
                deployment time) or by providing a file named <literal>components.properties</literal> in the classpath
                (at development time). You'll see this approach used in the Seam examples. 
            </para>

        </sect1>

        <sect1>
            <title>Fine-grained configuration files</title>
            <para> 
                If you have a large number of components that need to be configured in XML, it makes much more sense
                to split up the information in <literal>components.xml</literal> into many small files. Seam lets
                you put configuration for a class named, for example, <literal>com.helloworld.Hello</literal> in a
                resource named <literal>com/helloworld/Hello.component.xml</literal>. (You might be familiar with this
                pattern, since it is the same one we use in Hibernate.) The root element of the file may be either a
                <literal>&lt;components&gt;</literal> or <literal>&lt;component&gt;</literal>
                element. </para>

            <para> 
                The first option lets you define multiple components in the file: 
            </para>

            <programlisting><![CDATA[<components>
    <component class="com.helloworld.Hello" name="hello">
        <property name="name">#{user.name}</property>
    </component>
    <factory name="message" value="#{hello.message}"/>
</components>]]></programlisting>

            <para> 
                The second option only lets you define or configure one component, but is less noisy: 
            </para>

            <programlisting><![CDATA[<component name="hello">
    <property name="name">#{user.name}</property>
</component>]]></programlisting>

            <para> 
                In the second option, the class name is implied by the file in which the component definition
                appears. 
            </para>

            <para> 
                Alternatively, you may put configuration for all classes in the <literal>com.helloworld</literal>
                package in <literal>com/helloworld/components.xml</literal>. 
            </para>
        </sect1>

        <sect1>
            <title>Configurable property types</title>
            <para> 
                Properties of string, primitive or primitive wrapper type may be configured just as you would expect: 
            </para>

            <programlisting><![CDATA[org.jboss.seam.core.manager.conversationTimeout 60000]]></programlisting>

            <programlisting><![CDATA[<core:manager conversation-timeout="60000"/>]]></programlisting>

            <programlisting><![CDATA[<component name="org.jboss.seam.core.manager">
    <property name="conversationTimeout">60000</property>
</component>]]></programlisting>

            <para> 
                Arrays, sets and lists of strings or primitives are also supported: 
            </para>

            <programlisting><![CDATA[org.jboss.seam.bpm.jbpm.processDefinitions order.jpdl.xml, return.jpdl.xml, inventory.jpdl.xml]]></programlisting>

            <programlisting><![CDATA[<bpm:jbpm>
    <bpm:process-definitions>
        <value>order.jpdl.xml</value>
        <value>return.jpdl.xml</value>
        <value>inventory.jpdl.xml</value>
    </bpm:process-definitions>
</bpm:jbpm>]]></programlisting>

            <programlisting><![CDATA[<component name="org.jboss.seam.bpm.jbpm">
    <property name="processDefinitions">
        <value>order.jpdl.xml</value>
        <value>return.jpdl.xml</value>
        <value>inventory.jpdl.xml</value>
    </property>
</component>]]></programlisting>

            <para> 
                Even maps with String-valued keys and string or primitive values are supported: 
            </para>

            <programlisting><![CDATA[<component name="issueEditor">
    <property name="issueStatuses">
        <key>open</key> <value>open issue</value>
        <key>resolved</key> <value>issue resolved by developer</value>
        <key>closed</key> <value>resolution accepted by user</value>
    </property>
</component>]]></programlisting>

            <para> 
                Finally, you may wire together components using a value-binding expression. Note that this is quite
                different to injection using <literal>@In</literal>, since it happens at component instantiation time
                instead of invocation time. It is therefore much more similar to the dependency injection facilities
                offered by traditional IoC containers like JSF or Spring. 
            </para>


            <programlisting><![CDATA[<drools:managed-working-memory name="policyPricingWorkingMemory" rule-base="#{policyPricingRules}"/>]]></programlisting>

            <programlisting><![CDATA[<component name="policyPricingWorkingMemory"
          class="org.jboss.seam.drools.ManagedWorkingMemory">
    <property name="ruleBase">#{policyPricingRules}</property>
</component>]]></programlisting>

        </sect1>

        <sect1>
            <title>Using XML Namespaces</title>
            <para> 
                Throughout the examples, there have been two competing ways of declaring components: with and without
                the use of XML namespaces. The following shows a typical <literal>components.xml</literal> file 
                without namespaces:
            </para>

            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<components xmlns="http://jboss.com/products/seam/components"
            xsi:schemaLocation="http://jboss.com/products/seam/components http://jboss.com/products/seam/components-2.1.xsd">

    <component class="org.jboss.seam.core.init">
        <property name="debug">true</property>
        <property name="jndiPattern">@jndiPattern@</property>
    </component>
    
</components>]]></programlisting>

            <para>
                As you can see, this is somewhat verbose. Even worse, the component and attribute names cannot be 
                validated at development time.
            </para>

            <para>The namespaced version looks like this:</para>

            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<components xmlns="http://jboss.com/products/seam/components"
            xmlns:core="http://jboss.com/products/seam/core"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation=
                "http://jboss.com/products/seam/core http://jboss.com/products/seam/core-2.1.xsd 
                 http://jboss.com/products/seam/components http://jboss.com/products/seam/components-2.1.xsd">

    <core:init debug="true" jndi-pattern="@jndiPattern@"/>

</components>]]></programlisting>

            <para>
                Even though the schema declarations are verbose, the actual XML content is lean and easy to understand.
                The schemas provide detailed information about each component and the attributes available, allowing XML
                editors to offer intelligent autocomplete. The use of namespaced elements makes generating and
                maintaining correct <literal>components.xml</literal> files much simpler.
            </para>

            <para> 
                Now, this works great for the built-in Seam components, but what about user components? There are two options. 
                First, Seam supports mixing the two models, allowing the use of the generic <literal>&lt;component&gt;</literal> 
                declarations for user components, along with namespaced declarations for built-in components. But even better,
                Seam allows you to quickly declare namespaces for your own components.
            </para>

            <para>
                Any Java package can be associated with an XML namespace by annotating the package with the 
                <literal>@Namespace</literal> annotation. (Package-level annotations are declared in a file named
                <literal>package-info.java</literal> in the package directory.) Here is an example from the seampay demo:
            </para>

            <programlisting>@Namespace(value="http://jboss.com/products/seam/examples/seampay")
package org.jboss.seam.example.seampay;

import org.jboss.seam.annotations.Namespace;</programlisting>

            <para>
                That is all you need to do to use the namespaced style in <literal>components.xml</literal>!
                Now we can write:
            </para>

            <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
            xmlns:pay="http://jboss.com/products/seam/examples/seampay"
            ... >

    <pay:payment-home new-instance="#{newPayment}"
                      created-message="Created a new payment to #{newPayment.payee}" />

    <pay:payment name="newPayment"
                 payee="Somebody"
                 account="#{selectedAccount}"
                 payment-date="#{currentDatetime}"
                 created-date="#{currentDatetime}" />
     ...
</components>]]></programlisting>

            <para>Or:</para>

            <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
            xmlns:pay="http://jboss.com/products/seam/examples/seampay"
            ... >

    <pay:payment-home>
        <pay:new-instance>"#{newPayment}"</pay:new-instance>
        <pay:created-message>Created a new payment to #{newPayment.payee}</pay:created-message>
    </pay:payment-home>
    
    <pay:payment name="newPayment">
        <pay:payee>Somebody"</pay:payee>
        <pay:account>#{selectedAccount}</pay:account>
        <pay:payment-date>#{currentDatetime}</pay:payment-date>
        <pay:created-date>#{currentDatetime}</pay:created-date>
     </pay:payment>
     ...
</components>]]></programlisting>

            <para>
                These examples illustrate the two usage models of a namespaced element. In the first declaration, 
                the <literal>&lt;pay:payment-home&gt;</literal> references the <literal>paymentHome</literal>
                component:
            </para>

            <programlisting><![CDATA[package org.jboss.seam.example.seampay;
...
@Name("paymentHome")
public class PaymentController
    extends EntityHome<Payment>
{
    ... 
}]]></programlisting>

            <para>
                The element name is the hyphenated form of the component name. The attributes of the element are
                the hyphenated form of the property names.
            </para>

            <para>
                In the second declaration, the <literal>&lt;pay:payment&gt;</literal> element refers to the 
                <literal>Payment</literal> class in the <literal>org.jboss.seam.example.seampay</literal> package. 
                In this case <literal>Payment</literal> is an entity that is being declared as a Seam component:
            </para>

            <programlisting><![CDATA[package org.jboss.seam.example.seampay;
...
@Entity
public class Payment
    implements Serializable
{
    ...
}]]></programlisting>
            
            <para>
                If we want validation and autocompletion to work for user-defined components, we will need a schema.
                Seam does not yet provide a mechanism to automatically generate a schema for a set of components, so
                it is necessary to generate one manually. The schema definitions for the standard Seam packages can 
                be used for guidance.   
            </para>

            <para>The following are the the namespaces used by Seam:</para>
            
            <itemizedlist>
                <listitem>
                    <para>components — <literal>http://jboss.com/products/seam/components</literal></para>
                </listitem>
                <listitem>
                    <para>core — <literal>http://jboss.com/products/seam/core</literal></para>
                </listitem>
                <listitem>
                    <para>drools — <literal>http://jboss.com/products/seam/drools</literal></para>
                </listitem>
                <listitem>
                    <para>framework — <literal>http://jboss.com/products/seam/framework</literal></para>
                </listitem>
                <listitem>
                    <para>jms — <literal>http://jboss.com/products/seam/jms</literal></para>
                </listitem>
                <listitem>
                    <para>remoting — <literal>http://jboss.com/products/seam/remoting</literal></para>
                </listitem>
                <listitem>
                    <para>theme — <literal>http://jboss.com/products/seam/theme</literal></para>
                </listitem>
                <listitem>
                    <para>security — <literal>http://jboss.com/products/seam/security</literal></para>
                </listitem>
                <listitem>
                    <para>mail — <literal>http://jboss.com/products/seam/mail</literal></para>
                </listitem>
                <listitem>
                    <para>web — <literal>http://jboss.com/products/seam/web</literal></para>
                </listitem>                
                <listitem>
                    <para>pdf — <literal>http://jboss.com/products/seam/pdf</literal></para>
                </listitem>
                <listitem>                    
                    <para> spring — <literal>http://jboss.com/products/seam/spring</literal></para>
                </listitem>
                
            </itemizedlist>
            
        </sect1>


</chapter>
    <chapter id="events">
    <title>Events, interceptors and exception handling</title>

    <para>
        Complementing the contextual component model, there are two further basic concepts
        that facilitate the extreme loose-coupling that is the distinctive feature of Seam 
        applications. The first is a strong event model where events may be mapped to event 
        listeners via JSF-like method binding expressions. The second is the pervasive use 
        of annotations and interceptors to apply cross-cutting concerns to components which 
        implement business logic.
    </para>

    <section>
        <title>Seam events</title>
        <para>
            The Seam component model was developed for use with <emphasis>event-driven 
            applications</emphasis>, specifically to enable the development of fine-grained, 
            loosely-coupled components in a fine-grained eventing model. Events in Seam come
            in several types, most of which we have already seen:
        </para>
        
        <itemizedlist>
            <listitem>
                <para>JSF events</para>
            </listitem>
            <listitem>
                <para>jBPM transition events</para>
            </listitem>
            <listitem>
                <para>Seam page actions</para>
            </listitem>
            <listitem>
                <para>Seam component-driven events</para>
            </listitem>
            <listitem>
                <para>Seam contextual events</para>
            </listitem>
        </itemizedlist>
        
        <para>
            All of these various kinds of events are mapped to Seam components via JSF EL
            method binding expressions. For a JSF event, this is defined in the JSF template:
        
        
        <programlisting><![CDATA[<h:commandButton value="Click me!" action="#{helloWorld.sayHello}"/>]]></programlisting>
        
</para>

        <para>
            For a jBPM transition event, it is specified in the jBPM process definition or
            pageflow definition:
        
        <programlisting><![CDATA[<start-page name="hello" view-id="/hello.jsp">
    <transition to="hello">
        <action expression="#{helloWorld.sayHello}"/>
    </transition>
</start-page>]]></programlisting>
</para>
        <para>
            You can find out more information about JSF events and jBPM events elsewhere. 
            Let's concentrate for now upon the two additional kinds of events defined by Seam.
    </para>
</section>

        <section>
            <title>Page actions</title>

        <para>
            A Seam page action is an event that occurs just before we render a page. 
            We declare page actions in <literal>WEB-INF/pages.xml</literal>. We
            can define a page action for either a particular JSF view id:
       
        <programlisting><![CDATA[<pages>
    <page view-id="/hello.jsp" action="#{helloWorld.sayHello}"/>
</pages>]]></programlisting>
</para>
        <para>
            Or we can use a <literal>*</literal> wildcard as a suffix to the
            <literal>view-id</literal> to specify an action that applies to all 
            view ids that match the pattern:
       
        <programlisting><![CDATA[<pages>
    <page view-id="/hello/*" action="#{helloWorld.sayHello}"/>
</pages>]]></programlisting>
</para>
        <para>
            If multiple wildcarded page actions match the current view-id, Seam
            will call all the actions, in order of least-specific to most-specific.
        </para>

        <para>
            The page action method can return a JSF outcome. If the outcome is
            non-null, Seam will use the defined navigation rules to navigate to a view.
        </para>
        
        <para>
            Furthermore, the view id mentioned in the <literal>&lt;page&gt;</literal>
            element need not correspond to a real JSP or Facelets page! So, we can
            reproduce the functionality of a traditional action-oriented framework
            like Struts or WebWork using page actions. For example:
        
        <programlisting><![CDATA[TODO: translate struts action into page action]]></programlisting>
</para> 

        <para>
            This is quite useful if you want to do complex things in response to non-faces
            requests (for example, HTTP GET requests).
        </para>
        
        <para>
            Multiple or conditional page actions my be specified using the <literal>&lt;action&gt;</literal>
            tag:
        
        <programlisting><![CDATA[<pages>
    <page view-id="/hello.jsp">
        <action execute="#{helloWorld.sayHello}" if="#{not validation.failed}"/>
        <action execute="#{hitCount.increment}"/>
    </page>
</pages>]]></programlisting>
</para>

</section>
	
        <section>
            <title>Page parameters</title>
            
            <para>
                A JSF faces request (a form submission) encapsulates both an "action"
                (a method binding) and "parameters" (input value bindings). A page 
                action might also needs parameters!
            </para>
            
            <para>
                Since GET requests are bookmarkable, page parameters are passed as 
                human-readable request parameters. (Unlike JSF form inputs, which are
                anything but!) 
            </para>
            
            <para>
                You can use page parameters with or without an action method.
            </para>
            
            <section>
                <title>Mapping request parameters to the model</title>
            
              <para>
                  Seam lets us provide a value binding that maps a named request parameter 
                  to an attribute of a model object.
              
          <programlisting><![CDATA[<pages>
      <page view-id="/hello.jsp" action="#{helloWorld.sayHello}">
          <param name="firstName" value="#{person.firstName}"/>
          <param name="lastName" value="#{person.lastName}"/>
      </page>
  </pages>]]></programlisting>
</para>
              <para>
                  The <literal>&lt;param&gt;</literal> declaration is bidirectional, just
                  like a value binding for a JSF input:
              
              <itemizedlist>
                  <listitem>
                      <para>
                          When a non-faces (GET) request for the view id occurs, Seam sets 
                          the value of the named request parameter onto the model object, 
                          after performing appropriate type conversions.
                      </para>
                  </listitem>
                  <listitem>
                      <para>
                          Any <literal>&lt;s:link&gt;</literal> or <literal>&lt;s:button&gt;</literal> 
                          transparently includes the request parameter. The value of the parameter is 
                          determined by evaluating the value binding during the render phase (when the 
                          <literal>&lt;s:link&gt;</literal> is rendered).
                      </para>
                  </listitem>
                  <listitem>
                      <para>
                          Any navigation rule with a <literal>&lt;redirect/&gt;</literal> to
                          the view id transparently includes the request parameter. The value 
                          of the parameter is determined by evaluating the value binding at
                          the end of the invoke application phase.
                      </para>
                  </listitem>
                  <listitem>
                      <para>
                          The value is transparently propagated with any JSF form submission
                          for the page with the given view id. This means that view parameters
                          behave like <literal>PAGE</literal>-scoped context variables for
                          faces requests.
                      </para>
                  </listitem>
              </itemizedlist>
      </para>
              <para>
                  The essential idea behind all this is that <emphasis>however</emphasis>
                  we get from any other page to <literal>/hello.jsp</literal> (or from 
                  <literal>/hello.jsp</literal> back to <literal>/hello.jsp</literal>), 
                  the value of the model attribute referred to in the value binding is
                  "remembered", without the need for a conversation (or other server-side
                  state).
              </para>

            </section>
    </section>
    
            <section>
                <title>Propagating request parameters</title>
                
                <para>
                    If just the <literal>name</literal> attribute is specified then the
                    request parameter is propagated using the <literal>PAGE</literal> context
                    (it isn't mapped to model property).
       
              
          <programlisting><![CDATA[<pages>
      <page view-id="/hello.jsp" action="#{helloWorld.sayHello}">
          <param name="firstName" />
          <param name="lastName" />
      </page>
  </pages>]]></programlisting>
  
</para>
		<para>
                  Propagation of page parameters is especially useful if you want to build multi-layer 
                  master-detail CRUD pages.  You can use it to "remember" which view you were previously
                  on (e.g. when pressing the Save button), and which entity you were editing.
             
               <itemizedlist>
                  <listitem>
                      <para>
                          Any <literal>&lt;s:link&gt;</literal> or <literal>&lt;s:button&gt;</literal> 
                          transparently propagates the request parameter if that parameter is listed
                          as a page parameter for the view.
                      </para>
                  </listitem>
                  <listitem>
                      <para>
                          The value is transparently propagated with any JSF form submission
                          for the page with the given view id. (This means that view parameters
                          behave like <literal>PAGE</literal>-scoped context variables for
                          faces requests.
                      </para>
                  </listitem>
              </itemizedlist>
      </para>
	      
      <para>
	      This all sounds pretty complex, and you're probably wondering if such an
	      exotic construct is really worth the effort. Actually, the idea is very
	      natural once you "get it". It is definitely worth taking the time to 
	      understand this stuff. Page parameters are the most elegant way to 
	      propagate state across a non-faces request. They are especially cool for 
	      problems like search screens with bookmarkable results pages, where we 
	      would like to be able to write our application code to handle both POST 
	      and GET requests with the same code. Page parameters eliminate repetitive 
	      listing of request parameters in the view definition and make redirects
	      much easier to code.
      </para>
        
            </section>
            
            
            <section>
                <title>Conversion and Validation</title>

            <para>
                You can specify a JSF converter for complex model propreties:

            <programlisting><![CDATA[<pages>
    <page view-id="/calculator.jsp" action="#{calculator.calculate}">
        <param name="x" value="#{calculator.lhs}"/>
        <param name="y" value="#{calculator.rhs}"/>
        <param name="op" converterId="com.my.calculator.OperatorConverter" value="#{calculator.op}"/>
    </page>
</pages>]]></programlisting>
 
</para>
            <para>
                Alternatively:
       
            <programlisting><![CDATA[<pages>
    <page view-id="/calculator.jsp" action="#{calculator.calculate}">
        <param name="x" value="#{calculator.lhs}"/>
        <param name="y" value="#{calculator.rhs}"/>
        <param name="op" converter="#{operatorConverter}" value="#{calculator.op}"/>
    </page>
</pages>]]></programlisting>

</para>
            <para>
                JSF validators, and <literal>required="true"</literal> may
                also be used:
       
            <programlisting><![CDATA[<pages>
    <page view-id="/blog.xhtml">
        <param name="date" 
               value="#{blog.date}" 
               validatorId="com.my.blog.PastDate" 
               required="true"/>
    </page>
</pages>]]></programlisting>

</para>
            <para>
                Alternatively:
  
            <programlisting><![CDATA[<pages>
    <page view-id="/blog.xhtml">
        <param name="date" 
               value="#{blog.date}" 
               validator="#{pastDateValidator}" 
               required="true"/>
    </page>
</pages>]]></programlisting>

</para>
            <para>
                Even better, model-based Hibernate validator annotations are automatically
                recognized and validated.
            </para>

            <para>
                When type conversion or validation fails, a global <literal>FacesMessage</literal>
                is added to the <literal>FacesContext</literal>.
            </para>

            </section>

        <section id="events.pageaction.navigation">
            <title>Navigation</title>
            
            <para>
                You can use standard JSF navigation rules defined in <literal>faces-config.xml</literal>
                in a Seam application. However, JSF navigation rules have a number of annoying
                limitations:
            </para>
            
            <itemizedlist>
                <listitem>
                    <para>
                        It is not possible to specify request parameters to be used when redirecting.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        It is not possible to begin or end conversations from a rule.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Rules work by evaluating the return value of the action method; it is not
                        possible to evaluate an arbitrary EL expression.
                    </para>
                </listitem>
            </itemizedlist>
            
            <para>
                A further problem is that "orchestration" logic gets scattered between <literal>pages.xml</literal>
                and <literal>faces-config.xml</literal>. It's better to unify this logic into <literal>pages.xml</literal>.
            </para>
            
            <para>
                This JSF navigation rule:
            </para>
            
            <programlisting><![CDATA[<navigation-rule>
    <from-view-id>/editDocument.xhtml</from-view-id>
    
    <navigation-case>
        <from-action>#{documentEditor.update}</from-action>
        <from-outcome>success</from-outcome>
        <to-view-id>/viewDocument.xhtml</to-view-id>
        <redirect/>
    </navigation-case>
    
</navigation-rule>]]></programlisting>
        
            <para>
                Can be rewritten as follows:
            </para>
            
            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">
    
    <navigation from-action="#{documentEditor.update}">
        <rule if-outcome="success">
            <redirect view-id="/viewDocument.xhtml"/>
        </rule>
    </navigation>
    
</page>]]></programlisting>
        
            <para>
                But it would be even nicer if we didn't have to pollute our <literal>DocumentEditor</literal> 
                component with string-valued return values (the JSF outcomes). So Seam lets us write:
            </para>
        
            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">
    
    <navigation from-action="#{documentEditor.update}" 
                   evaluate="#{documentEditor.errors.size}">
        <rule if-outcome="0">
            <redirect view-id="/viewDocument.xhtml"/>
        </rule>
    </navigation>
    
</page>]]></programlisting>

            <para>
                Or even:
            </para>
        
            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">
    
    <navigation from-action="#{documentEditor.update}">
        <rule if="#{documentEditor.errors.empty}">
            <redirect view-id="/viewDocument.xhtml"/>
        </rule>
    </navigation>
    
</page>]]></programlisting>

            <para>
                The first form evaluates a value binding to determine the outcome value
                to be used by the subsequent rules.
                The second approach ignores the outcome and evaluates a value binding
                for each possible rule.
            </para>
            
            <para>
                Of course, when an update succeeds, we probably want to end the current
                conversation. We can do that like this:
            </para>

            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">
    
    <navigation from-action="#{documentEditor.update}">
        <rule if="#{documentEditor.errors.empty}">
            <end-conversation/>
            <redirect view-id="/viewDocument.xhtml"/>
        </rule>
    </navigation>
    
</page>]]></programlisting>

            <para>
                As we've ended conversation any subsequent requests won't know
                which document we are interested in.  We can pass the document 
                id as a request parameter which also makes the view bookmarkable:
            </para>

            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">
    
    <navigation from-action="#{documentEditor.update}">
        <rule if="#{documentEditor.errors.empty}">
            <end-conversation/>
            <redirect view-id="/viewDocument.xhtml">
                <param name="documentId" value="#{documentEditor.documentId}"/>
            </redirect>
        </rule>
    </navigation>
    
</page>]]></programlisting>

            <para>
                Null outcomes are a special case in JSF. The null outcome is interpreted to
                mean "redisplay the page". The following navigation rule matches any non-null
                outcome, but <emphasis>not</emphasis> the null outcome:
            </para>
            
            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">
    
    <navigation from-action="#{documentEditor.update}">
        <rule>
            <render view-id="/viewDocument.xhtml"/>
        </rule>
    </navigation>
    
</page>]]></programlisting>

            <para>
                If you want to perform navigation when a null outcome occurs, use the
                following form instead:
            </para>
            
            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">
    
    <navigation from-action="#{documentEditor.update}">
        <render view-id="/viewDocument.xhtml"/>
    </navigation>
    
</page>]]></programlisting>

            <para>
                The view-id may be given as a JSF EL expression:
            </para>
            
            <programlisting><![CDATA[<page view-id="/editDocument.xhtml">

    <navigation>
        <rule if-outcome="success">
            <redirect view-id="/#{userAgent}/displayDocument.xhtml"/>
        </rule>
    </navigation>
    
</page>]]></programlisting>

        </section>

        <section>
            <title>Fine-grained files for definition of navigation, page actions and parameters</title>
            
            <para>
                If you have a lot of different page actions and page parameters,
                or even just a lot of navigation rules,
                you will almost certainly want to split the declarations up over
                multiple files. You can define actions and parameters for a page
                with the view id <literal>/calc/calculator.jsp</literal> in a 
                resource named <literal>calc/calculator.page.xml</literal>. The
                root element in this case is the <literal>&lt;page&gt;</literal>
                element, and the view id is implied:
            </para>
            
            <programlisting><![CDATA[<page action="#{calculator.calculate}">
    <param name="x" value="#{calculator.lhs}"/>
    <param name="y" value="#{calculator.rhs}"/>
    <param name="op" converter="#{operatorConverter}" value="#{calculator.op}"/>
</page>]]></programlisting>

        </section>
        
        
        
        <section>
            <title>Component-driven events</title>
            
            <para>
                Seam components can interact by simply calling each others methods.
                Stateful components may even implement the observer/observable pattern.
                But to enable components to interact in a more loosely-coupled fashion
                than is possible when the components call each others methods directly,
                Seam provides <emphasis>component-driven events</emphasis>.
            </para>
            
            <para>
                We specify event listeners (observers) in <literal>components.xml</literal>.
            </para>
            
        <programlisting><![CDATA[<components>
    <event type="hello">
        <action execute="#{helloListener.sayHelloBack}"/>
        <action execute="#{logger.logHello}"/>
    </event>
</components>]]></programlisting>

            <para>
                Where the <emphasis>event type</emphasis> is just an arbitrary string.
            </para>
            
            <para>
                When an event occurs, the actions registered for that event will be called
                in the order they appear in <literal>components.xml</literal>. How does a
                component raise an event? Seam provides a built-in component for this.
            </para>
            
            <programlisting><![CDATA[@Name("helloWorld")
public class HelloWorld {
    public void sayHello() {
        FacesMessages.instance().add("Hello World!");
        Events.instance().raiseEvent("hello");
    }
}]]></programlisting>

            <para>
                Or you can use an annotation.
            </para>

            <programlisting><![CDATA[@Name("helloWorld")
public class HelloWorld {
    @RaiseEvent("hello")
    public void sayHello() {
        FacesMessages.instance().add("Hello World!");
    }
}]]></programlisting>

            <para>
                Notice that this event producer has no dependency upon event consumers.
                The event listener may now be implemented with absolutely no dependency
                upon the producer:
            </para>

            <programlisting><![CDATA[@Name("helloListener")
public class HelloListener {
    public void sayHelloBack() {
        FacesMessages.instance().add("Hello to you too!");
    }
}]]></programlisting>

            <para>
                The method binding defined in <literal>components.xml</literal> above 
                takes care of mapping the event to the consumer.
                If you don't like futzing about in the <literal>components.xml</literal> 
                file, you can use an annotation instead:
            </para>

            <programlisting><![CDATA[@Name("helloListener")
public class HelloListener {
    @Observer("hello")
    public void sayHelloBack() {
        FacesMessages.instance().add("Hello to you too!");
    }
}]]></programlisting>

            <para>
                You might wonder why I've not mentioned anything about event objects in
                this discussion. In Seam, there is no need for an event object to propagate
                state between event producer and listener. State is held in the Seam
                contexts, and is shared between components. However, if you really want
                to pass an event object, you can:
            </para>
            
            <programlisting><![CDATA[@Name("helloWorld")
public class HelloWorld {
    private String name;
    public void sayHello() {
        FacesMessages.instance().add("Hello World, my name is #0.", name);
        Events.instance().raiseEvent("hello", name);
    }
}]]></programlisting>

            <programlisting><![CDATA[@Name("helloListener")
public class HelloListener {
    @Observer("hello")
    public void sayHelloBack(String name) {
        FacesMessages.instance().add("Hello #0!", name);
    }
}]]></programlisting>

        </section>
        
        <section>
            <title>Contextual events</title>
            <para>
                Seam defines a number of built-in events that the application can use to
                perform special kinds of framework integration. The events are:
            </para>
            
            <itemizedlist>
            <listitem><para><literal>org.jboss.seam.validationFailed</literal> — called when JSF validation fails</para></listitem>
            <listitem><para><literal>org.jboss.seam.noConversation</literal> — called when there is no long running conversation and a long running conversation is required</para></listitem>
            <listitem><para><literal>org.jboss.seam.preSetVariable.&lt;name&gt;</literal> — called when the context variable &lt;name&gt; is set</para></listitem>
            <listitem><para><literal>org.jboss.seam.postSetVariable.&lt;name&gt;</literal> — called when the context variable &lt;name&gt; is set</para></listitem>
            <listitem><para><literal>org.jboss.seam.preRemoveVariable.&lt;name&gt;</literal> — called when the context variable &lt;name&gt; is unset</para></listitem>
            <listitem><para><literal>org.jboss.seam.postRemoveVariable.&lt;name&gt;</literal> — called when the context variable &lt;name&gt; is unset</para></listitem>
            <listitem><para><literal>org.jboss.seam.preDestroyContext.&lt;SCOPE&gt;</literal> — called before the &lt;SCOPE&gt; context is destroyed</para></listitem>
            <listitem><para><literal>org.jboss.seam.postDestroyContext.&lt;SCOPE&gt;</literal> — called after the &lt;SCOPE&gt; context is destroyed</para></listitem>
            <listitem><para><literal>org.jboss.seam.beginConversation </literal>— called whenever a long-running conversation begins</para></listitem>
            <listitem><para><literal>org.jboss.seam.endConversation </literal>— called whenever a long-running conversation ends</para></listitem>
            <listitem><para><literal>org.jboss.seam.conversationTimeout</literal>— called when a conversation timeout occurs. The conversation id is passed as a parameter.</para></listitem>
            <listitem><para><literal>org.jboss.seam.beginPageflow.&lt;name&gt; </literal>— called when the pageflow &lt;name&gt; begins</para></listitem>
            <listitem><para><literal>org.jboss.seam.endPageflow.&lt;name&gt; </literal>— called when the pageflow &lt;name&gt; ends</para></listitem>
            <listitem><para><literal>org.jboss.seam.createProcess.&lt;name&gt; </literal>— called when the process &lt;name&gt; is created</para></listitem>
            <listitem><para><literal>org.jboss.seam.endProcess.&lt;name&gt; </literal>— called when the process &lt;name&gt; ends</para></listitem>
            <listitem><para><literal>org.jboss.seam.initProcess.&lt;name&gt; </literal>— called when the process &lt;name&gt; is associated with the conversation</para></listitem>
            <listitem><para><literal>org.jboss.seam.initTask.&lt;name&gt; </literal>— called when the task &lt;name&gt; is associated with the conversation</para></listitem>
            <listitem><para><literal>org.jboss.seam.startTask.&lt;name&gt; </literal>— called when the task &lt;name&gt; is started</para></listitem>
            <listitem><para><literal>org.jboss.seam.endTask.&lt;name&gt; </literal>— called when the task &lt;name&gt; is ended</para></listitem>
            <listitem><para><literal>org.jboss.seam.postCreate.&lt;name&gt; </literal>— called when the component &lt;name&gt; is created</para></listitem>
            <listitem><para><literal>org.jboss.seam.preDestroy.&lt;name&gt; </literal>— called when the component &lt;name&gt; is destroyed</para></listitem>
            <listitem><para><literal>org.jboss.seam.beforePhase </literal>— called before the start of a JSF phase</para></listitem>
            <listitem><para><literal>org.jboss.seam.afterPhase </literal>— called after the end of a JSF phase</para></listitem>
            <listitem><para><literal>org.jboss.seam.postInitialization </literal>— called when Seam has initialized and started up all components</para></listitem>
            <listitem><para><literal>org.jboss.seam.postAuthenticate.&lt;name&gt; </literal>— called after a user is authenticated</para></listitem>
            <listitem><para><literal>org.jboss.seam.preAuthenticate.&lt;name&gt; </literal>— called before attempting to authenticate a user</para></listitem>
            <listitem><para><literal>org.jboss.seam.notLoggedIn</literal> — called there is no authenticated user and authentication is required</para></listitem>
            <listitem><para><literal>org.jboss.seam.rememberMe</literal> — occurs when Seam security detects the username in a cookie</para></listitem>
            <listitem><para><literal>org.jboss.seam.exceptionHandled.&lt;type&gt;</literal> — called when an uncaught exception is handled by Seam</para></listitem>
            <listitem><para><literal>org.jboss.seam.exceptionHandled</literal> — called when an uncaught exception is handled by Seam</para></listitem>
            <listitem><para><literal>org.jboss.seam.exceptionNotHandled</literal> — called when there was no handler for an uncaught exception</para></listitem>
            <listitem><para><literal>org.jboss.seam.afterTransactionSuccess</literal> — called when a transaction succeeds in the Seam Application Framework</para></listitem>
            <listitem><para><literal>org.jboss.seam.afterTransactionSuccess.&lt;name&gt;</literal> — called when a transaction succeeds in the Seam Application Framework which manages an entity called <literal>&lt;name&gt;</literal></para></listitem>
            </itemizedlist>
             
             <para>
                 Seam components may observe any of these events in just the same way they
                 observe any other component-driven events.
             </para>
        </section>
        
   
    
    <section>
      <title>Seam interceptors</title>
      
      <para>
        EJB 3.0 introduced a standard interceptor model for session bean components. To add an
        interceptor to a bean, you need to write a class with a method annotated 
        <literal>@AroundInvoke</literal> and annotate the bean with an
        <literal>@Interceptors</literal> annotation that specifies the name of the interceptor
        class. For example, the following interceptor checks that the user is logged in before
        allowing invoking an action listener method:
      </para>
      
      <programlisting><![CDATA[public class LoggedInInterceptor {

   @AroundInvoke
   public Object checkLoggedIn(InvocationContext invocation) throws Exception {
   
      boolean isLoggedIn = Contexts.getSessionContext().get("loggedIn")!=null;
      if (isLoggedIn) {
         //the user is already logged in
         return invocation.proceed();
      }
      else {
         //the user is not logged in, fwd to login page
         return "login";
      }
   }

}]]></programlisting>

    <para>
        To apply this interceptor to a session bean which acts as an action listener, we must
        annotate the session bean <literal>@Interceptors(LoggedInInterceptor.class)</literal>.
        This is a somewhat ugly annotation. Seam builds upon the interceptor framework in
        EJB3 by allowing you to use <literal>@Interceptors</literal> as a meta-annotation for class
        level interceptors (those annotated <literal>@Target(TYPE)</literal>). In
        our example, we would create an <literal>@LoggedIn</literal> annotation, as follows:
    </para>
      
      <programlisting><![CDATA[@Target(TYPE)
@Retention(RUNTIME)
@Interceptors(LoggedInInterceptor.class)
public @interface LoggedIn {}]]></programlisting>

        <para>
            We can now simply annotate our action listener bean with <literal>@LoggedIn</literal>
            to apply the interceptor.
        </para>
        
        <programlisting><![CDATA[@Stateless
@Name("changePasswordAction")
@LoggedIn
@Interceptors(SeamInterceptor.class)
public class ChangePasswordAction implements ChangePassword { 
    
    ...
    
    public String changePassword() { ... }
    
}]]></programlisting>

        <para>
            If interceptor ordering is important (it usually is), you can add
            <literal>@Interceptor</literal> annotations to your interceptor 
            classes to specify a partial order of interceptors.
        </para>
        
<programlisting><![CDATA[@Interceptor(around={BijectionInterceptor.class,
                     ValidationInterceptor.class,
                     ConversationInterceptor.class},
             within=RemoveInterceptor.class)
public class LoggedInInterceptor
{
    ...
}]]></programlisting>

        <para>
            You can even have a "client-side" interceptor, that runs around any of the built-in
            functionality of EJB3:
        </para>

<programlisting><![CDATA[@Interceptor(type=CLIENT)
public class LoggedInInterceptor
{
    ...
}]]></programlisting>

        <para>
            EJB interceptors are stateful, with a lifecycle that is the same as the component
            they intercept. For interceptors which do not need to maintain state, Seam lets
            you get a performance optimization by specifying 
            <literal>@Interceptor(stateless=true)</literal>.
        </para>

        <para>
            Much of the functionality of Seam is implemented as a set of built-in Seam interceptors,
            including the interceptors named in the previous example. You don't have to explicitly 
            specify these interceptors by annotating your components; they exist for all interceptable 
            Seam components.
        </para>
        
        <para>
            You can even use Seam interceptors with JavaBean components, not just EJB3 beans!
        </para>
        
        <para>
            EJB defines interception not only for business methods (using <literal>@AroundInvoke</literal>),
            but also for the lifecycle methods <literal>@PostConstruct</literal>, <literal>@PreDestroy</literal>,
            <literal>@PrePassivate</literal> and <literal>@PostActive</literal>. Seam supports all these
            lifecycle methods on both component and interceptor not only for EJB3 beans, but also for
            JavaBean components (except <literal>@PreDestroy</literal> which is not meaningful for JavaBean
            components).
        </para>

    </section>
      
    <section>
        <title>Managing exceptions</title>
        
        <para>
            JSF is surprisingly limited when it comes to exception handling. As a partial 
            workaround for this problem, Seam lets you define how a particular class of 
            exception is to be treated by annotating the exception class, or declaring
            the exception class in an XML file. This facility is meant to be combined with 
            the EJB 3.0-standard <literal>@ApplicationException</literal> annotation which 
            specifies whether the exception should cause a transaction rollback.
        </para>
        
        <section>
            <title>Exceptions and transactions</title>
            
            <para>
                EJB specifies well-defined rules that let us control whether an exception 
                immediately marks the current transaction for rollback when it is thrown by 
                a business method of the bean: <emphasis>system exceptions</emphasis> always 
                cause a transaction rollback, <emphasis>application exceptions</emphasis> do 
                not cause a rollback by default, but they do if 
                <literal>@ApplicationException(rollback=true)</literal>
                is specified. (An application exception is any checked exception, or any
                unchecked exception annotated <literal>@ApplicationException</literal>.
                A system exception is any unchecked exception without an 
                <literal>@ApplicationException</literal> annotation.)
            </para>
            
            <para>
                Note that there is a difference between marking a transaction for rollback,
                and actually rolling it back. The exception rules say that the transaction
                should be marked rollback only, but it may still be active after the 
                exception is thrown.
            </para>
        
            <para>
                Seam applies the EJB 3.0 exception rollback rules also to Seam JavaBean 
                components.
            </para>
        
            <para>
                But these rules only apply in the Seam component layer. What about an exception 
                that is uncaught and propagates out of the Seam component layer, and out of the JSF 
                layer? Well, it is always wrong to leave a dangling transaction open, so Seam
                rolls back any active transaction when an exception occurs and is uncaught
                in the Seam component layer.
            </para>
        </section>
        
        <section>
            <title>Enabling Seam exception handling</title>
        
        <para>
            To enable Seam's exception handling, we need to make sure we have the master servlet 
            filter declared in <literal>web.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<filter>
    <filter-name>Seam Filter</filter-name>
    <filter-class>org.jboss.seam.servlet.SeamFilter</filter-class>
</filter>

<filter-mapping>
    <filter-name>Seam Filter</filter-name>
    <url-pattern>*.seam</url-pattern>
</filter-mapping>]]></programlisting>

        <para>
            You may also need to disable Facelets development mode in <literal>web.xml</literal> and
            Seam debug mode in <literal>components.xml</literal> if you want your exception handlers
            to fire.
        </para>

        </section>
        
        <section>
            <title>Using annotations for exception handling</title>
            
        <para>
            The following exception results in a HTTP 404 error whenever it propagates out of the
            Seam component layer. It does not roll back the current transaction immediately when 
            thrown, but the transaction will be rolled back if it the exception is not caught by
            another Seam component.
        </para>
        
        <programlisting><![CDATA[@HttpError(errorCode=404)
public class ApplicationException extends Exception { ... }]]></programlisting>

        <para>
            This exception results in a browser redirect whenever it propagates out of the
            Seam component layer. It also ends the current conversation. It causes an immediate 
            rollback of the current transaction.
        </para>
        
        <programlisting><![CDATA[@Redirect(viewId="/failure.xhtml", end=true)
@ApplicationException(rollback=true)
public class UnrecoverableApplicationException extends RuntimeException { ... }]]></programlisting>

        <para>
            Note that <literal>@Redirect</literal> does not work for exceptions
            which occur during the render phase of the JSF lifecycle.
        </para>
        
        <para>
            You can also use EL to specify the <literal>viewId</literal> to redirect to.
        </para>

        <para>
            This exception results in a redirect, along with a message to the user, when it 
            propagates out of the Seam component layer. It also immediately rolls back the 
            current transaction.
        </para>
        
        <programlisting><![CDATA[@Redirect(viewId="/error.xhtml", message="Unexpected error")
public class SystemException extends RuntimeException { ... }]]></programlisting>

        </section>
        
        <section>
            <title>Using XML for exception handling</title>

        <para>
            Since we can't add annotations to all the exception classes we are interested in,
            Seam also lets us specify this functionality in <literal>pages.xml</literal>.
        </para>
        
        <programlisting><![CDATA[<pages>
   
   <exception class="javax.persistence.EntityNotFoundException">
      <http-error error-code="404"/>
   </exception>
   
   <exception class="javax.persistence.PersistenceException">
      <end-conversation/>
      <redirect view-id="/error.xhtml">
          <message>Database access failed</message>
      </redirect>
   </exception>
   
   <exception>
      <end-conversation/>
      <redirect view-id="/error.xhtml">
          <message>Unexpected failure</message>
      </redirect>
   </exception>
   
</pages>]]></programlisting>

        <para>
            The last <literal>&lt;exception&gt;</literal> declaration does not specify a class,
            and is a catch-all for any exception for which handling is not otherwise specified
            via annotations or in <literal>pages.xml</literal>.
        </para>
        
        <para>
            You can also use EL to specify the <literal>view-id</literal> to redirect to.
        </para>
        
        <para>
           You can also access the handled exception instance through EL, Seam places it in the
           conversation context, e.g. to access the message of the exception:
        </para>
        
        <programlisting><![CDATA[...
throw new AuthorizationException("You are not allowed to do this!");

<pages>

    <exception class="org.jboss.seam.security.AuthorizationException">
        <end-conversation/>
        <redirect view-id="/error.xhtml">
            <message severity="WARN">#{org.jboss.seam.handledException.message}</message>
        </redirect>
    </exception>

</pages>]]></programlisting>
         
         <para>
           <literal>org.jboss.seam.handledException</literal> holds the nested exception that
           was actually handled by an exception handler. The outermost (wrapper) exception is 
           also available, as <literal>org.jboss.seam.exception</literal>.
         </para>
         
         <section>
             <title>Suppressing exception logging</title>
             
             <para>
                 For the exception handlers defined in <literal>pages.xml</literal>, it is possible
                 to declare the logging level at which the exception will be logged, or to even
                 suppress the exception being logged altogether.  The attributes <literal>log</literal>
                 and <literal>logLevel</literal> can be used to control exception logging.  By setting 
                 <literal>log="false"</literal> as per the following example, then no log message will
                 be generated when the specified exception occurs:
             </para>
             
             <programlisting><![CDATA[    <exception class="org.jboss.seam.security.NotLoggedInException" log="false">
        <redirect view-id="/register.xhtml">
            <message severity="warn">You must be a member to use this feature</message>
        </redirect>
    </exception>]]></programlisting>
    
             <para>
                 If the <literal>log</literal> attribute is not specified, then it defaults to <literal>true</literal>
                 (i.e. the exception will be logged).  Alternatively, you can specify the <literal>logLevel</literal>
                 to control at which log level the exception will be logged:             
             </para>

             <programlisting><![CDATA[    <exception class="org.jboss.seam.security.NotLoggedInException" logLevel="info">
        <redirect view-id="/register.xhtml">
            <message severity="warn">You must be a member to use this feature</message>
        </redirect>
    </exception>]]></programlisting>
    
              <para>
                  The acceptable values for <literal>logLevel</literal> are: <literal>fatal, error, warn, info, debug</literal> 
                  or <literal>trace</literal>.  If the <literal>logLevel</literal> is not specified, or if an invalid value is
                  configured, then it will default to <literal>error</literal>.              
              </para>
         
         </section>

        </section>
        
        <section>
            <title>Some common exceptions</title>
            
            <para>
                If you are using JPA:
            </para>
            
            <programlisting><![CDATA[<exception class="javax.persistence.EntityNotFoundException">
   <redirect view-id="/error.xhtml">
      <message>Not found</message>
   </redirect>
</exception>

<exception class="javax.persistence.OptimisticLockException">
   <end-conversation/>
   <redirect view-id="/error.xhtml">
      <message>Another user changed the same data, please try again</message>
   </redirect>
</exception>]]></programlisting>

            <para>
                If you are using the Seam Application Framework:
            </para>
            
            <programlisting><![CDATA[<exception class="org.jboss.seam.framework.EntityNotFoundException">
   <redirect view-id="/error.xhtml">
      <message>Not found</message>
   </redirect>
</exception>]]></programlisting>
    
            <para>
                If you are using Seam Security:
            </para>
    
            <programlisting><![CDATA[<exception class="org.jboss.seam.security.AuthorizationException">
   <redirect>
      <message>You don't have permission to do this</message>
   </redirect>
</exception>
    
<exception class="org.jboss.seam.security.NotLoggedInException">
   <redirect view-id="/login.xhtml">
      <message>Please log in first</message>
   </redirect>
</exception>]]></programlisting>

            <para>
               And, for JSF:
            </para>
    
            <programlisting><![CDATA[<exception class="javax.faces.application.ViewExpiredException">
   <redirect view-id="/error.xhtml">
      <message>Your session has timed out, please try again</message>
   </redirect>
</exception>]]></programlisting>

            <para>
                A <literal>ViewExpiredException</literal> occurs if the user posts back
                to a page once their session has expired.  <literal>no-conversation-view-id</literal>
                and <literal>conversation-required</literal> give you finer grained control over
                session expiration if you are inside a conversation.
            </para>
        </section>

    </section>
    
</chapter>
    <chapter id="conversations">
    <title>Conversations and workspace management</title>
    
    <para>
        It's time to understand Seam's conversation model in more detail.
    </para>
    
    <para>
        Historically, the notion of a Seam "conversation" came about as
        a merger of three different ideas:
    </para>
    
    <itemizedlist>
        <listitem>
        <para>
            The idea of a <emphasis>workspace</emphasis>, which I 
            encountered in a project for the Victorian government in 
            2002. In this project I was forced to implement workspace 
            management on top of Struts, an experience I pray never
            to repeat.
        </para>
        </listitem>
        <listitem>
        <para>
            The idea of an <emphasis>application transaction</emphasis>
            with optimistic semantics, and the realization that existing
            frameworks based around a stateless architecture could not
            provide effective management of extended persistence contexts.
            (The Hibernate team is truly fed up with copping the blame for
            <literal>LazyInitializationException</literal>s, which are
            not really Hibernate's fault, but rather the fault of the 
            extremely limiting persistence context model supported by 
            stateless architectures such as the Spring framework or the 
            traditional <emphasis>stateless session facade</emphasis> 
            (anti)pattern in J2EE.)
        </para>
        </listitem>
        <listitem>
        <para>
            The idea of a workflow <emphasis>task</emphasis>.
        </para>
        </listitem>
    </itemizedlist>
    
    <para>
        By unifying these ideas and providing deep support in the framework, 
        we have a powerful construct that lets us build richer and more efficient 
        applications with less code than before.
    </para>
    
    <section>
        <title>Seam's conversation model</title>
    
    <para>
        The examples we have seen so far make use of a very simple
        conversation model that follows these rules:
    </para>
    
    <itemizedlist>
        <listitem>
        <para>
            There is always a conversation context active during the
            apply request values, process validations, update model values, 
            invoke application and render response phases of the JSF request 
            lifecycle.
        </para>
        </listitem>
        <listitem>
        <para>
            At the end of the restore view phase of the JSF request 
            lifecycle, Seam attempts to restore any previous long-running
            conversation context. If none exists, Seam creates a new
            temporary conversation context.
        </para>
        </listitem>
        <listitem>
        <para>
            When an <literal>@Begin</literal> method is encountered, 
            the temporary conversation context is promoted to a long
            running conversation.
        </para>
        </listitem>
        <listitem>
        <para>
            When an <literal>@End</literal> method is encountered, 
            any long-running conversation context is demoted to a 
            temporary conversation.
        </para>
        </listitem>
        <listitem>
        <para>
            At the end of the render response phase of the JSF request
            lifecycle, Seam stores the contents of a long running
            conversation context or destroys the contents of a temporary
            conversation context.
        </para>
        </listitem>
        <listitem>
        <para>
            Any faces request (a JSF postback) will propagate the 
            conversation context. By default, non-faces requests (GET 
            requests, for example) do not propagate the conversation 
            context, but see below for more information on this.
        </para>
        </listitem>
        <listitem>
        <para>
            If the JSF request lifecycle is foreshortened by a redirect,
            Seam transparently stores and restores the current conversation 
            context—unless the conversation was already ended via
            <literal>@End(beforeRedirect=true)</literal>.
        </para>
        </listitem>
    </itemizedlist>
    
        <para>
            Seam transparently propagates the conversation context (including
            the temporary conversation context) across JSF postbacks and 
            redirects. If you don't do anything special, a <emphasis>non-faces request</emphasis>
            (a GET request for example) will not propagate the conversation context and
            will be processed in a new temporary conversation. This is usually - but not
            always - the desired behavior.
        </para>
        
        <para>
            If you want to propagate a Seam conversation across a non-faces request, you
            need to explicitly code the Seam <emphasis>conversation id</emphasis> as a 
            request parameter:
        </para>
        
        <programlisting><![CDATA[<a href="main.jsf?conversationId=#{conversation.id}">Continue</a>]]></programlisting>
        
        <para>
            Or, the more JSF-ish:
        </para>
        
        <programlisting><![CDATA[<h:outputLink value="main.jsf">
    <f:param name="conversationId" value="#{conversation.id}"/>
    <h:outputText value="Continue"/>
</h:outputLink>]]></programlisting>

        <para>
            If you use the Seam tag library, this is equivalent:
        </para>

        <programlisting><![CDATA[<h:outputLink value="main.jsf">
    <s:conversationId/>
    <h:outputText value="Continue"/>
</h:outputLink>]]></programlisting>

        <para>
            If you wish to disable propagation of the conversation context for a
            postback, a similar trick is used:
        </para>

        <programlisting><![CDATA[<h:commandLink action="main" value="Exit">
    <f:param name="conversationPropagation" value="none"/>
</h:commandLink>]]></programlisting>

        <para>
            If you use the Seam tag library, this is equivalent:
        </para>

        <programlisting><![CDATA[<h:commandLink action="main" value="Exit">
    <s:conversationPropagation type="none"/>
</h:commandLink>]]></programlisting>

        <para>
            Note that disabling conversation context propagation is absolutely not the
            same thing as ending the conversation.
        </para>
        
        <para>
            The <literal>conversationPropagation</literal> request parameter, or 
            the <literal>&lt;s:conversationPropagation&gt;</literal> tag may even
            be used to begin and end conversation, or begin a nested 
            conversation.
        </para>

        <programlisting><![CDATA[<h:commandLink action="main" value="Exit">
    <s:conversationPropagation type="end"/>
</h:commandLink>]]></programlisting>

        <programlisting><![CDATA[<h:commandLink action="main" value="Select Child">
    <s:conversationPropagation type="nested"/>
</h:commandLink>]]></programlisting>

        <programlisting><![CDATA[<h:commandLink action="main" value="Select Hotel">
    <s:conversationPropagation type="begin"/>
</h:commandLink>]]></programlisting>

        <programlisting><![CDATA[<h:commandLink action="main" value="Select Hotel">
    <s:conversationPropagation type="join"/>
</h:commandLink>]]></programlisting>

    <para>
        This conversation model makes it easy to build applications which
        behave correctly with respect to multi-window operation. For many
        applications, this is all that is needed. Some complex applications
        have either or both of the following additional requirements:
    </para>
    
    <itemizedlist>
        <listitem>
        <para>
            A conversation spans many smaller units of user interaction,
            which execute serially or even concurrently. The smaller
            <emphasis>nested conversations</emphasis> have their own
            isolated set of conversation state, and also have access to
            the state of the outer conversation.
        </para>
        </listitem>
        <listitem>
        <para>
            The user is able to switch between many conversations
            within the same browser window. This feature is called
            <emphasis>workspace management</emphasis>.
        </para>
        </listitem>
    </itemizedlist>
    
    </section>
    
    <section>
        <title>Nested conversations</title>
        
        <para>
            A nested conversation is created by invoking a method marked
            <literal>@Begin(nested=true)</literal> inside the scope of an
            existing conversation. A nested conversation has its own
            conversation context, and also has read-only access to the
            context of the outer conversation. (It can read the outer
            conversation's context variables, but not write to them.)
            When an <literal>@End</literal> is subsequently encountered,
            the nested conversation will be destroyed, and the outer
            conversation will resume, by "popping" the conversation stack.
            Conversations may be nested to any arbitrary depth.
        </para>
        
        <para>
            Certain user activity (workspace management, or the back button)
            can cause the outer conversation to be resumed before the inner
            conversation is ended. In this case it is possible to have 
            multiple concurrent nested conversations belonging to the
            same outer conversation. If the outer conversation ends before
            a nested conversation ends, Seam destroys all nested conversation
            contexts along with the outer context.
        </para>
        
        <para>
            A conversation may be thought of as a <emphasis>continuable state</emphasis>.
            Nested conversations allow the application to capture a consistent
            continuable state at various points in a user interaction, thus
            insuring truly correct behavior in the face of backbuttoning and
            workspace management.
        </para>
        
        <para>
            TODO: an example to show how a nested conversation prevents bad 
            stuff happening when you backbutton.
        </para>
        
        <para>
            Usually, if a component exists in a parent conversation of the 
            current nested conversation, the nested conversation will use
            the same instance. Occasionally, it is useful to have a different
            instance in each nested conversation, so that the component 
            instance that exists in the parent conversation is invisible to
            its child conversations. You can achieve this behavior by 
            annotating the component <literal>@PerNestedConversation</literal>.
        </para>
        
    </section>
    
    <section>
        <title>Starting conversations with GET requests</title>
        <para>
            JSF does not define any kind of action listener that is triggered
            when a page is accessed via a non-faces request (for example, a
            HTTP GET request). This can occur if the user bookmarks the page,
            or if we navigate to the page via an <literal>&lt;h:outputLink&gt;</literal>.
        </para>
        
        <para>
            Sometimes we want to begin a conversation immediately the page is
            accessed. Since there is no JSF action method, we can't solve the problem
            in the usual way, by annotating the action with <literal>@Begin</literal>.
        </para>
        
        <para>
            A further problem arises if the page needs some state to be fetched
            into a context variable. We've already seen two ways to solve this 
            problem. If that state is held in a Seam component, we can fetch the 
            state in a <literal>@Create</literal> method. If not, we can define a
            <literal>@Factory</literal> method for the context variable.
        </para>
        
        <para>
            If none of these options works for you, Seam lets you define a
            <emphasis>page action</emphasis> in the <literal>pages.xml</literal>
            file.
        </para>
        
        <programlisting><![CDATA[<pages>
    <page view-id="/messageList.jsp" action="#{messageManager.list}"/>
    ...
</pages>]]></programlisting>

        <para>
            This action method is called at the beginning of the render response
            phase, any time the page is about to be rendered. If a page action
            returns a non-null outcome, Seam will process any appropriate JSF and
            Seam navigation rules, possibly resulting in a completely different page 
            being rendered.
        </para>
        
        <para>
            If <emphasis>all</emphasis> you want to do before rendering the page
            is begin a conversation, you could use a built-in action method that
            does just that:
        </para>
        
        <programlisting><![CDATA[<pages>
    <page view-id="/messageList.jsp" action="#{conversation.begin}"/>
    ...
</pages>]]></programlisting>

        <para>
            Note that you can also call this built-in action from a JSF
            control, and, similarly, you can use 
            <literal>#{conversation.end}</literal> to end conversations.
        </para>
        
        <para>
            If you want more control, to join existing conversations or
            begin a nested conversion, to begin a pageflow or an atomic
            conversation, you should use the 
            <literal>&lt;begin-conversation&gt;</literal> element.
        </para>

        <programlisting><![CDATA[<pages>
    <page view-id="/messageList.jsp">
       <begin-conversation nested="true" pageflow="AddItem"/>
    <page>
    ...
</pages>]]></programlisting>

        <para>
            There is also an <literal>&lt;end-conversation&gt;</literal> 
            element.
        </para>

        <programlisting><![CDATA[<pages>
    <page view-id="/home.jsp">
       <end-conversation/>
    <page>
    ...
</pages>]]></programlisting>

        <para>
            To solve the first problem, we now have five options:
        </para>
        
        <itemizedlist>
            <listitem>
            <para>
                Annotate the <literal>@Create</literal> method with
                <literal>@Begin</literal>
            </para>
            </listitem>
            <listitem>
            <para>
                Annotate the <literal>@Factory</literal> method with
                <literal>@Begin</literal>
            </para>
            </listitem>
            <listitem>
            <para>
                Annotate the Seam page action method with
                <literal>@Begin</literal>
            </para>
            </listitem>
            <listitem>
            <para>
                Use <literal>&lt;begin-conversation&gt;</literal> in
                <literal>pages.xml</literal>.
            </para>
            </listitem>
            <listitem>
            <para>
                Use <literal>#{conversation.begin}</literal> as
                the Seam page action method
            </para>
            </listitem>
        </itemizedlist>
        
    </section>
    
    <section>
        <title>Using <literal>&lt;s:link&gt;</literal> and <literal>&lt;s:button&gt;</literal></title>
        
        <para>
            JSF command links always perform a form submission via JavaScript, 
            which breaks the web browser's "open in new window" or "open in new tab"
            feature. In plain JSF, you need to use an <literal>&lt;h:outputLink&gt;</literal>
            if you need this functionality. But there are two major limitations to 
            <literal>&lt;h:outputLink&gt;</literal>.
        </para>
        
    <itemizedlist>
        <listitem>
        <para>
            JSF provides no way to attach an action listener to an 
            <literal>&lt;h:outputLink&gt;</literal>.
        </para>
        </listitem>
        <listitem>
        <para>
            JSF does not propagate the selected row of a <literal>DataModel</literal> 
            since there is no actual form submission.
        </para>
        </listitem>
    </itemizedlist>
    
        <para>
            Seam provides the notion of a <emphasis>page action</emphasis> to help 
            solve the first problem, but this does nothing to help us with the second 
            problem. We <emphasis>could</emphasis> work around this by using the
            RESTful approach of passing a request parameter and requerying
            for the selected object on the server side. In some cases—such as the 
            Seam blog example application—this is indeed the best approach. The 
            RESTful style supports bookmarking, since it does not require server-side state. 
            In other cases, where we don't care about bookmarks, the use of 
            <literal>@DataModel</literal> and <literal>@DataModelSelection</literal> is 
            just so convenient and transparent!
        </para>
        
        <para>
            To fill in this missing functionality, and to make conversation propagation
            even simpler to manage, Seam provides the <literal>&lt;s:link&gt;</literal>
            JSF tag.
        </para>
        
        <para>
            The link may specify just the JSF view id:
        </para>
        
        <programlisting><![CDATA[<s:link view="/login.xhtml" value="Login"/>]]></programlisting>
        
        <para>
            Or, it may specify an action method (in which case the action outcome determines
            the page that results):
        </para>
        
        <programlisting><![CDATA[<s:link action="#{login.logout}" value="Logout"/>]]></programlisting>
        
        <para>
            If you specify <emphasis>both</emphasis> a JSF view id and an action method, the
            'view' will be used <emphasis>unless</emphasis> the action method returns a
            non-null outcome:
        </para>
        
        <programlisting><![CDATA[<s:link view="/loggedOut.xhtml"  action="#{login.logout}" value="Logout"/>]]></programlisting>
        
        <para>
            The link automatically propagates the selected row of a <literal>DataModel</literal>
            using inside <literal>&lt;h:dataTable&gt;</literal>:
        </para>
        
        <programlisting><![CDATA[<s:link view="/hotel.xhtml" action="#{hotelSearch.selectHotel}" value="#{hotel.name}"/>]]></programlisting>
        
        <para>
            You can leave the scope of an existing conversation:
        </para>
        
        <programlisting><![CDATA[<s:link view="/main.xhtml" propagation="none"/>]]></programlisting>
        
        <para>
            You can begin, end, or nest conversations:
        </para>
        
        <programlisting><![CDATA[<s:link action="#{issueEditor.viewComment}" propagation="nest"/>]]></programlisting>
        
        <para>
            If the link begins a conversation, you can even specify a pageflow to be used:
        </para>
        
        <programlisting><![CDATA[<s:link action="#{documentEditor.getDocument}" propagation="begin"
        pageflow="EditDocument"/>]]></programlisting>
        
        <para>
            The <literal>taskInstance</literal> attribute if for use in jBPM task lists:
        </para>
        
        <programlisting><![CDATA[<s:link action="#{documentApproval.approveOrReject}" taskInstance="#{task}"/>]]></programlisting>
        
        <para>
            (See the DVD Store demo application for examples of this.)
        </para>
        
        <para>
            Finally, if you need the "link" to be rendered as a button, use <literal>&lt;s:button&gt;</literal>:
        </para>
        
        <programlisting><![CDATA[<s:button action="#{login.logout}" value="Logout"/>]]></programlisting>
        
    </section>
    
    <section>
        <title>Success messages</title>
        <para>
            It is quite common to display a message to the user indicating 
            success or failure of an action. It is convenient to use a JSF
            <literal>FacesMessage</literal> for this. Unfortunately, a
            successful action often requires a browser redirect, and JSF 
            does not propagate faces messages across redirects. This makes
            it quite difficult to display success messages in plain JSF.
        </para>
        
        <para>
            The built in conversation-scoped Seam component named 
            <literal>facesMessages</literal> solves this problem.
            (You must have the Seam redirect filter installed.)
        </para>
        
        <programlisting><![CDATA[@Name("editDocumentAction")
@Stateless
public class EditDocumentBean implements EditDocument {
    @In EntityManager em;
    @In Document document;
    @In FacesMessages facesMessages;
    
    public String update() {
        em.merge(document);
        facesMessages.add("Document updated");
    }
}]]></programlisting>
        
        <para>
            Any message added to <literal>facesMessages</literal> is
            used in the very next render response phase for the current
            conversation. This even works when there is no long-running
            conversation since Seam preserves even temporary conversation
            contexts across redirects.
        </para>
        
        <para>
            You can even include JSF EL expressions in a faces message summary:
        </para>
        
        <programlisting><![CDATA[facesMessages.add("Document #{document.title} was updated");]]></programlisting>
                
        <para>
            You may display the messages in the usual way, for example:
        </para>
        
        <programlisting><![CDATA[<h:messages globalOnly="true"/>]]></programlisting>

    </section>
    
    <section>
        <title>Natural conversation ids</title>
        <para>
            When working with conversations that deal with persistent objects, it may be 
            desirable to use the natural business key of the object instead of the standard,
            "surrogate" conversation id:
        </para>
        
               <para>
                  <emphasis>Easy redirect to existing conversation</emphasis>
               </para>
               <para>
                  It can be useful to redirect to an existing conversation if 
                  the user requests the same operation twice. Take this example:
               
               <quote>
                  You are on ebay, half way through paying for an item you just 
                  won as a Christmas present for your parents. Lets say you're
                  sending it straight to them - you enter your payment details 
                  but you can't remember their address. You accidentally reuse 
                  the same browser window finding out their address. Now you 
                  need to return to the payment for the item.
               </quote>
       		</para>
               <para>
                  With a natural conversation its really easy to have the user
                  rejoin the existing conversation, and pick up where they left 
                  off - just have them to rejoin the payForItem conversation 
                  with the itemId as the conversation id.
               </para>
           
               <para>
                  <emphasis>User friendly URLs</emphasis>
               </para>
               
               <para>
                  For me this consists of a navigable 
                  hierarchy (I can navigate by editing the url) and a meaningful
                  URL (like this Wiki uses - so don't identify things by random 
                  ids). For some applications user friendly URLs are less 
                  important, of course.
               </para>

               <para>
                  With a natural conversations, when you are building your hotel 
                  booking system (or, of course, whatever your app is) you can 
                  generate a URL like 
                  <literal>http://seam-hotels/book.seam?hotel=BestWesternAntwerpen</literal> 
                  (of course, whatever parameter <literal>hotel</literal> maps 
                  to on your domain model must be unique) and with URLRewrite 
                  easily transform this to 
                  http://seam-hotels/book/BestWesternAntwerpen.
               </para>
               
               <para>
                  Much better!
               </para> 
           
       </section>
        <section>
            <title>Creating a natural conversation</title>        
            <para>
                Natural conversations are defined in <literal>pages.xml</literal>: 
            </para>
            
            <programlisting><![CDATA[  <conversation name="PlaceBid"
                  parameter-name="auctionId"
                  parameter-value="#{auction.auctionId}"/>]]></programlisting>
                  
            <para>
                The first thing to note from the above definition is that the conversation
                has a name, in this case <literal>PlaceBid</literal>.  This name uniquely
                identifies this particular named conversation, and is used by the 
                <literal>page</literal> definition to identify a named conversation to participate
                in.
            </para>
                
            <para>
                The next attribute, <literal>parameter-name</literal> defines the request parameter 
                that will contain the natural conversation id, in place of the default conversation 
                id parameter. In this example, the <literal>parameter-name</literal> is <literal>auctionId</literal>.  
                This means that instead of a conversation parameter like <literal>cid=123</literal> 
                appearing in the URL for your page, it will contain <literal>auctionId=765432</literal> 
                instead.
            </para>
            
            <para>
                The last attribute in the above configuration, <literal>parameter-value</literal>,
                defines an EL expression used to evaluate the value of the natural business key to
                use as the conversation id.  In this example, the conversation id will be the primary
                key value of the <literal>auction</literal> instance currently in scope.
            </para>
            
            <para>
                Next, we define which pages will participate in the named conversation.
                This is done by specifying the <literal>conversation</literal> attribute for a
                <literal>page</literal> definition:
            </para>
            
            <programlisting><![CDATA[  <page view-id="/bid.xhtml" conversation="PlaceBid" login-required="true">
      <navigation from-action="#{bidAction.confirmBid}">        
          <rule if-outcome="success">
              <redirect view-id="/auction.xhtml">
                  <param name="id" value="#{bidAction.bid.auction.auctionId}"/>
              </redirect>
          </rule>        
      </navigation>
  </page>]]></programlisting>
       
        </section>
        
        <section>
            <title>Redirecting to a natural conversation</title>
            
            <para>
                When starting, or redirecting to, a natural conversation there are a number
                of options for specifying the natural conversation name.  Let's start by looking at
                the following page definition:
            </para>
            
            <programlisting><![CDATA[  <page view-id="/auction.xhtml">
    <param name="id" value="#{auctionDetail.selectedAuctionId}"/>
       
    <navigation from-action="#{bidAction.placeBid}">
      <redirect view-id="/bid.xhtml"/>
    </navigation>
  </page>]]></programlisting>
    
            <para>
                From here, we can see that invoking the action <literal>#{bidAction.placeBid}</literal>
                from our auction view (by the way, all these examples are taken from the seamBay example in Seam),
                that we will be redirected to <literal>/bid.xhtml</literal>, which, as we saw previously,
                is configured with the natural conversation <literal>PlaceBid</literal>.  The declaration for
                our action method looks like this:                
            </para>
            
            <programlisting><![CDATA[   @Begin(join = true)
   public void placeBid()]]></programlisting>
   
            <para>
                When named conversations are specified in the <literal>&lt;page/&gt;</literal> element,
                redirection to the named conversation occurs as part of navigation rules, after the 
                action method has already been invoked.  This is a problem when redirecting to an
                existing conversation, as redirection needs to be occur before the action method is 
                invoked.  Therefore it is necessary to specify the conversation name when
                the action is invoked.  One way of doing this is by using the <literal>s:conversationName</literal>
                tag:
            </para>
            
            <programlisting><![CDATA[  <h:commandButton id="placeBidWithAmount" styleClass="placeBid" action="#{bidAction.placeBid}">
    <s:conversationName value="PlaceBid"/>
  </h:commandButton>]]></programlisting>
  
            <para>
              Another alternative is to specify the <literal>conversationName</literal> attribute when
              using either <literal>s:link</literal> or <literal>s:button</literal>:
            </para>
            
            <programlisting><![CDATA[  <s:link value="Place Bid" action="#{bidAction.placeBid}" conversationName="PlaceBid"/>]]></programlisting>
        
        </section>
    
    
    <section>
        <title>Workspace management</title>
        
        <para>
            Workspace management is the ability to "switch" conversations in
            a single window. Seam makes workspace management completely 
            transparent at the level of the Java code. To enable workspace
            management, all you need to do is:
        </para>
        
        <itemizedlist>
            <listitem>
            <para>
                Provide <emphasis>description</emphasis> text for each view id 
                (when using JSF or Seam navigation rules) or page node (when using 
                jPDL pageflows). This description text is displayed to the user 
                by the workspace switchers.
            </para>
            </listitem>
            <listitem>
                <para>
                Include one or more of the standard workspace switcher JSP
                or facelets fragments in your pages. The standard fragments
                support workspace management via a drop down menu, a list
                of conversations, or breadcrumbs.
                </para>
            </listitem>
        </itemizedlist>
        
        <section>
            <title>Workspace management and JSF navigation</title>
            <para>
                When you use JSF or Seam navigation rules, Seam switches to a
                conversation by restoring the current <literal>view-id</literal>
                for that conversation. The descriptive text for the
                workspace is defined in a file called <literal>pages.xml</literal>
                that Seam expects to find in the <literal>WEB-INF</literal>
                directory, right next to <literal>faces-config.xml</literal>:
            </para>
            
            <programlisting><![CDATA[<pages>
    <page view-id="/main.xhtml">
        <description>Search hotels: #{hotelBooking.searchString}</description>
    </page>
    <page view-id="/hotel.xhtml">
        <description>View hotel: #{hotel.name}</description>
    </page>
    <page view-id="/book.xhtml">
        <description>Book hotel: #{hotel.name}</description>
    </page>
    <page view-id="/confirm.xhtml">
        <description>Confirm: #{booking.description}</description>
    </page>
    </pages>]]></programlisting>
            
           <para>
               Note that if this file is missing, the Seam application will
               continue to work perfectly! The only missing functionality
               will be the ability to switch workspaces.
           </para>

        </section>
        
        <section>
            <title>Workspace management and jPDL pageflow</title>
            <para>
                When you use a jPDL pageflow definition, Seam switches
                to a conversation by restoring the current jBPM process
                state. This is a more flexible model since it allows the
                same <literal>view-id</literal> to have different
                descriptions depending upon the current 
                <literal>&lt;page&gt;</literal> node. The description
                text is defined by the <literal>&lt;page&gt;</literal> 
                node:
            </para>
            
<programlisting><![CDATA[<pageflow-definition name="shopping">

   <start-state name="start">
      <transition to="browse"/>
   </start-state>
   
   <page name="browse" view-id="/browse.xhtml">
      <description>DVD Search: #{search.searchPattern}</description>
      <transition to="browse"/>
      <transition name="checkout" to="checkout"/>
   </page>
   
   <page name="checkout" view-id="/checkout.xhtml">
      <description>Purchase: $#{cart.total}</description>
      <transition to="checkout"/>
      <transition name="complete" to="complete"/>
   </page>
   
   <page name="complete" view-id="/complete.xhtml">
      <end-conversation />
   </page>
   
</pageflow-definition>]]></programlisting>

        </section>
        
        <section>
            <title>The conversation switcher</title>
            
            <para>
                Include the following fragment in your JSP or facelets page
                to get a drop-down menu that lets you switch to any
                current conversation, or to any other page of the application:
            </para>
            
            <programlisting><![CDATA[<h:selectOneMenu value="#{switcher.conversationIdOrOutcome}">
    <f:selectItem itemLabel="Find Issues" itemValue="findIssue"/>
    <f:selectItem itemLabel="Create Issue" itemValue="editIssue"/>
    <f:selectItems value="#{switcher.selectItems}"/>
</h:selectOneMenu>
<h:commandButton action="#{switcher.select}" value="Switch"/>]]></programlisting>
       
            <para>
                In this example, we have a menu that includes an item for each
                conversation, together with two additional items that let the
                user begin a new conversation.
            </para>
            
            <para>
                Only conversations with a description (specified in 
                <literal>pages.xml</literal>) will be included in the drop-down 
                menu.
            </para>
       
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/switcher.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/switcher.png" align="center"/>
          </imageobject>
        </mediaobject>

        </section>
        
        <section>
            <title>The conversation list</title>
            
            <para>
                The conversation list is very similar to the conversation switcher,
                except that it is displayed as a table:
            </para>
            
            <programlisting><![CDATA[<h:dataTable value="#{conversationList}" var="entry"
        rendered="#{not empty conversationList}">
    <h:column>
        <f:facet name="header">Workspace</f:facet>
        <h:commandLink action="#{entry.select}" value="#{entry.description}"/>
        <h:outputText value="[current]" rendered="#{entry.current}"/>
    </h:column>
    <h:column>
        <f:facet name="header">Activity</f:facet>
        <h:outputText value="#{entry.startDatetime}">
            <f:convertDateTime type="time" pattern="hh:mm a"/>
        </h:outputText>
        <h:outputText value=" - "/>
        <h:outputText value="#{entry.lastDatetime}">
            <f:convertDateTime type="time" pattern="hh:mm a"/>
        </h:outputText>
    </h:column>
    <h:column>
        <f:facet name="header">Action</f:facet>
        <h:commandButton action="#{entry.select}" value="#{msg.Switch}"/>
        <h:commandButton action="#{entry.destroy}" value="#{msg.Destroy}"/>
    </h:column>
</h:dataTable>]]></programlisting>

            <para>
                We imagine that you will want to customize this for your own application.
            </para>
            
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/list.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/list.png" align="center"/>
          </imageobject>
        </mediaobject>
        
            <para>
                Only conversations with a description will be included in the
                list.
            </para>
            
            <para>
                Notice that the conversation list lets the user destroy workspaces.
            </para>

        </section>
        
        <section>
            <title>Breadcrumbs</title>
            
            <para>
                Breadcrumbs are useful in applications which use a nested conversation
                model. The breadcrumbs are a list of links to conversations in the
                current conversation stack:
            </para>
            
            <programlisting><![CDATA[<ui:repeat value="#{conversationStack}" var="entry">
    <h:outputText value=" | "/> 
    <h:commandLink value="#{entry.description}" action="#{entry.select}"/>
</ui:repeat]]></programlisting>
            
            <mediaobject>
              <imageobject role="fo">
                <imagedata fileref="/images/breadcrumbs.png" align="center"/>
              </imageobject>
              <imageobject role="html">
                <imagedata fileref="/images/breadcrumbs.png" align="center"/>
              </imageobject>
            </mediaobject>
            
        </section>
    </section>
    
    <section>
        <title>Conversational components and JSF component bindings</title>

        <para>
            Conversational components have one minor limitation: they cannot be used to hold bindings 
            to JSF components. (We generally prefer not to use this feature of JSF unless absolutely
            necessary, since it creates a hard dependency from application logic to the view.) On a 
            postback request, component bindings are updated during the Restore View phase, 
            before the Seam conversation context has been restored.
        </para>
        
        <para>
            To work around this use an event scoped component to store the component bindings and inject 
            it into the conversation scoped component that requires it.
        </para>

        <programlisting><![CDATA[@Name("grid")
@Scope(ScopeType.EVENT)
public class Grid
{
    private HtmlPanelGrid htmlPanelGrid;

    // getters and setters
    ...
}]]></programlisting>


        <programlisting><![CDATA[@Name("gridEditor")
@Scope(ScopeType.CONVERSATION)
public class GridEditor
{
    @In(required=false)
    private Grid grid;
    
    ...
}]]></programlisting>

       <para>
         Also, you can't inject a conversation scoped component into an event
         scoped component which you bind a JSF control to. This includes Seam
         built in components like <literal>facesMessages</literal>. 
       </para>

       <para>
          Alternatively, you can access the JSF component tree through the implicit <literal>uiComponent</literal>
          handle. The following example accesses <literal>getRowIndex()</literal>of the
          <literal>UIData</literal> component which backs the data table during iteration, it prints
          the current row number:
       </para>

        <programlisting><![CDATA[
<h:dataTable id="lineItemTable" var="lineItem" value="#{orderHome.lineItems}">
   <h:column>
      Row: #{uiComponent['lineItemTable'].rowIndex}
   </h:column>
   ...
</h:dataTable>]]></programlisting>

       <para>
          JSF UI components are available with their client identifier in this map.
       </para>

    </section>
    
    <section>
      <title>Concurrent calls to conversational components</title>
      
      <para>
        A general discussion of concurrent calls to Seam components can be 
        found in <xref linkend="concurrency"/>. Here we will discuss 
        the most common situation in which you will encounter concurrency 
        — accessing conversational components from AJAX requests.
        We're going to discuss the options that a Ajax client library should
        provide to control events originating at the client — and we'll
        look at the options RichFaces gives you.
      </para>
    
      <para>
        Conversational components don't allow real concurrent access therefore
        Seam queues each request to process them serially.  This allows each
        request to be executed in a deterministic fashion. However, a simple
        queue isn't that great — firstly, if a method is, for some
        reason, taking a very long time to complete, running it over and over
        again whenever the client generates a request is bad idea (potential
        for Denial of Service attacks), and, secondly, AJAX is often to used
        to provide a quick status update to the user, so continuing to run the
        action after a long time isn't useful. 
      </para>
      
      <para>
        Therefore Seam queues the action event for a period of time (the 
        concurrent request timeout); if it can't process the event in time, it 
        creates a temporary conversation and prints out a message to the user to
        let them know what's going on.  It's therefore very important not to
        flood the server with AJAX events!
      </para>
      
      <para>
        We can set a sensible default for the concurrent request timeout (in 
        ms) in components.xml:
      </para>
      
      <programlisting><![CDATA[<core:manager concurrent-request-timeout="500" />]]></programlisting>
      <!-- TODO -->
      <!-- <para>
        We can also fine tune the concurrent request timeout for a request:
      </para>
       
      <programlisting><![CDATA[public void getTotal() {
   Manager.instance().setConcurrentRequestTimeout(1000);
   return someReallyComplicatedCalculation();
}]]></programlisting>-->

    <para>
      So far we've discussed "synchronous" AJAX requests - the client tells the
      server that an event has occur, and then rerenders part of the page based
      on the result.  This approach is great when the AJAX request is
      lightweight (the methods called are simple e.g. calculating the sum of a
      column of numbers).  But what if we need to do a complex computation? 
    </para>
    <para>
      For heavy computation we should use a truly asynchronous (poll based) 
      approach — the client sends an AJAX request to the server, which
      causes action to be executed asynchronously on the server (so the the
      response to the client is immediate); the client then polls the server 
      for updates.  This is useful when you have a long-running action for
      which it is important that every action executes (you don't want some to
      be dropped as duplicates, or to timeout).
    </para>
    
    <para>
      <emphasis>How should we design our conversational AJAX application?</emphasis>
    </para>
    
    <para>
      Well first, you need to decide whether you want to use the simpler 
      "synchronous" request or whether you want to add using a poll-style
      approach.
    </para>
    
    <para>
      If you go for a "synchronous" approach, then you need to make an
      estimate of how long your AJAX request will take to complete - is it much
      shorter than the concurrent request timeout? If not, you probably want to
      alter the concurrent request timeout for this method (as discussed 
      above). Next you probably want a queue on the client side to prevent 
      flooding the server with requests.  If the event occurs often (e.g. a 
      keypress, onblur of input fields) and immediate update of the client is
      not a priority you should set a request delay on the client side. When
      working out your request delay, factor in that the event may also be
      queued on the server side.
    </para>
    
    <para>
      Finally, the client library may provide an option to abort unfinished
      duplicate requests in favor of the most recent.  You need to be careful
      with this option as it can lead to flooding of the server with requests
      if the server is not able to abort the unfinished request.
    </para>
    
    <para>
      Using a poll-style design requires less fine-tuning.  You just mark your
      action method <literal>@Asynchronous</literal> and decide on a polling
      interval:
    </para>
    
    <programlisting><![CDATA[int total;

// This method is called when an event occurs on the client
// It takes a really long time to execute
@Asynchronous      
public void calculateTotal() {
   total = someReallyComplicatedCalculation();
}

// This method is called as the result of the poll
// It's very quick to execute
public int getTotal() {
   return total;
}]]></programlisting>
    
    <section>
      <title>RichFaces Ajax</title>
    
      <para>
        RichFaces Ajax is the AJAX library most commonly used with Seam, and
        provides all the controls discussed above:
      </para>
      
      <itemizedlist>
        <listitem>
          <para>
            <literal>eventsQueue</literal> — provide a queue in which 
            events are placed.  All events are queued and requests are sent to
            the server serially.  This is useful if the request can to the
            server can take some time to execute (e.g. heavy computation,
            retrieving information from a slow source) as the server isn't
            flooded.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>ignoreDupResponses</literal> — ignore the response 
            produced by the request if a more recent 'similar' request is
            already in the queue. ignoreDupResponses="true" does <emphasis>not 
            cancel</emphasis> the the processing of the request on the server
            side — just prevents unnecessary updates on the client side.
          </para>
          <para>
            This option should be used with care with Seam's conversations as
            it allows multiple concurrent requests to be made.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>requestDelay</literal> — defines the time (in ms.)
            that the request will be remain on the queue. If the request has
            not been processed by after this time the request will be sent 
            (regardless of whether a response has been received) or discarded
            (if there is a more recent similar event on the queue).
          </para>
          <para>
            This option should be used with care with Seam's conversations as
            it allows multiple concurrent requests to be made.  You need to be
            sure that the delay you set (in combination with the concurrent
            request timeout) is longer than the action will take to execute.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>&lt;a:poll reRender="total" interval="1000" /&gt;</literal> —
            Polls the server, and rerenders an area as needed
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</chapter>
    <chapter id="jbpm">
    <title>Pageflows and business processes</title>
    
    <para>
        JBoss jBPM is a business process management engine for any Java SE or EE
        environment. jBPM lets you represent a business process or user 
        interaction as a graph of nodes representing wait states, decisions,
        tasks, web pages, etc. The graph is defined using a simple, very readable, 
        XML dialect called jPDL, and may be edited and visualised graphically using
        an eclipse plugin. jPDL is an extensible language, and is suitable for 
        a range of problems, from defining web application page flow, to traditional
        workflow management, all the way up to orchestration of services in a SOA
        environment.
    </para>
    
    <para>
        Seam applications use jBPM for two different problems:
    </para>
    
    <itemizedlist>
        <listitem>
        <para>
            Defining the pageflow involved in complex user interactions. A jPDL
            process definition defines the page flow for a single conversation.
            A Seam conversation is considered to be a relatively short-running
            interaction with a single user.
        </para>
        </listitem>
        <listitem>
        <para>
            Defining the overarching business process. The business process may span
            multiple conversations with multiple users. Its state is persistent in
            the jBPM database, so it is considered long-running. Coordination of
            the activities of multiple users is a much more complex problem than
            scripting an interaction with a single user, so jBPM offers sophisticated
            facilities for task management and dealing with multiple concurrent paths 
            of execution.
        </para>
        </listitem>
    </itemizedlist>
    
    <para>
        Don't get these two things confused ! They operate at very different levels
        or granularity. <emphasis>Pageflow</emphasis>, <emphasis>conversation</emphasis>
        and <emphasis>task</emphasis> all refer to a single
        interaction with a single user. A business process spans many tasks.
        Futhermore, the two applications of jBPM are totally orthogonal. You can
        use them together or independently or not at all.
    </para>
    
    <para>
        You don't have to know jDPL to use Seam. If you're perfectly happy defining
        pageflow using JSF or Seam navigation rules, and if your application is more 
        data-driven that process-driven, you probably don't need jBPM. But we're
        finding that thinking of user interaction in terms of a well-defined graphical 
        representation is helping us build more robust applications.
    </para>
    
    <section>
        <title>Pageflow in Seam</title>
        <para>
            There are two ways to define pageflow in Seam:
        </para>
        
	    <itemizedlist>
	        <listitem>
	        <para>
	            Using JSF or Seam navigation rules - the <emphasis>stateless navigation 
	            model</emphasis>
	        </para>
	        </listitem>
	        <listitem>
	        <para>
	            Using jPDL - the <emphasis>stateful navigation model</emphasis>
	        </para>
	        </listitem>
	    </itemizedlist>
    
        <para>
            Very simple applications will only need the stateless navigation 
            model. Very complex applications will use both models in different 
            places. Each model has its strengths and weaknesses!
        </para>
        
        <section>
            <title>The two navigation models</title>
        
        <para>
            The stateless model defines a mapping from a set of named, logical
            outcomes of an event directly to the resulting page of the view.
            The navigation rules are entirely oblivious to any state held by
            the application other than what page was the source of the event.
            This means that your action listener methods must sometimes make 
            decisions about the page flow, since only they have access to the 
            current state of the application. 
        </para>
        
        <para>
            Here is an example page flow definition using JSF navigation 
            rules:
        </para>
        
        <programlisting><![CDATA[<navigation-rule>
    <from-view-id>/numberGuess.jsp</from-view-id>
        
    <navigation-case>
        <from-outcome>guess</from-outcome>
        <to-view-id>/numberGuess.jsp</to-view-id>
        <redirect/>
    </navigation-case>

    <navigation-case>
        <from-outcome>win</from-outcome>
        <to-view-id>/win.jsp</to-view-id>
        <redirect/>
    </navigation-case>
        
    <navigation-case>
        <from-outcome>lose</from-outcome>
        <to-view-id>/lose.jsp</to-view-id>
        <redirect/>
    </navigation-case>

</navigation-rule>]]></programlisting>

        <para>
            Here is the same example page flow definition using Seam navigation 
            rules:
        </para>
        
        <programlisting><![CDATA[<page view-id="/numberGuess.jsp">
        
    <navigation>
        <rule if-outcome="guess">
            <redirect view-id="/numberGuess.jsp"/>
        </rule>
        <rule if-outcome="win">
            <redirect view-id="/win.jsp"/>
        </rule>
        <rule if-outcome="lose">
            <redirect view-id="/lose.jsp"/>
        </rule>
    </navigation>

</page>]]></programlisting>

        <para>
            If you find navigation rules overly verbose, you can return view ids
            directly from your action listener methods:
        </para>
        
        <programlisting><![CDATA[public String guess() {
    if (guess==randomNumber) return "/win.jsp";
    if (++guessCount==maxGuesses) return "/lose.jsp";
    return null;
}]]></programlisting>

        <para>
            Note that this results in a redirect. You can even specify parameters 
            to be used in the redirect:
        </para>
        
        <programlisting><![CDATA[public String search() {
    return "/searchResults.jsp?searchPattern=#{searchAction.searchPattern}";
}]]></programlisting>
        
        <para>
            The stateful model defines a set of transitions between a set of
            named, logical application states. In this model, it is possible
            to express the flow of any user interaction entirely in the jPDL
            pageflow definition, and write action listener methods that are
            completely unaware of the flow of the interaction.
        </para>
        
        <para>
            Here is an example page flow definition using jPDL:
        </para>
        
        <programlisting><![CDATA[<pageflow-definition name="numberGuess">
    
   <start-page name="displayGuess" view-id="/numberGuess.jsp">
      <redirect/>
      <transition name="guess" to="evaluateGuess">
      	<action expression="#{numberGuess.guess}" />
      </transition>
   </start-page>
   
   <decision name="evaluateGuess" expression="#{numberGuess.correctGuess}">
      <transition name="true" to="win"/>
      <transition name="false" to="evaluateRemainingGuesses"/>
   </decision>
   
   <decision name="evaluateRemainingGuesses" expression="#{numberGuess.lastGuess}">
      <transition name="true" to="lose"/>
      <transition name="false" to="displayGuess"/>
   </decision>
   
   <page name="win" view-id="/win.jsp">
      <redirect/>
      <end-conversation />
   </page>
   
   <page name="lose" view-id="/lose.jsp">
      <redirect/>
      <end-conversation />
   </page>
   
</pageflow-definition>]]></programlisting>

        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/plugin-jbpm-numguess.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/plugin-jbpm-numguess.png" align="center"/>
          </imageobject>
        </mediaobject>
        
        <para>
            There are two things we notice immediately here:
        </para>
	    
	    <itemizedlist>
	        <listitem>
	        <para>
	            The JSF/Seam navigation rules are <emphasis>much</emphasis> simpler.
	            (However, this obscures the fact that the underlying Java code
	            is more complex.)
	        </para>
	        </listitem>
	        <listitem>
	        <para>
	            The jPDL makes the user interaction immediately understandable,
	            without us needing to even look at the JSP or Java code.
	        </para>
	        </listitem>
	    </itemizedlist>
	    
	    <para>
	        In addition, the stateful model is more <emphasis>constrained</emphasis>.
	        For each logical state (each step in the page flow), there are a 
	        constrained set of possible transitions to other states. The stateless
	        model is an <emphasis>ad hoc</emphasis> model which is suitable to 
	        relatively unconstrained, freeform navigation where the user decides
	        where he/she wants to go next, not the application.
	    </para>
	    
	    <para>
	        The stateful/stateless navigation distinction is quite similar to
	        the traditional view of modal/modeless interaction. Now, Seam 
	        applications are not usually modal in the simple sense of the 
	        word - indeed, avoiding application modal behavior is one of the
	        main reasons for having conversations! However, Seam applications
	        can be, and often are, modal at the level of a particular 
	        conversation. It is well-known that modal behavior is something
	        to avoid as much as possible; it is very difficult to predict the
	        order in which your users are going to want to do things! However,
	        there is no doubt that the stateful model has its place.
	    </para>
	    
	    <para>
	        The biggest contrast between the two models is the back-button
	        behavior.
	    </para>
	    
	    </section>
	    
	    <section>
	        <title>Seam and the back button</title>
	    
	    <para>
	        When JSF or Seam navigation rules are used, Seam lets the user freely 
	        navigate via the back, forward and refresh buttons. It is the
	        responsibility of the application to ensure that conversational
	        state remains internally consistent when this occurs. Experience
	        with the combination of web application frameworks like Struts 
	        or WebWork - that do not support a conversational model - and 
	        stateless component models like EJB stateless session beans 
	        or the Spring framework has taught many developers that this is
	        close to impossible to do! However, our experience is that in 
	        the context of Seam, where there is a well-defined conversational
	        model, backed by stateful session beans, it is actually quite 
	        straightforward. Usually it is as simple as combining the use 
	        of <literal>no-conversation-view-id</literal> with null 
	        checks at the beginning of action listener methods. We consider
	        support for freeform navigation to be almost always desirable.
	    </para>
	    
	    <para>
	        In this case, the <literal>no-conversation-view-id</literal> 
	        declaration goes in <literal>pages.xml</literal>. It tells
	        Seam to redirect to a different page if a request originates
	        from a page rendered during a conversation, and that conversation
	        no longer exists:
	    </para>
	    
	    <programlisting><![CDATA[<page view-id="/checkout.xhtml" 
        no-conversation-view-id="/main.xhtml"/>]]></programlisting>
	    
	    <para>
	        On the other hand, in the stateful model, backbuttoning is 
	        interpreted as an undefined transition back to a previous state.
	        Since the stateful model enforces a defined set of transitions
	        from the current state, back buttoning is by default disallowed 
	        in the stateful model! Seam transparently detects the use of the
	        back button, and blocks any attempt to perform an action from
	        a previous, "stale" page, and simply redirects the user to 
	        the "current" page (and displays a faces message). Whether you 
	        consider this a feature or a limitation of the stateful model 
	        depends upon your point of view: as an application developer, 
	        it is a feature; as a user, it might be frustrating! You can
	        enable backbutton navigation from a particular page node by
	        setting <literal>back="enabled"</literal>.
	    </para>
	    
        <programlisting><![CDATA[<page name="checkout" 
        view-id="/checkout.xhtml" 
        back="enabled">
    <redirect/>
    <transition to="checkout"/>
    <transition name="complete" to="complete"/>
</page>]]></programlisting>

        <para>
            This allows backbuttoning <emphasis>from</emphasis> the
            <literal>checkout</literal> state to <emphasis>any previous
            state!</emphasis>
        </para>
        
        <para>
            Of course, we still need to define what happens if a request 
            originates from a page rendered during a pageflow, and the
            conversation with the pageflow no longer exists. In this case,
            the <literal>no-conversation-view-id</literal> declaration
            goes into the pageflow definition:
        </para>

        <programlisting><![CDATA[<page name="checkout" 
        view-id="/checkout.xhtml" 
        back="enabled" 
        no-conversation-view-id="/main.xhtml">
    <redirect/>
    <transition to="checkout"/>
    <transition name="complete" to="complete"/>
</page>]]></programlisting>


    	    <para>
	        In practice, both navigation models have their place, and you'll 
	        quickly learn to recognize when to prefer one model over the other.
	        </para>

        </section>
    </section>
    
    <section>
        <title>Using jPDL pageflows</title>
        
        <section>
            <title>Installing pageflows</title>
        
        <para>
            We need to install the Seam jBPM-related components, and tell them
            where to find our pageflow definition. We can specify this
            Seam configuration in <literal>components.xml</literal>.
        </para>
        
        <programlisting><![CDATA[<bpm:jbpm>
    <bpm:pageflow-definitions>
        <value>pageflow.jpdl.xml</value>
    </bpm:pageflow-definitions>
</bpm:jbpm>]]></programlisting>

        <para>
            The first line installs jBPM, the second points to a jPDL-based
            pageflow definition.
        </para>
        
        </section>
        
        <section>
            <title>Starting pageflows</title>
        
        <para>
            We "start" a jPDL-based pageflow by specifying the name of the
            process definition using a <literal>@Begin</literal>,
            <literal>@BeginTask</literal> or <literal>@StartTask</literal> 
            annotation:
        </para>
        
        <programlisting><![CDATA[@Begin(pageflow="numberguess")
public void begin() { ... }]]></programlisting>

		<para>Alternatively we can start a pageflow using pages.xml:</para>
		
		<programlisting><![CDATA[<page>
        <begin-conversation pageflow="numberguess"/>
    </page>]]></programlisting>
        
        <para>
            If we are beginning the pageflow during the <literal>RENDER_RESPONSE</literal>
            phase—during a <literal>@Factory</literal> or <literal>@Create</literal>
            method, for example—we consider ourselves to be already at the page being 
            rendered, and use  a <literal>&lt;start-page&gt;</literal> node as the first node 
            in the pageflow, as in the example above.
        </para>
        
        <para>
            But if the pageflow is begun as the result of an action listener invocation,
            the outcome of the action listener determines which is the first page to be
            rendered. In this case, we use a <literal>&lt;start-state&gt;</literal> as
            the first node in the pageflow, and declare a transition for each possible
            outcome:
        </para>
        
        <programlisting><![CDATA[<pageflow-definition name="viewEditDocument">

    <start-state name="start">
        <transition name="documentFound" to="displayDocument"/>
        <transition name="documentNotFound" to="notFound"/>
    </start-state>
    
    <page name="displayDocument" view-id="/document.jsp">
        <transition name="edit" to="editDocument"/>
        <transition name="done" to="main"/>
    </page>
    
    ...
    
    <page name="notFound" view-id="/404.jsp">
        <end-conversation/>
    </page>
    
</pageflow-definition>]]></programlisting>

        </section>
        
        <section>
            <title>Page nodes and transitions</title>

        <para>
            Each <literal>&lt;page&gt;</literal> node represents a state where
            the system is waiting for user input:
        </para>
        
        <programlisting><![CDATA[<page name="displayGuess" view-id="/numberGuess.jsp">
    <redirect/>
    <transition name="guess" to="evaluateGuess">
        <action expression="#{numberGuess.guess}" />
    </transition>
</page>]]></programlisting>
        
        <para>
            The <literal>view-id</literal> is the JSF view id. The <literal>&lt;redirect/&gt;</literal>
            element has the same effect as <literal>&lt;redirect/&gt;</literal> in a 
            JSF navigation rule: namely, a post-then-redirect behavior, to overcome problems
            with the browser's refresh button. (Note that Seam propagates conversation contexts
            over these browser redirects. So there is no need for a Ruby on Rails style "flash"
            construct in Seam!)
        </para>
        
        <para>
            The transition name is the name of a JSF outcome triggered by clicking
            a command button or command link in <literal>numberGuess.jsp</literal>. 
        </para>
        
        <programlisting><![CDATA[<h:commandButton type="submit" value="Guess" action="guess"/>]]></programlisting>
        
        <para>
            When the transition is triggered by clicking this button, jBPM will activate the
            transition action by calling the <literal>guess()</literal> method of the
            <literal>numberGuess</literal> component. Notice that the syntax used for
            specifying actions in the jPDL is just a familiar JSF EL expression, and that 
            the transition action handler is just a method of a Seam component in the
            current Seam contexts. So we have exactly the same event model for jBPM events 
            that we already have for JSF events! (The <emphasis>One Kind of Stuff</emphasis> 
            principle.)
        </para>
        
        <para>
            In the case of a null outcome (for example, a command button with no 
            <literal>action</literal> defined), Seam will signal the transition with no
            name if one exists, or else simply redisplay the page if all transitions
            have names. So we could slightly simplify our example pageflow and this button:
        </para>
        
        <programlisting><![CDATA[<h:commandButton type="submit" value="Guess"/>]]></programlisting>
        
        <para>
            Would fire the following un-named transition:
        </para>
        
        <programlisting><![CDATA[<page name="displayGuess" view-id="/numberGuess.jsp">
    <redirect/>
    <transition to="evaluateGuess">
        <action expression="#{numberGuess.guess}" />
    </transition>
</page>]]></programlisting>

        <para>
            It is even possible to have the button call an action method, in which case the
            action outcome will determine the transition to be taken:
        </para>
        
        <programlisting><![CDATA[<h:commandButton type="submit" value="Guess" action="#{numberGuess.guess}"/>]]></programlisting>
        
<programlisting><![CDATA[<page name="displayGuess" view-id="/numberGuess.jsp">
    <transition name="correctGuess" to="win"/>
    <transition name="incorrectGuess" to="evaluateGuess"/>
</page>]]></programlisting>

        <para>
            However, this is considered an inferior style, since it moves responsibility for
            controlling the flow out of the pageflow definition and back into the other
            components. It is much better to centralize this concern in the pageflow itself.
        </para>
        
        </section>
        
        <section>
            <title>Controlling the flow</title>

        <para>
            Usually, we don't need the more powerful features of jPDL when defining pageflows. 
            We do need the <literal>&lt;decision&gt;</literal> node, however:
        </para>
        
<programlisting><![CDATA[<decision name="evaluateGuess" expression="#{numberGuess.correctGuess}">
    <transition name="true" to="win"/>
    <transition name="false" to="evaluateRemainingGuesses"/>
</decision>]]></programlisting>

        <para>
            A decision is made by evaluating a JSF EL expression in the Seam contexts.
        </para>
        
        </section>
        
        <section>
            <title>Ending the flow</title>
   
        <para>
            We end the conversation using <literal>&lt;end-conversation&gt;</literal>
            or <literal>@End</literal>. (In fact, for readability, use of 
            <emphasis>both</emphasis> is encouraged.)
        </para>
        
<programlisting><![CDATA[<page name="win" view-id="/win.jsp">
    <redirect/>
    <end-conversation/>
</page>]]></programlisting>

        <para>
            Optionally, we can end a task, specify a jBPM <literal>transition</literal> 
            name. In this case, Seam will signal the end of the current task in the 
            overarching business process.
        </para>
        
<programlisting><![CDATA[<page name="win" view-id="/win.jsp">
    <redirect/>
    <end-task transition="success"/>
</page>]]></programlisting>

        </section>
        
        <section>
            <title>Pageflow composition</title>
            <para>
                It is possible to compose pageflows and have one pageflow pause 
                pause while another pageflow executes. The <literal>&lt;process-state&gt;</literal>
                node pauses the outer pageflow, and begins execution of a named 
                pageflow:
            </para>
            
<programlisting><![CDATA[<process-state name="cheat">
    <sub-process name="cheat"/>
    <transition to="displayGuess"/>
</process-state>]]></programlisting>

            <para>
                The inner flow begins executing at a <literal>&lt;start-state&gt;</literal>
                node. When it reaches an <literal>&lt;end-state&gt;</literal> node, 
                execution of the inner flow ends, and execution of the outer flow
                resumes with the transition defined by the <literal>&lt;process-state&gt;</literal>
                element.
            </para>
            
        </section>

    </section>
    
    <section>
        <title>Business process management in Seam</title>
        <para>
            A business process is a well-defined set of tasks that must
            be performed by users or software systems according to 
            well-defined rules about <emphasis>who</emphasis> can perform 
            a task, and <emphasis>when</emphasis> it should be performed.
            Seam's jBPM integration makes it easy to display lists of
            tasks to users and let them manage their tasks. Seam also
            lets the application store state associated with the business
            process in the <literal>BUSINESS_PROCESS</literal> context,
            and have that state made persistent via jBPM variables.
        </para>
        
        <para>
            A simple business process definition looks much the same as a 
            page flow definition (<emphasis>One Kind of Stuff</emphasis>), 
            except that instead of <literal>&lt;page&gt;</literal> nodes,
            we have <literal>&lt;task-node&gt;</literal> nodes. In a 
            long-running business process, the wait states are where the
            system is waiting for some user to log in and perform a task.
        </para>
        
        <programlisting><![CDATA[<process-definition name="todo">
   
   <start-state name="start">
      <transition to="todo"/>
   </start-state>
   
   <task-node name="todo">
      <task name="todo" description="#{todoList.description}">
         <assignment actor-id="#{actor.id}"/>
      </task>
      <transition to="done"/>
   </task-node>
   
   <end-state name="done"/>
   
</process-definition>]]></programlisting>

        
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/plugin-jbpm-todo.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/plugin-jbpm-todo.png" align="center"/>
          </imageobject>
        </mediaobject>
        
        <para>
            It is perfectly possible that we might have both jPDL business 
            process definitions and jPDL pageflow definitions in the
            same project. If so, the relationship between the two is that
            a single <literal>&lt;task&gt;</literal> in a business process
            corresponds to a whole pageflow 
            <literal>&lt;pageflow-definition&gt;</literal>
        </para>
        </section>
    
        <section>
            <title>Using jPDL business process definitions</title>
        
        <section>
            <title>Installing process definitions</title>
        
        <para>
            We need to install jBPM, and tell it where to find the
            business process definitions:
        </para>
        
        <programlisting><![CDATA[<bpm:jbpm>
    <bpm:process-definitions>
        <value>todo.jpdl.xml</value>
    </bpm:process-definitions>
</bpm:jbpm>]]></programlisting>

        <para>
            As jBPM processes are persistent across application restarts, 
            when using Seam in a production environment you won't want to
            install the process definition every time the application starts.
            Therefore, in a production environment, you'll need to deploy
            the process to jBPM outside of Seam. In other words, only install
            process definitions from <literal>components.xml</literal> when
            developing your application.
        </para>

        </section>
        
        <section>
            <title>Initializing actor ids</title>
        
        <para>
            We always need to know what user is currently logged in.
            jBPM "knows" users by their <emphasis>actor id</emphasis>
            and <emphasis>group actor ids</emphasis>. We specify the
            current actor ids using the built in Seam component named
            <literal>actor</literal>:
        </para>
        
        <programlisting><![CDATA[@In Actor actor;

public String login() {
    ...
    actor.setId( user.getUserName() );
    actor.getGroupActorIds().addAll( user.getGroupNames() );
    ...
}]]></programlisting>

        </section>
        
        <section>
            <title>Initiating a business process</title>
        
        <para>
            To initiate a business process instance, we use the 
            <literal>@CreateProcess</literal> annotation:
        </para>
        
        <programlisting><![CDATA[@CreateProcess(definition="todo")
public void createTodo() { ... }]]></programlisting>

        <para>Alternatively we can initiate a business process using pages.xml:</para>
        
        <programlisting><![CDATA[<page>
    <create-process definition="todo" />
</page>]]></programlisting>

        </section>
        
        <section>
            <title>Task assignment</title>
        
        <para>
            When a process reaches a task node, task instances are created. These must be 
            assigned to users or user groups. We can either hardcode our actor ids, or 
            delegate to a Seam component:
        </para>
        
        <programlisting><![CDATA[<task name="todo" description="#{todoList.description}">
    <assignment actor-id="#{actor.id}"/>
</task>]]></programlisting>

        <para>
            In this case, we have simply assigned the task to the current user. 
            We can also assign tasks to a pool:
        </para>

        <programlisting><![CDATA[<task name="todo" description="#{todoList.description}">
    <assignment pooled-actors="employees"/>
</task>]]></programlisting>

        </section>
        
        <section>
            <title>Task lists</title>

        <para>
            Several built-in Seam components make it easy to display task lists. 
            The <literal>pooledTaskInstanceList</literal> is a list of pooled tasks 
            that users may assign to themselves:
        </para>
        
        <programlisting><![CDATA[<h:dataTable value="#{pooledTaskInstanceList}" var="task">
    <h:column>
        <f:facet name="header">Description</f:facet>
        <h:outputText value="#{task.description}"/>
    </h:column>
    <h:column>
        <s:link action="#{pooledTask.assignToCurrentActor}" value="Assign" taskInstance="#{task}"/>
    </h:column>            	
</h:dataTable>]]></programlisting>

        <para>
            Note that instead of <literal>&lt;s:link&gt;</literal> we could have used
            a plain JSF <literal>&lt;h:commandLink&gt;</literal>:
        </para>

        <programlisting><![CDATA[<h:commandLink action="#{pooledTask.assignToCurrentActor}"> 
    <f:param name="taskId" value="#{task.id}"/>
</h:commandLink>]]></programlisting>

        <para>
            The <literal>pooledTask</literal> component is a built-in component that
            simply assigns the task to the current user.
        </para>
        
        <para>
            The <literal>taskInstanceListForType</literal> component includes tasks of 
            a particular type that are assigned to the current user:
        </para>
        
        <programlisting><![CDATA[<h:dataTable value="#{taskInstanceListForType['todo']}" var="task">
    <h:column>
        <f:facet name="header">Description</f:facet>
        <h:outputText value="#{task.description}"/>
    </h:column>
    <h:column>
        <s:link action="#{todoList.start}" value="Start Work" taskInstance="#{task}"/>
    </h:column>            	
</h:dataTable>]]></programlisting>

        </section>
        
        <section>
            <title>Performing a task</title>
        
        <para>
            To begin work on a task, we use either <literal>@StartTask</literal>
            or <literal>@BeginTask</literal> on the listener method:
        </para>
        
        <programlisting><![CDATA[@StartTask
public String start() { ... }]]></programlisting>

        <para>Alternatively we can begin work on a task using pages.xml:</para>
        
        <programlisting><![CDATA[<page>
    <start-task />
</page>]]></programlisting>
        
        <para>    
            These annotations begin a special kind of conversation that has 
            significance in terms of the overarching business process. Work done 
            by this conversation has access to state held in the business
            process context.
        </para>
        
        <para>
            If we end the conversation using <literal>@EndTask</literal>, Seam
            will signal the completion of the task:
        </para>
        
        <programlisting><![CDATA[@EndTask(transition="completed")
public String completed() { ... }]]></programlisting>

        <para>Alternatively we can use pages.xml:</para>
        
        <programlisting><![CDATA[<page>
    <end-task transition="completed" />
</page>]]></programlisting>

        <para>
            You can also use EL to specify the transition in pages.xml.
        </para>

        <para>
            At this point, jBPM takes over and continues executing the business process
            definition. (In more complex processes, several tasks might need to be
            completed before process execution can resume.)
        </para>                
        
            <para>
            Please refer to the jBPM documentation for a more thorough overview of 
            the sophisticated features that jBPM provides for managing complex
            business processes.
            </para>

        </section>
    </section>
    
</chapter>
    <chapter id="persistence">
    <title>Seam and Object/Relational Mapping</title>
    
    <para>
        Seam provides extensive support for the two most popular persistence
        architectures for Java: Hibernate3, and the Java Persistence API
        introduced with EJB 3.0. Seam's unique state-management architecture
        allows the most sophisticated ORM integration of any web application 
        framework.
    </para>
    
    <section>
        <title>Introduction</title>
    
    <para>
        Seam grew out of the frustration of the Hibernate team with the 
        statelessness typical of the previous generation of Java application 
        architectures. The state management architecture of Seam was originally
        designed to solve problems relating to persistence—in particular
        problems associated with <emphasis>optimistic transaction processing</emphasis>.
        Scalable online applications always use optimistic transactions. An atomic 
        (database/JTA) level transaction should not span a user interaction unless
        the application is designed to support only a very small number of concurrent
        clients. But almost all interesting work involves first displaying data
        to a user, and then, slightly later, updating the same data. So Hibernate was
        designed to support the idea of a persistence context which spanned an
        optimistic transaction. 
    </para>
    
    <para>
        Unfortunately, the so-called "stateless" architectures that preceded Seam and 
        EJB 3.0 had no construct for representing an optimistic transaction. So, instead,
        these architectures provided persistence contexts scoped to the atomic
        transaction. Of course, this resulted in many problems for users, and is the
        cause of the number one user complaint about Hibernate: the dreaded 
        <literal>LazyInitializationException</literal>. What we need is a construct
        for representing an optimistic transaction in the application tier.
    </para>
    
    <para>
        EJB 3.0 recognizes this problem, and introduces the idea of a stateful
        component (a stateful session bean) with an <emphasis>extended persistence 
        context</emphasis> scoped to the lifetime of the component. This is a
        partial solution to the problem (and is a useful construct in and of 
        itself) however there are two problems:
    </para>
    
    <itemizedlist>
        <listitem>
            <para>
                The lifecycle of the stateful session bean must be managed manually
                via code in the web tier (it turns out that this is a subtle problem
                and much more difficult in practice than it sounds).
            </para>
        </listitem>
        <listitem>
            <para>
                Propagation of the persistence context between stateful components
                in the same optimistic transaction is possible, but tricky.
            </para>
        </listitem>
    </itemizedlist>
    
    <para>
        Seam solves the first problem by providing conversations, and stateful
        session bean components scoped to the conversation. (Most conversations 
        actually represent optimistic transactions in the data layer.) This is
        sufficient for many simple applications (such as the Seam booking
        demo) where persistence context propagation is not needed. For more
        complex applications, with many loosly-interacting components in each
        conversation, propagation of the persistence context across components
        becomes an important issue. So Seam extends the persistence context
        management model of EJB 3.0, to provide conversation-scoped extended
        persistence contexts.
    </para>
    
    </section>
    
    <section id="persistence.seam-managed-transactions">
    	<title>Seam managed transactions</title>
    	<para>
            EJB session beans feature declarative transaction management. The EJB container is able
            to start a transaction transparently when the bean is invoked, and end it when the
            invocation ends. If we write a session bean method that acts as a JSF action listener, 
            we can do all the work associated with that action in one transaction, and be sure that
            it is committed or rolled back when we finish processing the action. This is a great feature, 
            and all that is needed by some Seam applications.
    	</para>

    	<para>
            However, there is a problem with this approach. A Seam application may not perform all data
            access for a request from a single method call to a session bean.
    	</para>

    	<itemizedlist>
    		<listitem>
    			<para>
                    The request might require processing by several loosly-coupled components, each
                    of which is called independently from the web layer. It is common to see several
                    or even many calls per request from the web layer to EJB components in Seam.
    			</para>
    		</listitem>
    		<listitem>
                <para>
                    Rendering of the view might require lazy fetching of associations.
                </para>
    		</listitem>
    	</itemizedlist>

    	<para>
            The more transactions per request, the more likely we are to encounter atomicity
            and isolation problems when our application is processing many concurrent requests.
            Certainly, all write operations should occur in the same transaction!
    	</para>

    	<para>
            Hibernate users developed the <emphasis>"open session in view"</emphasis> pattern to work 
            around this problem. In the Hibernate community, "open session in view" was historically 
            even more important because frameworks like Spring use transaction-scoped persistence contexts. 
            So rendering the view would cause <literal>LazyInitializationException</literal>s when 
            unfetched associations were accessed.
    	</para>

    	<para>
            This pattern is usually implemented as a single transaction which spans the entire request. 
            There are several problems with this implementation, the most serious being that we 
            can never be sure that a transaction is successful until we commit it—but by the 
            time the "open session in view" transaction is committed, the view is fully rendered, and 
            the rendered response may already have been flushed to the client. How can we notify the 
            user that their transaction was unsuccessful? 
    	</para>

    	<para>
            Seam solves both the transaction isolation problem and the association fetching problem, 
            while working around the problems with "open session in view". The solution comes in two 
            parts:
    	</para>

    	<itemizedlist>
    		<listitem>
    			<para>
                    use an extended persistence context that is scoped to the conversation, 
                    instead of to the transaction
    			</para>
    		</listitem>
    		<listitem>
    			<para>
                    use two transactions per request; the first spans the beginning of the update model
                    values phase until the end of the invoke application phase; the second spans the
                    render response phase
    			</para>
    		</listitem>
    	</itemizedlist>

    	<para>
            In the next section, we'll tell you how to set up a conversation-scope persistence
            context. But first we need to tell you how to enable Seam transaction management.
            Note that you can use conversation-scoped persistence contexts without Seam
            transaction management, and there are good reasons to use Seam transaction management
            even when you're not using Seam-managed persistence contexts. However, the two
            facilities were designed to work together, and work best when used together.
    	</para>

    	<para>
            Seam transaction management is useful even if you're using EJB 3.0 
            container-managed persistence contexts. But it is especially useful
            if you use Seam outside a Java EE 5 environment, or in any other
            case where you would use a Seam-managed persistence context.
    	</para>

    	<section>
    		<title>Disabling Seam-managed transactions</title>

    		<para>
                Seam transaction management is enabled by default for all JSF requests.
                If you want to <emphasis>disable</emphasis> this feature, you can do it
                in <literal>components.xml</literal>:
    		</para>

    		<programlisting><![CDATA[<core:init transaction-management-enabled="false"/>
        
<transaction:no-transaction />]]></programlisting>

    	</section>

    	<section>
    		<title>Configuring a Seam transaction manager</title>

    		<para>
    			Seam provides a transaction management abstraction for beginning, committing, rolling back, and
    			synchronizing with a transaction. By default Seam uses a JTA transaction component that integrates with
    			Container Managed and programmatic EJB transactions. If you are working in a Java EE 5 environment, you
    			should install the EJB synchronization component in <literal>components.xml</literal>:
    		</para>
    	   
    	   <programlisting><![CDATA[<transaction:ejb-transaction />]]></programlisting>
    	   
    		<para>
    			However, if you are working in a non EE 5 container, Seam will try auto detect the transaction
    			synchronization mechanism to use. However, if Seam is unable to detect the correct transaction
    			synchronization to use, you may find you need configure one of the following:
    		</para>
    		<itemizedlist>
    			<listitem>
    			   <para>
    				   JPA RESOURCE_LOCAL transactions with the
    				   <literal>javax.persistence.EntityTransaction</literal>
    				   interface.
    				</para>
    			</listitem>
    			<listitem>
    			   <para>
    				   Hibernate managed transactions with the
    				   <literal>org.hibernate.Transaction</literal>
    				   interface.
    			   </para>
    			</listitem>
    			<listitem>
    			   <para>
    				   Spring managed transactions with the
    				   <literal>org.springframework.transaction.PlatformTransactionManager</literal>
    				   interface.
    			   </para>
    			</listitem>
                <listitem>
                   <para>
                      Explicitly disable Seam managed transactions
                   </para>
                </listitem>
    		</itemizedlist>
    		<para>
    			Configure JPA RESOURCE_LOCAL transaction management by adding the following to your components.xml where
    			<literal>#{em}</literal>
    			is the name of the
    			<literal>persistence:managed-persistence-context</literal>
    			component. If your managed persistence context is named <literal>entityManager</literal>, you can
				opt to leave out the <literal>entity-manager</literal> attribute. (see
    			<link linkend="persistence.seam-managed-persistence-contexts">Seam-managed persistence contexts</link>
    			)
    		</para>
    		<programlisting><![CDATA[<transaction:entity-transaction entity-manager="#{em}"/>]]></programlisting>
    		<para>
    			To configure Hibernate managed transactions declare the following in your components.xml where
    			<literal>#{hibernateSession}</literal>
    			is the name of the project's
    			<literal>persistence:managed-hibernate-session</literal>
    			component. If your managed hibernate session is named <literal>session</literal>, you can
				opt to leave out the <literal>session</literal> attribute. (see
    			<link linkend="persistence.seam-managed-persistence-contexts">Seam-managed persistence contexts</link>
    			)
    		</para>
    		<programlisting><![CDATA[<transaction:hibernate-transaction session="#{hibernateSession}"/>]]></programlisting>
            <para>
                To explicitly disable Seam managed transactions declare the following in your components.xml:
              </para>
              <programlisting><![CDATA[<transaction:no-transaction />]]></programlisting>
    		<para>
    			For configuring Spring managed transactions see
    			<link linkend="spring-transactions">using Spring PlatformTransactionManagement</link>
    			.
    		</para>
    	</section>
    	<section>
    		<title>Transaction synchronization</title>

    		<para>
    			Transaction synchronization provides callbacks for transaction related events
    			such as <literal>beforeCompletion()</literal> and <literal>afterCompletion()</literal>.
                By default, Seam uses it's own transaction synchronization component which requires explicit use of the
    			Seam transaction component when committing a transaction to ensure synchronization callbacks are
    			correctly executed. If in a Java EE 5 environment the
    			<literal>&lt;transaction:ejb-transaction/&gt;</literal>
    			component should be be declared in <literal>components.xml</literal> to ensure that Seam synchronization callbacks are
    			correctly called if the container commits a transaction outside of Seam's knowledge.
    		</para>
    	</section>
    </section>

    <section id="persistence.seam-managed-persistence-contexts">
        <title>Seam-managed persistence contexts</title>

        <para>
            If you're using Seam outside of a Java EE 5 environment, you can't rely upon the
            container to manage the persistence context lifecycle for you. Even if you are
            in an EE 5 environment, you might have a complex application with many loosly
            coupled components that collaborate together in the scope of a single conversation,
            and in this case you might find that propagation of the persistence context between
            component is tricky and error-prone.
        </para>
        
        <para>
            In either case, you'll need to use a <emphasis>managed persistence context</emphasis> 
            (for JPA) or a <emphasis>managed session</emphasis> (for Hibernate) in your components.
            A Seam-managed persistence context is just a built-in Seam component that manages an
            instance of <literal>EntityManager</literal> or <literal>Session</literal> in the
            conversation context. You can inject it with <literal>@In</literal>.
        </para>
        
        <para>
            Seam-managed persistence contexts are extremely efficient in a clustered environment.
            Seam is able to perform an optimization that EJB 3.0 specification does not allow 
            containers to use for container-managed extended persistence contexts. Seam supports
            transparent failover of extended persisence contexts, without the need to replicate
            any persistence context state between nodes. (We hope to fix this oversight in the
            next revision of the EJB spec.)
        </para>
        
        <section>
        <title>Using a Seam-managed persistence context with JPA</title>
        
        <para>
            Configuring a managed persistence context is easy. In <literal>components.xml</literal>, 
            we can write:
        </para>

        <programlisting><![CDATA[<persistence:managed-persistence-context name="bookingDatabase" 
                                  auto-create="true"
                   persistence-unit-jndi-name="java:/EntityManagerFactories/bookingData"/>]]></programlisting>

        <para>
            This configuration creates a conversation-scoped Seam component named 
            <literal>bookingDatabase</literal> that manages the lifecycle of <literal>EntityManager</literal> 
            instances for the persistence unit (<literal>EntityManagerFactory</literal> instance) 
            with JNDI name <literal>java:/EntityManagerFactories/bookingData</literal>.
        </para>
        
        <para>
            Of course, you need to make sure that you have bound the <literal>EntityManagerFactory</literal> 
            into JNDI. In JBoss, you can do this by adding the following property setting to 
            <literal>persistence.xml</literal>.
        </para>
        
        <programlisting><![CDATA[<property name="jboss.entity.manager.factory.jndi.name" 
          value="java:/EntityManagerFactories/bookingData"/>]]></programlisting>
        
        <para>
            Now we can have our <literal>EntityManager</literal> injected using:
        </para>

        <programlisting><![CDATA[@In EntityManager bookingDatabase;]]></programlisting>
        
        <para>
            If you are using EJB3 and mark your class or method 
            <literal>@TransactionAttribute(REQUIRES_NEW)</literal> then the 
            transaction and persistence context shouldn't be propagated to method
            calls on this object.  However as the Seam-managed persistence
            context is propagated to any component within the conversation, it
            will be propagated to methods marked <literal>REQUIRES_NEW</literal>.
            Therefore, if you mark a method <literal>REQUIRES_NEW</literal> then
            you should access the entity manager using @PersistenceContext.
        </para>
                
    </section>

    <section>
        <title>Using a Seam-managed Hibernate session</title>
                
        <para>
            Seam-managed Hibernate sessions are similar. In <literal>components.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<persistence:hibernate-session-factory name="hibernateSessionFactory"/>

<persistence:managed-hibernate-session name="bookingDatabase" 
                                auto-create="true"
                  session-factory-jndi-name="java:/bookingSessionFactory"/>]]></programlisting>

        <para>
            Where <literal>java:/bookingSessionFactory</literal> is the name of the session factory 
            specified in <literal>hibernate.cfg.xml</literal>. 
        </para>
        
        <programlisting><![CDATA[<session-factory name="java:/bookingSessionFactory">
    <property name="transaction.flush_before_completion">true</property>
    <property name="connection.release_mode">after_statement</property>
    <property name="transaction.manager_lookup_class">org.hibernate.transaction.JBossTransactionManagerLookup</property>
    <property name="transaction.factory_class">org.hibernate.transaction.JTATransactionFactory</property>
    <property name="connection.datasource">java:/bookingDatasource</property>
    ...
</session-factory>]]></programlisting>

        <para>
            Note that Seam does not flush the session, so you should always enable
            <literal>hibernate.transaction.flush_before_completion</literal> to 
            ensure that the session is automatically flushed before the JTA transaction
            commits.
        </para>
        
        <para>
            We can now have a managed Hibernate <literal>Session</literal> injected into our
            JavaBean components using the following code:
        </para>
        
        <programlisting><![CDATA[@In Session bookingDatabase;]]></programlisting>

    </section>
            
    <section>
        <title>Seam-managed persistence contexts and atomic conversations</title>
        <para>
            Persistence contexts scoped to the conversation allows you to program optimistic 
            transactions that span multiple requests to the server without the need to use the 
            <literal>merge()</literal> operation , without the need to re-load 
            data at the beginning of each request, and without the need to wrestle with the 
            <literal>LazyInitializationException</literal> or 
            <literal>NonUniqueObjectException</literal>.
        </para>
        
        <para>
            As with any optimistic transaction management, transaction isolation and consistency
            can be achieved via use of optimistic locking. Fortunately, both Hibernate and EJB 
            3.0 make it very easy to use optimistic locking, by providing the 
            <literal>@Version</literal> annotation.
        </para>
        
        <para>
            By default, the persistence context is flushed (synchronized with the database)
            at the end of each transaction. This is sometimes the desired behavior. But very 
            often, we would prefer that all changes are held in memory and only written to
            the database when the conversation ends successfully. This allows for truly
            atomic conversations. As the result of a truly stupid and shortsighted decision
            by certain non-JBoss, non-Sun and non-Sybase members of the EJB 3.0 expert group, 
            there is currently no simple, usable and portable way to implement atomic 
            conversations using EJB 3.0 persistence. However, Hibernate provides this feature
            as a vendor extension to the <literal>FlushModeType</literal>s defined by the 
            specification, and it is our expectation that other vendors will soon provide
            a similar extension.
        </para>
        
        <para>
            Seam lets you specify <literal>FlushModeType.MANUAL</literal> when beginning a
            conversation. Currently, this works only when Hibernate is the underlying 
            persistence provider, but we plan to support other equivalent vendor extensions.
        </para>
        
        <programlisting><![CDATA[@In EntityManager em; //a Seam-managed persistence context

@Begin(flushMode=MANUAL)
public void beginClaimWizard() {
    claim = em.find(Claim.class, claimId);
}]]></programlisting>
        
        <para>
            Now, the <literal>claim</literal> object remains managed by the persistence context
            for the rest ot the conversation. We can make changes to the claim:
        </para>
        
        <programlisting><![CDATA[public void addPartyToClaim() {
    Party party = ....;
    claim.addParty(party);
}]]></programlisting>

        <para>
            But these changes will not be flushed to the database until we explicitly force
            the flush to occur:
        </para>
        
        <programlisting><![CDATA[@End
public void commitClaim() {
    em.flush();
}]]></programlisting>

         <para>
            Of course, you could set the <literal>flushMode</literal> to <literal>MANUAL</literal>
            from pages.xml, for example in a navigation rule:
        </para>
        
        <programlisting><![CDATA[<begin-conversation flush-mode="MANUAL" />]]></programlisting>

    </section>

    </section>
    
    <section>
        <title>Using the JPA "delegate"</title>
        
        <para>
            The <literal>EntityManager</literal> interface lets you access a vendor-specific
            API via the <literal>getDelegate()</literal> method. Naturally, the most interesting
            vendor is Hibernate, and the most powerful delegate interface is
            <literal>org.hibernate.Session</literal>. You'd be nuts to use anything else. Trust
            me, I'm not biased at all.
        </para>
        
        <para>
            But regardless of whether you're using Hibernate (genius!) or something else
            (masochist, or just not very bright), you'll almost certainly want to use the
            delegate in your Seam components from time to time. One approach would be the
            following:
        </para>
        
        <programlisting><![CDATA[@In EntityManager entityManager;

@Create
public void init() {
    ( (Session) entityManager.getDelegate() ).enableFilter("currentVersions");
}]]></programlisting>

        <para>
             But typecasts are unquestionably the ugliest syntax in the Java language, so most
             people avoid them whenever possible. Here's a different way to get at the 
             delegate. First, add the following line to <literal>components.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<factory name="session" 
         scope="STATELESS" 
         auto-create="true" 
         value="#{entityManager.delegate}"/>]]></programlisting>
        
        <para>
            Now we can inject the session directly:
        </para>
        
        <programlisting><![CDATA[@In Session session;

@Create
public void init() {
    session.enableFilter("currentVersions");
}]]></programlisting>

    </section>
    
    <section>
        <title>Using EL in EJB-QL/HQL</title>
        <para>
            Seam proxies the <literal>EntityManager</literal> or <literal>Session</literal>
            object whenever you use a Seam-managed persistence context or inject a container
            managed persistence context using <literal>@PersistenceContext</literal>. This
            lets you use EL expressions in your query strings, safely and efficiently. For
            example, this:
        </para>
        
        <programlisting><![CDATA[User user = em.createQuery("from User where username=#{user.username}")
         .getSingleResult();]]></programlisting>
         
        <para>is equivalent to:</para>
         
        <programlisting><![CDATA[User user = em.createQuery("from User where username=:username")
         .setParameter("username", user.getUsername())
         .getSingleResult();]]></programlisting>
         
        <para>
            Of course, you should never, ever write it like this:
        </para>
        
        <programlisting><![CDATA[User user = em.createQuery("from User where username=" + user.getUsername()) //BAD!
         .getSingleResult();]]></programlisting>
         
        <para>
            (It is inefficient and vulnerable to SQL injection attacks.)
        </para>
        
    </section>
    
    <section>
        <title>Using Hibernate filters</title>
        
        <para>
            The coolest, and most unique, feature of Hibernate is <emphasis>filters</emphasis>.
            Filters let you provide a restricted view of the data in the database. You can find 
            out more about filters in the Hibernate documentation. But we thought we'd mention
            an easy way to incorporate filters into a Seam application, one that works especially
            well with the Seam Application Framework.
        </para>
        
        <para>
            Seam-managed persistence contexts may have a list of filters defined, which will be
            enabled whenever an <literal>EntityManager</literal> or Hibernate <literal>Session</literal>
            is first created. (Of course, they may only be used when Hibernate is the underlying
            persistence provider.)
        </para>
        
        <programlisting><![CDATA[<persistence:filter name="regionFilter">
    <persistence:name>region</persistence:name>
    <persistence:parameters>
        <key>regionCode</key>
        <value>#{region.code}</value>
    </persistence:parameters>
</persistence:filter>

<persistence:filter name="currentFilter">
    <persistence:name>current</persistence:name>
    <persistence:parameters>
        <key>date</key>
        <value>#{currentDate}</value>
    </persistence:parameters>
</persistence:filter>

<persistence:managed-persistence-context name="personDatabase"
    persistence-unit-jndi-name="java:/EntityManagerFactories/personDatabase">
    <core:filters>
        <value>#{regionFilter}</value>
        <value>#{currentFilter}</value>
    </core:filters>
</persistence:managed-persistence-context>]]></programlisting>
        
    </section>    

</chapter>
    <chapter id="validation">
    <title>JSF form validation in Seam</title>
    <para>
        In plain JSF, validation is defined in the view:
    </para>
    
    <programlisting><![CDATA[<h:form>
    <h:messages/>

    <div>
        Country:
        <h:inputText value="#{location.country}" required="true">
            <my:validateCountry/>
        </h:inputText>
    </div>
    
    <div>
        Zip code:
        <h:inputText value="#{location.zip}" required="true">
            <my:validateZip/>
        </h:inputText>
    </div>

    <h:commandButton/>
</h:form>]]></programlisting>

    <para>
        In practice, this approach usually violates DRY, since most
        "validation" actually enforces constraints that are part of
        the data model, and exist all the way down to the database
        schema definition. Seam provides support for model-based
        constraints defined using Hibernate Validator.
    </para>
    
    <para>
        Let's start by defining our constraints, on our 
        <literal>Location</literal> class:
    </para>

    <programlisting><![CDATA[public class Location {
    private String country;
    private String zip;
    
    @NotNull
    @Length(max=30)
    public String getCountry() { return country; }
    public void setCountry(String c) { country = c; }

    @NotNull
    @Length(max=6)
    @Pattern("^\d*$")
    public String getZip() { return zip; }
    public void setZip(String z) { zip = z; }
}]]></programlisting>

    <para>
        Well, that's a decent first cut, but in practice it might be
        more elegant to use custom constraints instead of the ones
        built into Hibernate Validator:
    </para>

    <programlisting><![CDATA[public class Location {
    private String country;
    private String zip;
    
    @NotNull
    @Country
    public String getCountry() { return country; }
    public void setCountry(String c) { country = c; }

    @NotNull
    @ZipCode
    public String getZip() { return zip; }
    public void setZip(String z) { zip = z; }
}]]></programlisting>
    
    <para>
        Whichever route we take, we no longer need to specify the
        type of validation to be used in the JSF page. Instead, we
        can use <literal>&lt;s:validate&gt;</literal> to validate
        against the constraint defined on the model object.
    </para>
    
    <programlisting><![CDATA[<h:form>
    <h:messages/>

    <div>
        Country:
        <h:inputText value="#{location.country}" required="true">
            <s:validate/>
        </h:inputText>
    </div>
    
    <div>
        Zip code:
        <h:inputText value="#{location.zip}" required="true">
            <s:validate/>
        </h:inputText>
    </div>
    
    <h:commandButton/>

</h:form>]]></programlisting>

     <para>
         <emphasis>Note:</emphasis> specifying <literal>@NotNull</literal>
         on the model does <emphasis>not</emphasis> eliminate the requirement
         for <literal>required="true"</literal> to appear on the control!
         This is due to a limitation of the JSF validation architecture.
     </para>

    <para>
        This approach <emphasis>defines</emphasis> constraints on the model, and 
        <emphasis>presents</emphasis> constraint violations in the view—a
        significantly better design.
    </para>
    
     <para>
         However, it is not much less verbose than what we started with, 
         so let's try <literal>&lt;s:validateAll&gt;</literal>:
     </para>

    <programlisting><![CDATA[<h:form>
    
    <h:messages/>

    <s:validateAll>

        <div>
            Country:
            <h:inputText value="#{location.country}" required="true"/>
        </div>

        <div>
            Zip code:
            <h:inputText value="#{location.zip}" required="true"/>
        </div>

        <h:commandButton/>

    </s:validateAll>

</h:form>]]></programlisting>
     
     <para>
         This tag simply adds an <literal>&lt;s:validate&gt;</literal>
         to every input in the form. For a large form, it can save a lot
         of typing!
     </para>

     <para>
         Now we need to do something about displaying feedback to the 
         user when validation fails. Currently we are displaying all
         messages at the top of the form. What we would really like to
         do is display the message next to the field with the error
         (this is possible in plain JSF), highlight the field and 
         label (this is not possible) and, for good measure, display 
         some image next to the field (also not possible). We also
         want to display a little colored asterisk next to the label
         for each required form field.
         
     </para>
     
     <para>
         That's quite a lot of functionality we need for each field
         of our form. We wouldn't want to have to specify higlighting
         and the layout of the image, message and input field for every
         field on the form. So, instead, we'll specify the common
         layout in a facelets template:
     </para>
     
     <programlisting><![CDATA[<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:s="http://jboss.com/products/seam/taglib">
                 
    <div>
    
        <s:label styleClass="#{invalid?'error':''}">
            <ui:insert name="label"/>
            <s:span styleClass="required" rendered="#{required}">*</s:span>
        </s:label>
        
        <span class="#{invalid?'error':''}">
            <h:graphicImage value="/img/error.gif" rendered="#{invalid}"/>
            <s:validateAll>
                <ui:insert/>
            </s:validateAll>
        </span>
        
        <s:message styleClass="error"/>
        
    </div>
    
</ui:composition>]]></programlisting>
     
     <para>
         We can include this template for each of our form fields using
         <literal>&lt;s:decorate&gt;</literal>.
     </para>

    <programlisting><![CDATA[<h:form>

    <h:messages globalOnly="true"/>

    <s:decorate template="edit.xhtml">
        <ui:define name="label">Country:</ui:define>
        <h:inputText value="#{location.country}" required="true"/>
    </s:decorate>
    
    <s:decorate template="edit.xhtml">
        <ui:define name="label">Zip code:</ui:define>
        <h:inputText value="#{location.zip}" required="true"/>
    </s:decorate>

    <h:commandButton/>

</h:form>]]></programlisting>

    <para>
        Finally, we can use RichFaces Ajax to display validation messages as the user 
        is navigating around the form:
    </para>

    <programlisting><![CDATA[<h:form>

    <h:messages globalOnly="true"/>

    <s:decorate id="countryDecoration" template="edit.xhtml">
        <ui:define name="label">Country:</ui:define>
        <h:inputText value="#{location.country}" required="true">
            <a:support event="onblur" reRender="countryDecoration" bypassUpdates="true"/>
        </h:inputText>
    </s:decorate>
    
    <s:decorate id="zipDecoration" template="edit.xhtml">
        <ui:define name="label">Zip code:</ui:define>
        <h:inputText value="#{location.zip}" required="true">
            <a:support event="onblur" reRender="zipDecoration" bypassUpdates="true"/>
        </h:inputText>
    </s:decorate>

    <h:commandButton/>

</h:form>]]></programlisting>

    <para>
 		It's better style to define explicit ids for
        important controls on the page, especially if you want to do
        automated testing for the UI, using some toolkit like
        Selenium. If you don't provide explicit ids, JSF will generate
        them, but the generated values will change if you change
        anything on the page.
    </para>

    <programlisting><![CDATA[<h:form id="form">

    <h:messages globalOnly="true"/>

    <s:decorate id="countryDecoration" template="edit.xhtml">
        <ui:define name="label">Country:</ui:define>
        <h:inputText id="country" value="#{location.country}" required="true">
            <a:support event="onblur" reRender="countryDecoration" bypassUpdates="true"/>
        </h:inputText>
    </s:decorate>
    
    <s:decorate id="zipDecoration" template="edit.xhtml">
        <ui:define name="label">Zip code:</ui:define>
        <h:inputText id="zip" value="#{location.zip}" required="true">
            <a:support event="onblur" reRender="zipDecoration" bypassUpdates="true"/>
        </h:inputText>
    </s:decorate>

    <h:commandButton/>

</h:form>]]></programlisting>

	<para>
		And what if you want to specify a different message to be 
		displayed when validation fails?  You can use the Seam message
		bundle (and all it's goodies like el expressions inside the message,
		and per-view message bundles) with the Hibernate Validator:
	</para>
	
<programlisting><![CDATA[public class Location {
    private String name;
    private String zip;
    
    // Getters and setters for name

    @NotNull
    @Length(max=6)
    @ZipCode(message="#{messages['location.zipCode.invalid']}")
    public String getZip() { return zip; }
    public void setZip(String z) { zip = z; }
}]]></programlisting>	

<programlisting>
location.zipCode.invalid = The zip code is not valid for #{location.name}
</programlisting>

</chapter>
    <chapter id="groovy">
    <title>Groovy integration</title>

    <para>One aspect of JBoss Seam is its RAD (Rapid Application Development) capability. While not synonymous with RAD,
        one interesting tool in this space is dynamic languages. Until recently, choosing a dynamic language was
        required choosing a completely different development platform (a development platform with a set of APIs and a
        runtime so great that you would no longer want to use you old legacy Java [sic] APIs anymore, which would be
        lucky because you would be forced to use those proprietary APIs anyway). Dynamic languages built on top of the
        Java Virtual Machine, and <ulink url="http://groovy.codehaus.org">Groovy</ulink> in particular broke this
        approach in silos.</para>

    <para>JBoss Seam now unites the dynamic language world with the Java EE world by seamlessly integrating both static
        and dynamic languages. JBoss Seam lets the application developer use the best tool for the task, without context
        switching. Writing dynamic Seam components is exactly like writing regular Seam components. You use the same
        annotations, the same APIs, the same everything.</para>

    <section>
        <title id="groovy-intro">Groovy introduction</title>

        <para>Groovy is an agile dynamic language based on the Java language but with additional features inspired by
            Python, Ruby and Smalltalk. The strengths of Groovy are twofold:</para>

        <itemizedlist>
            <listitem>
                <para>Java syntax is supported in Groovy: Java code is Groovy code, making the learning curve very
                    smooth</para>
            </listitem>

            <listitem>
                <para>Groovy objects are Java objects, and Groovy classes are Java classes: Groovy integrates smoothly
                    with existing Java libraries and frameworks.</para>
            </listitem>
        </itemizedlist>

        <para>TODO: write a quick overview of the Groovy syntax add-on</para>
    </section>

    <section>
        <title>Writing Seam applications in Groovy</title>

        <para>There is not much to say about it. Since a Groovy object is a Java object, you can virtually write any
            Seam component, or any class for what it worth, in Groovy and deploy it. You can also mix Groovy classes and
            Java classes in the same application.</para>

        <section>
            <title>Writing Groovy components</title>

            <para>As you should have noticed by now, Seam uses annotations heavily. Be sure to use Groovy 1.1 Beta1 or
                above for annotation support. Here are some example of groovy code used in a Seam application.</para>

            <section>
                <title>Entity</title>

                <programlisting>    @Entity
    @Name("hotel")
    class Hotel implements Serializable
    {
        @Id @GeneratedValue
        Long id

        @Length(max=50) @NotNull
        String name

        @Length(max=100) @NotNull
        String address

        @Length(max=40) @NotNull
        String city

        @Length(min=2, max=10) @NotNull
        String state

        @Length(min=4, max=6) @NotNull
        String zip

        @Length(min=2, max=40) @NotNull
        String country

        @Column(precision=6, scale=2)
        BigDecimal price

        @Override
        String toString()
        {
            return "Hotel(${name},${address},${city},${zip})"
        }
    }</programlisting>

                <para>Groovy natively support the notion of properties (getter/setter), so there is no need to
                    explicitly write verbose getters and setters: in the previous example, the hotel class can be
                    accessed from Java as <code>hotel.getCity()</code>, the getters and setters being generated by the
                    Groovy compiler. This type of syntactic sugar makes the entity code very concise.</para>

                <para>Some temporary gotchas: Groovy 1.1 Beta1 does not (yet) support generics. One negative effect of
                    this is that entity relationships have no built-in type information. It is necessary to use the
                    targetEntity attribute of the appropriate <literal>@*ToMany</literal> annotation instead of simply
                    using a generic type definition like <code>Collection&lt;Entity&gt;</code>. For the same
                    reason, you won't be able to benefit from the very useful <xref linkend="framework"/> yet. The good
                    news is that support for generics is targeted for Groovy 1.1 (Groovy 1.1 Beta2 at the time of
                    writing).</para>
            </section>

            <section>
                <title>Seam component</title>

                <para>Writing Seam components in Groovy is in no way different than in Java: annotations are used to
                    mark the class as a Seam component.</para>

                <programlisting>@Scope(ScopeType.SESSION)
@Name("bookingList")
class BookingListAction implements Serializable
{
    @In EntityManager em
    @In User user
    @DataModel List&lt;Booking&gt; bookings
    @DataModelSelection Booking booking
    @Logger Log log

    @Factory public void getBookings()
    {
        bookings = em.createQuery('''
                select b from Booking b
                where b.user.username = :username
                order by b.checkinDate''')
            .setParameter("username", user.username)
            .getResultList()
    }
    
    public void cancel()
    {
        log.info("Cancel booking: #{bookingList.booking.id} for #{user.username}")
        Booking cancelled = em.find(Booking.class, booking.id)
        if (cancelled != null) em.remove( cancelled )
        getBookings()
        FacesMessages.instance().add("Booking cancelled for confirmation number #{bookingList.booking.id}", new Object[0])
    }
}</programlisting>

                <para/>
            </section>
        </section>

        <section>
            <title>seam-gen</title>

            <para>Seam gen has a transparent integration with Groovy. You can write Groovy code in seam-gen backed
                projects without any additional infrastructure requirement. When writing a Groovy entity, simply place
                your <filename>.groovy</filename> files in <filename>src/model</filename>. Unsurprisingly, when writing
                an action, simply place your <filename>.groovy</filename> files in
            <filename>src/action</filename>.</para>
        </section>
    </section>

    <section>
        <title>Deployment</title>

        <para>Deploying Groovy classes is very much like deploying Java classes (surprisingly, no need to write nor
            comply with a 3-letter composite specification to support a multi-language component framework).</para>

        <para>Beyond standard deployments, JBoss Seam has the ability, at development time, to redeploy JavaBeans Seam
            component classes without having to restart the application, saving a lot of time in the development / test
            cycle. The same support is provided for GroovyBeans Seam components when the <filename>.groovy</filename>
            files are deployed.</para>

        <section>
            <title>Deploying Groovy code</title>

            <para>A Groovy class <emphasis>is</emphasis> a Java class, with a bytecode representation just like a Java
                class. To deploy, a Groovy entity, a Groovy Session bean or a Groovy Seam component, a compilation step
                is necessary. A common approach is to use the <literal>groovyc</literal> ant task. Once compiles, a
                Groovy class is in no way different than a Java class and the application server will treat them
                equally. Note that this allow a seamless mix of Groovy and Java code.</para>
        </section>

        <section>
            <title>Native .groovy file deployment at development time</title>

            <para>JBoss Seam natively supports the deployment of <literal>.groovy</literal> files (ie without
                compilation) in incremental hotdeployment mode (development only). This enables a very fast edit/test
                cycle. To set up .groovy deployments, follow the configuration at <xref linkend="gettingstarted-hotdeployment"/> and deploy your Groovy code (<filename>.groovy</filename>
                files) into the <filename>WEB-INF/dev</filename> directory. The GroovyBean components will be picked up
                incrementally with no need to restart the application (and obviously not the application server either).</para>

            <para>Be aware that the native .groovy file deployment suffers the same limitations as the regular Seam
                hotdeployment:</para>

            <itemizedlist>
                <listitem>
                    <para>The components must be JavaBeans or GroovyBeans. They cannot be EJB3 bean</para>
                </listitem>

                <listitem>
                    <para>Entities cannot be hotdeployed</para>
                </listitem>

                <listitem>
                    <para>The hot-deployable components will not be visible to any classes deployed outside of
                            <literal>WEB-INF/dev</literal></para>
                </listitem>

                <listitem>
                    <para>Seam debug mode must be enabled</para>
                </listitem>
            </itemizedlist>

            <para/>
        </section>

        <section>
            <title>seam-gen</title>

            <para>Seam-gen transparently supports Groovy files deployment and compilation. This includes the native
                    <filename>.groovy</filename> file deployment in development mode (compilation-less). If you create a
                seam-gen project of type WAR, Java and Groovy classes in <filename>src/action</filename> will
                automatically be candidate for the incremental hot deployment. If you are in production mode, the Groovy
                files will simply be compiled before deployment.</para>

            <para>You will find a live example of the Booking demo written completely in Groovy and supporting
                incremental hot deployment in <filename>examples/groovybooking</filename>.</para>
        </section>
    </section>
</chapter>
    <chapter id="framework">
    <title>The Seam Application Framework</title>
    
    <para>
        Seam makes it really easy to create applications by writing
        plain Java classes with annotations, which don't need to extend
        any special interfaces or superclasses. But we can simplify
        some common programming tasks even further, by providing a set 
        of pre-built components which can be re-used either by
        configuration in <literal>components.xml</literal> (for very 
        simple cases) or extension.
    </para>
    
    <para>
        The <emphasis>Seam Application Framework</emphasis> can reduce
        the amount of code you need to write when doing basic database
        access in a web application, using either Hibernate or JPA.
    </para>
    
    <para>
        We should emphasize that the framework is extremely simple, 
        just a handful of simple classes that are easy to understand
        and extend. The "magic" is in Seam itself—the same magic
        you use when creating any Seam application even without using 
        this framework.
    </para>
    
    <section>
        <title>Introduction</title>
        
        <para>
            The components provided by the Seam application framework
            may be used in one of two different approaches. The first
            way is to install and configure an instance of the component
            in <literal>components.xml</literal>, just like we have
            done with other kinds of built-in Seam components. For
            example, the following fragment from
            <literal>components.xml</literal> installs a component
            which can perform basic CRUD operations for a
            <literal>Person</literal> entity:
        </para>
        
        <programlisting><![CDATA[<framework:entity-home name="personHome" 
                       entity-class="eg.Person" 
                       entity-manager="#{personDatabase}">
    <framework:id>#{param.personId}</framework:id>
</framework:entity-home>]]></programlisting>

        <para>
            If that looks a bit too much like "programming in XML" for 
            your taste, you can use extension instead:
        </para>

        <programlisting><![CDATA[@Stateful
@Name("personHome")
public class PersonHome extends EntityHome<Person> implements LocalPersonHome {
    @RequestParameter String personId;
    @In EntityManager personDatabase;
    
    public Object getId() { return personId; }
    public EntityManager getEntityManager() { return personDatabase; }
    
}]]></programlisting>

        <para>
            The second approach has one huge advantage: you can easily add 
            extra functionality, and override the built-in functionality
            (the framework classes were carefully designed for extension
            and customization).
        </para>
        
        <para>
            A second advantage is that your classes may be EJB stateful
            session beans, if you like. (They do not have to be, they 
            can be plain JavaBean components if you prefer.)  If you are using
            JBoss AS, you'll need 4.2.2.GA or later.
        </para>
        
        <para>
            At this time, the Seam Application Framework provides four main
            built-in components: <literal>EntityHome</literal> and
            <literal>HibernateEntityHome</literal> for CRUD, along with
            <literal>EntityQuery</literal> and <literal>HibernateEntityQuery</literal>
            for queries.
        </para>
        
        <para>
            The Home and Query components are written so that they can function
            with a scope of session, event or conversation. Which scope you
            use depends upon the state model you wish to use in your application.
        </para>

        <para>
            The Seam Application Framework only works with Seam-managed
            persistence contexts. By default, the components will look
            for a persistence context named <literal>entityManager</literal>.
        </para>
        
    </section>
    
    <section>
        <title>Home objects</title>
        
        <para>
            A Home object provides persistence operations for a particular entity
            class. Suppose we have our trusty <literal>Person</literal> class:
        </para>
        
        <programlisting><![CDATA[@Entity
public class Person {
    @Id private Long id;
    private String firstName;
    private String lastName;
    private Country nationality;
    
    //getters and setters...
}]]></programlisting>

        <para>
            We can define a <literal>personHome</literal> component either via
            configuration:
        </para>
        
        <programlisting><![CDATA[<framework:entity-home name="personHome" entity-class="eg.Person" />]]></programlisting>

        <para>
            Or via extension:
        </para>

        <programlisting><![CDATA[@Name("personHome")
public class PersonHome extends EntityHome<Person> {}]]></programlisting>

        <para>
            A Home object provides the following operations: <literal>persist()</literal>,
            <literal>remove()</literal>, <literal>update()</literal> and 
            <literal>getInstance()</literal>. Before you can call the 
            <literal>remove()</literal>, or <literal>update()</literal> operations, you 
            must first set the identifier of the object you are interested in, using the 
            <literal>setId()</literal> method.
        </para>
        
        <para>
            We can use a Home directly from a JSF page, for example:
        </para>
        
        <programlisting><![CDATA[<h1>Create Person</h1>
<h:form>
    <div>First name: <h:inputText value="#{personHome.instance.firstName}"/></div>
    <div>Last name: <h:inputText value="#{personHome.instance.lastName}"/></div>
    <div>
        <h:commandButton value="Create Person" action="#{personHome.persist}"/>
    </div>
</h:form>]]></programlisting>

        <para>
            Usually, it is much nicer to be able to refer to the <literal>Person</literal>
            merely as <literal>person</literal>, so let's make that possible by adding a
            line to <literal>components.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<factory name="person" 
         value="#{personHome.instance}"/>

<framework:entity-home name="personHome" 
                       entity-class="eg.Person" />]]></programlisting>

        <para>
            (If we are using configuration.)
            Or by adding a <literal>@Factory</literal> method to <literal>PersonHome</literal>:
        </para>
        
        <programlisting><![CDATA[@Name("personHome")
public class PersonHome extends EntityHome<Person> {
    
    @Factory("person")
    public Person initPerson() { return getInstance(); }
    
}]]></programlisting>
        
        <para>
            (If we are using extension.) 
            This change simplifies our JSF page to the following:
        </para>

        <programlisting><![CDATA[<h1>Create Person</h1>
<h:form>
    <div>First name: <h:inputText value="#{person.firstName}"/></div>
    <div>Last name: <h:inputText value="#{person.lastName}"/></div>
    <div>
        <h:commandButton value="Create Person" action="#{personHome.persist}"/>
    </div>
</h:form>]]></programlisting>

        <para>
            Well, that lets us create new <literal>Person</literal> entries. Yes,
            that is all the code that is required! Now, if we want to be able to 
            display, update and delete pre-existing <literal>Person</literal> 
            entries in the database, we need to be able to pass the entry
            identifier to the <literal>PersonHome</literal>. Page parameters
            are a great way to do that:
        </para>

        <programlisting><![CDATA[<pages>
    <page view-id="/editPerson.jsp">
        <param name="personId" value="#{personHome.id}"/>
    </page>
</pages>]]></programlisting>

        <para>
            Now we can add the extra operations to our JSF page:
        </para>

        <programlisting><![CDATA[<h1>
    <h:outputText rendered="#{!personHome.managed}" value="Create Person"/>
    <h:outputText rendered="#{personHome.managed}" value="Edit Person"/>
</h1>
<h:form>
    <div>First name: <h:inputText value="#{person.firstName}"/></div>
    <div>Last name: <h:inputText value="#{person.lastName}"/></div>
    <div>
        <h:commandButton value="Create Person" action="#{personHome.persist}" rendered="#{!personHome.managed}"/>
        <h:commandButton value="Update Person" action="#{personHome.update}" rendered="#{personHome.managed}"/>
        <h:commandButton value="Delete Person" action="#{personHome.remove}" rendered="#{personHome.managed}"/>
    </div>
</h:form>]]></programlisting>

        <para>
            When we link to the page with no request parameters, the page will 
            be displayed as a "Create Person" page. When we provide a value for
            the <literal>personId</literal> request parameter, it will be an
            "Edit Person" page.
        </para>
        
        <para>
            Suppose we need to create <literal>Person</literal> entries with their
            nationality initialized. We can do that easily, via configuration:
        </para>

        <programlisting><![CDATA[<factory name="person" 
         value="#{personHome.instance}"/>

<framework:entity-home name="personHome" 
                       entity-class="eg.Person" 
                       new-instance="#{newPerson}"/>

<component name="newPerson" 
           class="eg.Person">
    <property name="nationality">#{country}</property>
</component>]]></programlisting>
         
         <para>
             Or by extension:
         </para>
         
        <programlisting><![CDATA[@Name("personHome")
public class PersonHome extends EntityHome<Person> {
    
    @In Country country;
    
    @Factory("person")
    public Person initPerson() { return getInstance(); }
    
    protected Person createInstance() {
        return new Person(country);
    }
    
}]]></programlisting>

        <para>
            Of course, the <literal>Country</literal> could be an object managed by
            another Home object, for example, <literal>CountryHome</literal>.
        </para>
        
        <para>
            To add more sophisticated operations (association management, etc), we can
            just add methods to <literal>PersonHome</literal>.
        </para>

        <programlisting><![CDATA[@Name("personHome")
public class PersonHome extends EntityHome<Person> {
    
    @In Country country;
    
    @Factory("person")
    public Person initPerson() { return getInstance(); }
    
    protected Person createInstance() {
        return new Person(country);
    }
    
    public void migrate()
    {
        getInstance().setCountry(country);
        update();
    }
    
}]]></programlisting>

		<para>
			The Home object raises an <literal>org.jboss.seam.afterTransactionSuccess</literal> 
			event when a transaction succeeds (a call to <literal>persist()</literal>, 
			<literal>update()</literal> or <literal>remove()</literal> succeeds).  By observing 
			this event we can refresh our queries when the underlying entities are changed.  If
			we only want to refresh certain queries when a particular entity is persited, 
			updated or removed we can observe the 
			<literal>org.jboss.seam.afterTransactionSuccess.&lt;name&gt;</literal> 
			event (where <literal>&lt;name&gt;</literal> is the name of the entity).
		</para>

        <para>
            The Home object automatically displays faces messages when an operation is
            successful. To customize these messages we can, again, use configuration:
        </para>
         
        <programlisting><![CDATA[<factory name="person" 
         value="#{personHome.instance}"/>

<framework:entity-home name="personHome"
                       entity-class="eg.Person"
                       new-instance="#{newPerson}">
    <framework:created-message>New person #{person.firstName} #{person.lastName} created</framework:created-message>
    <framework:deleted-message>Person #{person.firstName} #{person.lastName} deleted</framework:deleted-message>
    <framework:updated-message>Person #{person.firstName} #{person.lastName} updated</framework:updated-message>
</framework:entity-home>

<component name="newPerson" 
           class="eg.Person">
    <property name="nationality">#{country}</property>
</component>]]></programlisting>
         
         <para>
             Or extension:
         </para>
         
        <programlisting><![CDATA[@Name("personHome")
public class PersonHome extends EntityHome<Person> {
    
    @In Country country;
    
    @Factory("person")
    public Person initPerson() { return getInstance(); }
    
    protected Person createInstance() {
        return new Person(country);
    }
    
    protected String getCreatedMessage() { return "New person #{person.firstName} #{person.lastName} created"; }
    protected String getUpdatedMessage() { return "Person #{person.firstName} #{person.lastName} updated"; }
    protected String getDeletedMessage() { return "Person #{person.firstName} #{person.lastName} deleted"; }
    
}]]></programlisting>

        <para>
            But the best way to specify the messages is to put them in a resource
            bundle known to Seam (the bundle named <literal>messages</literal>,
            by default).
        </para>

        <programlisting><![CDATA[Person_created=New person #{person.firstName} #{person.lastName} created
Person_deleted=Person #{person.firstName} #{person.lastName} deleted
Person_updated=Person #{person.firstName} #{person.lastName} updated]]></programlisting>

        <para>
            This enables internationalization, and keeps your code and configuration clean of
            presentation concerns.
        </para>

        <para>
            The final step is to add validation functionality to the page, using
            <literal>&lt;s:validateAll&gt;</literal> and <literal>&lt;s:decorate&gt;</literal>,
            but I'll leave that for you to figure out.
        </para>

    </section>
    
    <section>
        <title>Query objects</title>
        
        <para>
            If we need a list of all <literal>Person</literal> instance in the database, we
            can use a Query object. For example:
        </para>
        
        <programlisting><![CDATA[<framework:entity-query name="people" 
                        ejbql="select p from Person p"/>]]></programlisting>
        
        <para>
            We can use it from a JSF page:
        </para>
        
        <programlisting><![CDATA[<h1>List of people</h1>
<h:dataTable value="#{people.resultList}" var="person">
    <h:column>
        <s:link view="/editPerson.jsp" value="#{person.firstName} #{person.lastName}">
            <f:param name="personId" value="#{person.id}"/>
        </s:link>
    </h:column>
</h:dataTable>]]></programlisting>

        <para>
            We probably need to support pagination:
        </para>
        
        <programlisting><![CDATA[<framework:entity-query name="people" 
                        ejbql="select p from Person p" 
                        order="lastName" 
                        max-results="20"/>]]></programlisting>

        <para>
            We'll use a page parameter to determine the page to display:
        </para>


        <programlisting><![CDATA[<pages>
    <page view-id="/searchPerson.jsp">
        <param name="firstResult" value="#{people.firstResult}"/>
    </page>
</pages>]]></programlisting>

        <para>
            The JSF code for a pagination control is a bit verbose, but manageable:
        </para>

        <programlisting><![CDATA[<h1>Search for people</h1>
<h:dataTable value="#{people.resultList}" var="person">
    <h:column>
        <s:link view="/editPerson.jsp" value="#{person.firstName} #{person.lastName}">
            <f:param name="personId" value="#{person.id}"/>
        </s:link>
    </h:column>
</h:dataTable>

<s:link view="/search.xhtml" rendered="#{people.previousExists}" value="First Page">
    <f:param name="firstResult" value="0"/>
</s:link>

<s:link view="/search.xhtml" rendered="#{people.previousExists}" value="Previous Page">
    <f:param name="firstResult" value="#{people.previousFirstResult}"/>
</s:link>

<s:link view="/search.xhtml" rendered="#{people.nextExists}" value="Next Page">
    <f:param name="firstResult" value="#{people.nextFirstResult}"/>
</s:link>

<s:link view="/search.xhtml" rendered="#{people.nextExists}" value="Last Page">
    <f:param name="firstResult" value="#{people.lastFirstResult}"/>
</s:link>]]></programlisting>

        <para>
            Real search screens let the user enter a bunch of optional search criteria
            to narrow the list of results returned. The Query object lets you specify
            optional "restrictions" to support this important usecase:
        </para>

        <programlisting><![CDATA[<component name="examplePerson" class="Person"/>
        
<framework:entity-query name="people" 
                        ejbql="select p from Person p" 
                        order="lastName" 
                        max-results="20">
    <framework:restrictions>
        <value>lower(firstName) like lower( concat(#{examplePerson.firstName},'%') )</value>
        <value>lower(lastName) like lower( concat(#{examplePerson.lastName},'%') )</value>
    </framework:restrictions>
</framework:entity-query>]]></programlisting>

        <para>
            Notice the use of an "example" object.
        </para>

        <programlisting><![CDATA[<h1>Search for people</h1>
<h:form>
    <div>First name: <h:inputText value="#{examplePerson.firstName}"/></div>
    <div>Last name: <h:inputText value="#{examplePerson.lastName}"/></div>
    <div><h:commandButton value="Search" action="/search.jsp"/></div>
</h:form>

<h:dataTable value="#{people.resultList}" var="person">
    <h:column>
        <s:link view="/editPerson.jsp" value="#{person.firstName} #{person.lastName}">
            <f:param name="personId" value="#{person.id}"/>
        </s:link>
    </h:column>
</h:dataTable>]]></programlisting>

		<para>
			To refresh the query when the underlying entities change we observe the
			<literal>org.jboss.seam.afterTransactionSuccess</literal> event:
		</para>
		
		<programlisting><![CDATA[<event type="org.jboss.seam.afterTransactionSuccess">
    <action execute="#{people.refresh}" />
</event>]]></programlisting>

		<para>
			Or, to just refresh the query when the person entity is persisted, updated or 
			removed through <literal>PersonHome</literal>:
		</para>
		
		<programlisting><![CDATA[<event type="org.jboss.seam.afterTransactionSuccess.Person">
    <action execute="#{people.refresh}" />
    </event>]]></programlisting>
       
      <para>
         Unfortunately Query objects don't work well with 
         <emphasis>join fetch</emphasis> queries - the use of pagination with
         these queries is not recomended, and you'll have to implement your own
         method of calculating the total number of results (by overriding 
         <literal>getCountEjbql()</literal>.
      </para>

      <para>
         The examples in this section have all shown reuse by configuration. However,
         reuse by extension is equally possible for Query objects.
      </para>

    </section>
    
    <section>
        <title>Controller objects</title>
        <para>
            A totally optional part of the Seam Application Framework is the class
            <literal>Controller</literal> and its subclasses 
            <literal>EntityController</literal>
            <literal>HibernateEntityController</literal> and
            <literal>BusinessProcessController</literal>. These classes provide 
            nothing more than some convenience methods for access to commonly
            used built-in components and methods of built-in components. They help
            save a few keystrokes (characters can add up!) and provide a great
            launchpad for new users to explore the rich functionality built in
            to Seam.
        </para>
        <para>
            For example, here is what <literal>RegisterAction</literal> from the
            Seam registration example would look like:
        </para>
        
        <programlisting><![CDATA[@Stateless
@Name("register")
public class RegisterAction extends EntityController implements Register
{

   @In private User user;
   
   public String register()
   {
      List existing = createQuery("select u.username from User u where u.username=:username")
         .setParameter("username", user.getUsername())
         .getResultList();
      
      if ( existing.size()==0 )
      {
         persist(user);
         info("Registered new user #{user.username}");
         return "/registered.jspx";
      }
      else
      {
         addFacesMessage("User #{user.username} already exists");
         return null;
      }
   }

}]]></programlisting>

        <para>
            As you can see, its not an earthshattering improvement...
        </para>

    </section>
    
</chapter>
    <chapter id="drools">
    <title>Seam and JBoss Rules</title>
    
    <para>
        Seam makes it easy to call JBoss Rules (Drools) rulebases from Seam
        components or jBPM process definitions.
    </para>
    
    <section>
        <title>Installing rules</title>
        
        <para>
            The first step is to make an instance of <literal>org.drools.RuleBase</literal>
            available in a Seam context variable. For testing purposes, Seam provides a built-in component
            that compiles a static set of rules from the classpath. You can install
            this component via <literal>components.xml</literal>:
        </para>

        <programlisting><![CDATA[<drools:rule-base name="policyPricingRules">
    <drools:rule-files>
        <value>policyPricingRules.drl</value>
    </drools:rule-files>
</drools:rule-base>]]></programlisting>

         <para>
             This component compiles rules from a set of <literal>.drl</literal>
             files and caches an instance of <literal>org.drools.RuleBase</literal>
             in the Seam <literal>APPLICATION</literal> context. Note that it is 
             quite likely that you will need to install multiple rule bases in a 
             rule-driven application.
         </para>
         
         <para>
             If you want to use a Drools DSL, you alse need to specify the DSL
             definition:
         </para>
         
        <programlisting><![CDATA[<drools:rule-base name="policyPricingRules" dsl-file="policyPricing.dsl">
    <drools:rule-files>
        <value>policyPricingRules.drl</value>
    </drools:rule-files>
</drools:rule-base>]]></programlisting>

        <para>
        In most rules-driven applications,
            rules need to be dynamically deployable, so a production application will want to use a
            Drools RuleAgent to manage the RuleBase.  The RuleAgent can connect to a Drools rule server (BRMS) 
            or hot deploy rules packages from a local file repository.  The RulesAgent-managed RuleBase is
            also configurable in <literal>components.xml</literal>:
        </para>
        
                <programlisting><![CDATA[<drools:rule-agent name="insuranceRules" 
                    configurationFile="/WEB-INF/deployedrules.properties" />]]></programlisting>
        
        <para>The properties file contains properties specific to the RulesAgent. Here is an example configuration file from the
        Drools example distribution.</para>
        
                <programlisting>newInstance=true
url=http://localhost:8080/drools-jbrms/org.drools.brms.JBRMS/package/org.acme.insurance/fmeyer
localCacheDir=/Users/fernandomeyer/projects/jbossrules/drools-examples/drools-examples-brms/cache
poll=30
name=insuranceconfig</programlisting>
        
        
        <para>It is also possible to configure the options on the component directly, bypassing the configuration file.</para>

       <programlisting>&lt;drools:rule-agent name="insuranceRules"
                   url="http://localhost:8080/drools-jbrms/org.drools.brms.JBRMS/package/org.acme.insurance/fmeyer"
                   local-cache-dir="/Users/fernandomeyer/projects/jbossrules/drools-examples/drools-examples-brms/cache"
                   poll="30"
                   configuration-name="insuranceconfig" /&gt;</programlisting>
        
         <para>
             Next, we need to make an instance of <literal>org.drools.WorkingMemory</literal>
             available to each conversation. (Each <literal>WorkingMemory</literal>
             accumulates facts relating to the current conversation.)
         </para>
        
         <programlisting><![CDATA[<drools:managed-working-memory name="policyPricingWorkingMemory" auto-create="true" rule-base="#{policyPricingRules}"/>]]></programlisting>

         <para>
             Notice that we gave the <literal>policyPricingWorkingMemory</literal> a
             reference back to our rule base via the <literal>ruleBase</literal>
             configuration property.
         </para>
         
     </section>
     
     <section>
         <title>Using rules from a Seam component</title>
         
         <para>
             We can now inject our <literal>WorkingMemory</literal> into any Seam component,
             assert facts, and fire rules:
         </para>
         
         <programlisting><![CDATA[@In WorkingMemory policyPricingWorkingMemory;

@In Policy policy;
@In Customer customer;

public void pricePolicy() throws FactException
{
    policyPricingWorkingMemory.assertObject(policy);
    policyPricingWorkingMemory.assertObject(customer);
    policyPricingWorkingMemory.fireAllRules();
}]]></programlisting>
     
     </section>
     
     <section>
         <title>Using rules from a jBPM process definition</title>
         
         <para>
             You can even allow a rule base to act as a jBPM action handler, decision
             handler, or assignment handler—in either a pageflow or business
             process definition.
         </para>
         
         <programlisting><![CDATA[<decision name="approval">
         
    <handler class="org.jboss.seam.drools.DroolsDecisionHandler">
        <workingMemoryName>orderApprovalRulesWorkingMemory</workingMemoryName>
        <assertObjects>
            <element>#{customer}</element>
            <element>#{order}</element>
            <element>#{order.lineItems}</element>
        </assertObjects>
    </handler>
    
    <transition name="approved" to="ship">
        <action class="org.jboss.seam.drools.DroolsActionHandler">
            <workingMemoryName>shippingRulesWorkingMemory</workingMemoryName>
            <assertObjects>
                <element>#{customer}</element>
                <element>#{order}</element>
                <element>#{order.lineItems}</element>
            </assertObjects>
        </action>
    </transition>
    
    <transition name="rejected" to="cancelled"/>
    
</decision>]]></programlisting>

         <para>
             The <literal>&lt;assertObjects&gt;</literal> element specifies EL expressions that
             return an object or collection of objects to be asserted as facts into the 
             <literal>WorkingMemory</literal>.
         </para>
         
         <para>
             There is also support for using Drools for jBPM task assignments:
         </para>
         
         <programlisting><![CDATA[<task-node name="review">
    <task name="review" description="Review Order">
        <assignment handler="org.jboss.seam.drools.DroolsAssignmentHandler">
            <workingMemoryName>orderApprovalRulesWorkingMemory</workingMemoryName>
            <assertObjects>
                <element>#{actor}</element>
                <element>#{customer}</element>
                <element>#{order}</element>
                <element>#{order.lineItems}</element>
            </assertObjects>
        </assignment>
    </task>
    <transition name="rejected" to="cancelled"/>
    <transition name="approved" to="approved"/>
</task-node>]]></programlisting>

         <para>
             Certain objects are available to the rules as Drools globals, namely
             the jBPM <literal>Assignable</literal>, as <literal>assignable</literal>
             and a Seam <literal>Decision</literal> object, as <literal>decision</literal>.
             Rules which handle decisions should call <literal>decision.setOutcome("result")</literal>
             to determine the result of the decision. Rules which perform assignments should
             set the actor id using the <literal>Assignable</literal>.
         </para>
         
         <programlisting><![CDATA[package org.jboss.seam.examples.shop

import org.jboss.seam.drools.Decision

global Decision decision

rule "Approve Order For Loyal Customer"
  when
    Customer( loyaltyStatus == "GOLD" )
    Order( totalAmount <= 10000 )
  then
    decision.setOutcome("approved");
end]]></programlisting>

         <programlisting><![CDATA[package org.jboss.seam.examples.shop

import org.jbpm.taskmgmt.exe.Assignable

global Assignable assignable

rule "Assign Review For Small Order"
  when
    Order( totalAmount <= 100 )
  then
    assignable.setPooledActors( new String[] {"reviewers"} );
end]]></programlisting>

     </section>
     
</chapter>
    <chapter id="security">
  <title>Security</title>

  <para>
    The Seam Security API is an optional Seam feature that provides authentication and authorization features
    for securing both domain and page resources within your Seam project.
  </para>

  <sect1>
    <title>Overview</title>

    <para>
      Seam Security provides two different modes of operation:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <emphasis>simplified mode</emphasis> - this mode supports authentication services
          and simple role-based security checks.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>advanced mode</emphasis> - this mode supports all the same features as the simplified mode,
          plus it offers rule-based security checks using JBoss Rules.
        </para>
      </listitem>
    </itemizedlist>

    <sect2>
      <title>Which mode is right for my application?</title>

      <para>
        That all depends on the requirements of your application.  If you have minimal security requirements, for example
        if you only wish to restrict certain pages and actions to users who are logged in, or who belong to a certain role,
        then the simplified mode will probably be sufficient.  The advantages of this is a more simplified configuration,
        significantly less libraries to include, and a smaller memory footprint.
      </para>

      <para>
        If on the other hand, your application requires security checks based on contextual state or complex business rules,
        then you will require the features provided by the advanced mode.
      </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Requirements</title>

    <para>
      If using the advanced mode features of Seam Security, the following jar files are required to be configured as modules in
      <literal>application.xml</literal>.  If you are using Seam Security in simplified mode, these are <emphasis>not</emphasis>
      required:
    </para>

    <itemizedlist>
      <listitem>
        <para>drools-compiler.jar</para>
      </listitem>
      <listitem>
        <para>drools-core.jar</para>
      </listitem>
      <listitem>
        <para>janino.jar</para>
      </listitem>
      <listitem>
        <para>antlr-runtime.jar</para>
      </listitem>
      <listitem>
        <para>mvel14.jar</para>
      </listitem>
    </itemizedlist>

    <para>
      For web-based security, <literal>jboss-seam-ui.jar</literal> must also be included in the application's war file.
    </para>


  </sect1>

  <sect1>
    <title>Disabling Security</title>

    <para>
      In some situations it may be necessary to disable Seam Security, for example during unit tests.  This can be done by
      calling the static method <literal>Identity.setSecurityEnabled(false)</literal> to disable security checks.  Doing this
      prevents any security checks being performed for the following:
    </para>

    <itemizedlist>
      <listitem>
        <para>Entity Security</para>
      </listitem>
      <listitem>
        <para>Hibernate Security Interceptor</para>
      </listitem>
      <listitem>
        <para>Seam Security Interceptor</para>
      </listitem>
      <listitem>
        <para>Page restrictions</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Authentication</title>

    <para>
      The authentication features provided by Seam Security are built upon JAAS (Java Authentication and Authorization Service),
      and as such provide a robust and highly configurable API for handling user authentication.  However, for less complex
      authentication requirements Seam offers a much more simplified method of authentication that hides the complexity of JAAS.
    </para>

    <sect2>
      <title>Configuration</title>

      <para>
        The simplified authentication method uses a built-in JAAS login module, <literal>SeamLoginModule</literal>, which
        delegates authentication to one of your own Seam components.  This login module is already configured inside Seam as
        part of a default application policy and as such does not require any additional configuration files.  It allows you to
        write an authentication method using the entity classes that are provided by your own application.  Configuring this
        simplified form of authentication requires the <literal>identity</literal> component to be configured in
        <literal>components.xml</literal>:
      </para>

      <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
            xmlns:core="http://jboss.com/products/seam/core"
            xmlns:security="http://jboss.com/products/seam/security"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation=
                "http://jboss.com/products/seam/components http://jboss.com/products/seam/components-2.1.xsd
                 http://jboss.com/products/seam/security http://jboss.com/products/seam/security-2.1.xsd">

    <security:identity authenticate-method="#{authenticator.authenticate}"/>

</components>]]></programlisting>

      <para>
        If you wish to use the advanced security features such as rule-based permission checks, all you need
        to do is include the Drools (JBoss Rules) jars in your classpath, and add some additional configuration,
        described later.
      </para>

      <para>
        The EL expression <literal>#{authenticator.authenticate}</literal> is a method binding indicating that
        the <literal>authenticate</literal> method of the <literal>authenticator</literal> component will be used
        to authenticate the user.
      </para>

    </sect2>

    <sect2>
      <title>Writing an authentication method</title>

      <para>
        The <literal>authenticate-method</literal> property specified for <literal>identity</literal> in
        <literal>components.xml</literal> specifies which method will be used by <literal>SeamLoginModule</literal>
        to authenticate users.  This method takes no parameters, and is expected to return a boolean indicating
        whether authentication is successful or not.  The user's username and password can be obtained from
        <literal>Identity.instance().getUsername()</literal> and <literal>Identity.instance().getPassword()</literal>,
        respectively.  Any roles that the user is a member of should be assigned using
        <literal>Identity.instance().addRole()</literal>. Here's a complete example of an authentication method
        inside a JavaBean component:
      </para>

      <programlisting><![CDATA[@Name("authenticator")
public class Authenticator {
   @In EntityManager entityManager;

   public boolean authenticate() {
      try
      {
         User user = (User) entityManager.createQuery(
            "from User where username = :username and password = :password")
            .setParameter("username", Identity.instance().getUsername())
            .setParameter("password", Identity.instance().getPassword())
            .getSingleResult();

         if (user.getRoles() != null)
         {
            for (UserRole mr : user.getRoles())
               Identity.instance().addRole(mr.getName());
         }

         return true;
      }
      catch (NoResultException ex)
      {
         return false;
      }

   }

}]]></programlisting>

      <para>
        In the above example, both <literal>User</literal> and <literal>UserRole</literal> are application-specific
        entity beans.  The <literal>roles</literal> parameter is populated with the roles that the user is a member
        of, which should be added to the <literal>Set</literal> as literal string values, e.g. "admin", "user".
        In this case, if the user record is not found and a <literal>NoResultException</literal> thrown, the
        authentication method returns <literal>false</literal> to indicate the authentication failed.
      </para>

      <sect3>
        <title>Identity.addRole()</title>

        <para>
          The <literal>Identity.addRole()</literal> method behaves differently depending on whether the current
          session is authenticated or not.  If the session is not authenticated, then <literal>addRole()</literal>
          should <emphasis>only</emphasis> be called during the authentication process.  When called here, the
          role name is placed into a temporary list of pre-authenticated roles.  Once authentication is successful,
          the pre-authenticated roles then become "real" roles, and calling <literal>Identity.hasRole()</literal>
          for those roles will then return true.  The following sequence diagram represents the list of pre-authenticated
          roles as a first class object to show more clearly how it fits in to the authentication process.

        </para>

        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/security-addrole.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/security-addrole.png" align="center"/>
          </imageobject>
        </mediaobject>

      </sect3>

      <sect3>
        <title>Special Considerations</title>

        <para>
          When writing an authenticator method, it is important that it is kept minimal and free from
          any side-effects. This is because there is no guarantee as to how many times the authenticator
          method will be called by the security API, and as such it may be invoked multiple times during
          a single request.  Because of this, any special code that should execute upon a successful or
          failed authentication should be written by implementing an event observer.  See the section on
          Security Events further down in this chapter for more information about which events are
          raised by Seam Security.
        </para>

        <para>
          To give an example, let's say that upon a successful login that some user statistics must be
          updated.  We would do this by writing an event observer for the
          <literal>org.jboss.seam.security.loginSuccessful</literal> event, like this:
        </para>

        <programlisting><![CDATA[   @In UserStats userStats;

   @Observer("org.jboss.seam.security.loginSuccessful")
   public void updateUserStats()
   {
      userStats.setLastLoginDate(new Date());
      userStats.incrementLoginCount();
   }]]></programlisting>
      </sect3>

    </sect2>

    <sect2>
      <title>Writing a login form</title>

      <para>
        The <literal>Identity</literal> component provides both <literal>username</literal> and <literal>password</literal>
        properties, catering for the most common authentication scenario. These properties can be bound directly to the
        username and password fields on a login form.  Once these properties are set, calling the
        <literal>identity.login()</literal> method will authenticate the user using the provided credentials.
        Here's an example of a simple login form:
      </para>

      <programlisting><![CDATA[<div>
    <h:outputLabel for="name" value="Username"/>
    <h:inputText id="name" value="#{identity.username}"/>
</div>

<div>
    <h:outputLabel for="password" value="Password"/>
    <h:inputSecret id="password" value="#{identity.password}"/>
</div>

<div>
    <h:commandButton value="Login" action="#{identity.login}"/>
</div>]]></programlisting>

      <para>
        Similarly, logging out the user is done by calling <literal>#{identity.logout}</literal>. Calling this
        action will clear the security state of the currently authenticated user.
      </para>

    </sect2>

    <sect2>
      <title>Simplified Configuration - Summary</title>
      <para>
        So to sum up, there are the three easy steps to configure authentication:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Configure an authentication method in <literal>components.xml</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Write an authentication method.
          </para>
        </listitem>
        <listitem>
          <para>
            Write a login form so that the user can authenticate.
          </para>
        </listitem>
      </itemizedlist>

    </sect2>

    <sect2>
      <title>Handling Security Exceptions</title>

      <para>
        To prevent users from receiving the default error page in response to a security error, it's recommended that
        <literal>pages.xml</literal> is configured to redirect security errors to a more "pretty" page.  The two
        main types of exceptions thrown by the security API are:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <literal>NotLoggedInException</literal> - This exception is thrown if the user attempts to access a
            restricted action or page when they are not logged in.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>AuthorizationException</literal> - This exception is only thrown if the user is already logged in,
            and they have attempted to access a restricted action or page for which they do not have the necessary
            privileges.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        In the case of a <literal>NotLoggedInException</literal>, it is recommended that the user is redirected to
        either a login or registration page so that they can log in.  For an <literal>AuthorizationException</literal>,
        it may be useful to redirect the user to an error page. Here's an example of a <literal>pages.xml</literal>
        file that redirects both of these security exceptions:
      </para>

      <programlisting><![CDATA[<pages>

    ...

    <exception class="org.jboss.seam.security.NotLoggedInException">
        <redirect view-id="/login.xhtml">
            <message>You must be logged in to perform this action</message>
        </redirect>
    </exception>

    <exception class="org.jboss.seam.security.AuthorizationException">
        <end-conversation/>
        <redirect view-id="/security_error.xhtml">
            <message>You do not have the necessary security privileges to perform this action.</message>
        </redirect>
    </exception>

</pages>]]></programlisting>

      <para>
        Most web applications require even more sophisticated handling of login redirection, so
        Seam includes some special functionality for handling this problem.
      </para>

    </sect2>

    <sect2>
      <title>Login Redirection</title>

      <para>
        You can ask Seam to redirect the user to a login screen when an unauthenticated user tries
        to access a particular view (or wildcarded view id) as follows:
      </para>

      <programlisting><![CDATA[<pages login-view-id="/login.xhtml">

    <page view-id="/members/*" login-required="true"/>

    ...

</pages>]]></programlisting>

      <para>
        (This is less of a blunt instrument than the exception handler shown above, but should
        probably be used in conjunction with it.)
      </para>

      <para>
        After the user logs in, we want to automatically send them back where they came from, so
        they can retry the action that required logging in. If you add the following event listeners
        to <literal>components.xml</literal>, attempts to access a restricted view while not logged
        in will be remembered, so that upon the user successfully logging in they will be redirected
        to the originally requested view, with any page parameters that existed in the original
        request.
      </para>

      <programlisting><![CDATA[<event type="org.jboss.seam.security.notLoggedIn">
    <action execute="#{redirect.captureCurrentView}"/>
</event>

<event type="org.jboss.seam.security.postAuthenticate">
    <action execute="#{redirect.returnToCapturedView}"/>
</event>]]></programlisting>

      <para>
        Note that login redirection is implemented as a conversation-scoped mechanism, so don't end
        the conversation in your <literal>authenticate()</literal> method.
      </para>

    </sect2>

    <sect2>
      <title>HTTP Authentication</title>

      <para>
        Although not recommended for use unless absolutely necessary, Seam provides means for authenticating
        using either HTTP Basic or HTTP Digest (RFC 2617) methods.  To use either form of authentication,
        the <literal>authentication-filter</literal> component must be enabled in components.xml:
      </para>

      <programlisting><![CDATA[
  <web:authentication-filter url-pattern="*.seam" auth-type="basic"/>
      ]]></programlisting>

      <para>
        To enable the filter for basic authentication, set <literal>auth-type</literal> to <literal>basic</literal>,
        or for digest authentication, set it to <literal>digest</literal>.  If using digest authentication, the
        <literal>key</literal> and <literal>realm</literal> must also be set:
      </para>

      <programlisting><![CDATA[
  <web:authentication-filter url-pattern="*.seam" auth-type="digest" key="AA3JK34aSDlkj" realm="My App"/>
      ]]></programlisting>

      <para>
        The <literal>key</literal> can be any String value.  The <literal>realm</literal> is the name of the
        authentication realm that is presented to the user when they authenticate.
      </para>

      <sect3>
        <title>Writing a Digest Authenticator</title>

        <para>
          If using digest authentication, your authenticator class should extend the abstract class
          <literal>org.jboss.seam.security.digest.DigestAuthenticator</literal>, and use the
          <literal>validatePassword()</literal> method to validate the user's plain text password
          against the digest request.  Here is an example:
        </para>

        <programlisting><![CDATA[
   public boolean authenticate()
   {
      try
      {
         User user = (User) entityManager.createQuery(
            "from User where username = :username")
            .setParameter("username", identity.getUsername())
            .getSingleResult();

         return validatePassword(user.getPassword());
      }
      catch (NoResultException ex)
      {
         return false;
      }
   }
        ]]></programlisting>
      </sect3>

    </sect2>

    <sect2>
      <title>Advanced Authentication Features</title>

      <para>
        This section explores some of the advanced features provided by the security API for addressing more complex
        security requirements.
      </para>

      <sect3>
        <title>Using your container's JAAS configuration</title>

        <para>
          If you would rather not use the simplified JAAS configuration provided by the Seam Security API, you may
          instead delegate to the default system JAAS configuration by providing a <literal>jaas-config-name</literal>
          property in <literal>components.xml</literal>.  For example, if you are using JBoss AS and wish to use
          the <literal>other</literal> policy (which uses the <literal>UsersRolesLoginModule</literal> login module
          provided by JBoss AS), then the entry in <literal>components.xml</literal> would look like this:
        </para>

        <programlisting><![CDATA[<security:identity authenticate-method="#{authenticator.authenticate}"
                      jaas-config-name="other"/>]]></programlisting>
                      
        <para>
          Please keep in mind that doing this does not mean that your user will be authenticated in whichever
          container your Seam application is deployed in.  It merely instructs Seam Security to authenticate
          itself using the configured JAAS security policy.
        </para>
      </sect3>

    </sect2>

  </sect1>

  <sect1>
    <title>Error Messages</title>

    <para>
      The security API produces a number of default faces messages for various security-related events.
      The following table lists the message keys that can be used to override these messages by specifying
      them in a <literal>message.properties</literal> resource file.  To suppress the message, just put the
      key with an empty value in the resource file.
    </para>

    <table>
      <title>Security Message Keys</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*"/>
        <colspec colnum="2" colwidth="3*"/>

        <thead>
          <row>
            <entry align="center">
              <para>Message Key</para>
            </entry>
            <entry align="center">
              <para>Description</para>
            </entry>
          </row>
        </thead>

        <tbody>

          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.loginSuccessful</literal>
              </para>
            </entry>
            <entry>
              <para>
                This message is produced when a user successfully logs in via the security API.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.loginFailed</literal>
              </para>
            </entry>
            <entry>
              <para>
                This message is produced when the login process fails, either because the user provided an
                incorrect username or password, or because authentication failed in some other way.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.NotLoggedIn</literal>
              </para>
            </entry>
            <entry>
              <para>
                This message is produced when a user attempts to perform an action or access a page that requires
                a security check, and the user is not currently authenticated.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.AlreadyLoggedIn</literal>
              </para>
            </entry>
            <entry>
              <para>
                This message is produced when a user that is already authenticated attempts to log in again.
              </para>
            </entry>
          </row>          
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1>
    <title>Authorization</title>

    <para>
      There are a number of authorization features provided by the Seam Security API for securing access to
      components, component methods, and pages.  This section describes each of these.  An important thing to
      note is that if you wish to use any of the advanced features (such as rule-based permissions) then
      your <literal>components.xml</literal> must be configured to support this - see the Configuration section
      above.
    </para>

    <sect2>
      <title>Core concepts</title>

      <para>
        Each of the authorization mechanisms provided by the Seam Security API are built upon the concept of a user
        being granted roles and/or permissions.  A role is a <emphasis>group</emphasis>, or <emphasis>type</emphasis>,
        of user that may have been granted certain privileges for performing one or more specific actions within an
        application. A permission on the other hand is a privilege (sometimes once-off) for performing a single,
        specific action.  It is entirely possible to build an application using nothing but permissions, however
        roles offer a higher level of convenience when granting privileges to groups of users.
      </para>

      <para>
        Roles are simple, consisting of only a name such as "admin", "user", "customer", etc.  Permissions consist of
        both a name and an action, and are represented within this documentation in the form <literal>name:action</literal>,
        for example <literal>customer:delete</literal>, or <literal>customer:insert</literal>.
      </para>

    </sect2>

    <sect2>
      <title>Securing components</title>

      <para>
        Let's start by examining the simplest form of authorization, component security, starting with the
        <literal>@Restrict</literal> annotation.
      </para>

      <sect3>
        <title>The @Restrict annotation</title>

        <para>
          Seam components may be secured either at the method or the class level, using the <literal>@Restrict</literal>
          annotation.  If both a method and it's declaring class are annotated with <literal>@Restrict</literal>,
          the method restriction will take precedence (and the class restriction will not apply).  If a method
          invocation fails a security check, then an exception will be thrown as per the contract for
          <literal>Identity.checkRestriction()</literal> (see Inline Restrictions).  A <literal>@Restrict</literal>
          on just the component class itself is equivalent to adding <literal>@Restrict</literal> to each of its
          methods.
        </para>

        <para>
          An empty <literal>@Restrict</literal> implies a permission check of <literal>componentName:methodName</literal>.
          Take for example the following component method:
        </para>

        <programlisting><![CDATA[@Name("account")
public class AccountAction {
    @Restrict public void delete() {
      ...
    }
}]]></programlisting>

        <para>
          In this example, the implied permission required to call the <literal>delete()</literal> method is
          <literal>account:delete</literal>.  The equivalent of this would be to write
          <literal>@Restrict("#{s:hasPermission('account','delete',null)}")</literal>.  Now let's look at
          another example:
        </para>

        <programlisting><![CDATA[@Restrict @Name("account")
public class AccountAction {
    public void insert() {
      ...
    }
    @Restrict("#{s:hasRole('admin')}")
    public void delete() {
      ...
    }
}]]></programlisting>

        <para>
          This time, the component class itself is annotated with <literal>@Restrict</literal>.  This means that
          any methods without an overriding <literal>@Restrict</literal> annotation require an implicit permission check.
          In the case of this example, the <literal>insert()</literal> method requires a permission of
          <literal>account:insert</literal>, while the <literal>delete()</literal> method requires that the user is a
          member of the <literal>admin</literal> role.
        </para>

        <para>
          Before we go any further, let's address the <literal>#{s:hasRole()}</literal> expression seen in the above
          example.  Both <literal>s:hasRole</literal> and <literal>s:hasPermission</literal> are EL functions, which
          delegate to the correspondingly named methods of the <literal>Identity</literal> class. These
          functions can be used within any EL expression throughout the entirety of the security API.
        </para>

        <para>
          Being an EL expression, the value of the <literal>@Restrict</literal> annotation may reference any objects that
          exist within a Seam context.  This is extremely useful when performing permission checks for a specific
          object instance.  Look at this example:
        </para>

        <programlisting><![CDATA[@Name("account")
public class AccountAction {
    @In Account selectedAccount;
    @Restrict("#{s:hasPermission('account','modify',selectedAccount)}")
    public void modify() {
        selectedAccount.modify();
    }
}]]></programlisting>

        <para>
          The interesting thing to note from this example is the reference to <literal>selectedAccount</literal>
          seen within the <literal>hasPermission()</literal> function call.  The value of this variable will be
          looked up from within the Seam context, and passed to the <literal>hasPermission()</literal> method
          in <literal>Identity</literal>, which in this case can then determine if the user has the required
          permission for modifying the specified <literal>Account</literal> object.
        </para>
      </sect3>

      <sect3>
        <title>Inline restrictions</title>
        <para>
          Sometimes it might be desirable to perform a security check in code, without using the
          <literal>@Restrict</literal> annotation.  In this situation, simply use
          <literal>Identity.checkRestriction()</literal> to evaluate a security expression, like this:
        </para>

        <programlisting><![CDATA[public void deleteCustomer() {
    Identity.instance().checkRestriction("#{s:hasPermission('customer','delete',selectedCustomer)}");
}]]></programlisting>

        <para>
          If the expression specified doesn't evaluate to <literal>true</literal>, either
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    if the user is not logged in, a <literal>NotLoggedInException</literal>
                    exception is thrown or
                </para>
            </listitem>
            <listitem>
                <para>
                    if the user is logged in, an <literal>AuthorizationException</literal>
                    exception is thrown.
                </para>
            </listitem>
        </itemizedlist>

        <para>
          It is also possible to call the <literal>hasRole()</literal> and <literal>hasPermission()</literal>
          methods directly from Java code:
        </para>

        <programlisting><![CDATA[if (!Identity.instance().hasRole("admin"))
     throw new AuthorizationException("Must be admin to perform this action");

if (!Identity.instance().hasPermission("customer", "create", null))
     throw new AuthorizationException("You may not create new customers");]]></programlisting>

      </sect3>
    </sect2>

    <sect2>
      <title>Security in the user interface</title>

      <para>
        One indication of a well designed user interface is that the user is not presented with options for
        which they don't have the necessary privileges to use.  Seam Security allows conditional rendering of
        either 1) sections of a page or 2) individual controls, based upon the privileges of the user, using
        the very same EL expressions that are used for component security.
      </para>

      <para>
        Let's take a look at some examples of interface security.  First of all, let's pretend that we have a
        login form that should only be rendered if the user is not already logged in.  Using the
        <literal>identity.isLoggedIn()</literal> property, we can write this:
      </para>

      <programlisting><![CDATA[<h:form class="loginForm" rendered="#{not identity.loggedIn}">]]></programlisting>

      <para>
        If the user isn't logged in, then the login form will be rendered - very straight forward so far.
        Now let's pretend there is a menu on the page that contains some actions which should only be accessible
        to users in the <literal>manager</literal> role.  Here's one way that these could be written:
      </para>

      <programlisting><![CDATA[<h:outputLink action="#{reports.listManagerReports}" rendered="#{s:hasRole('manager')}">
    Manager Reports
</h:outputLink>]]></programlisting>

      <para>
        This is also quite straight forward.  If the user is not a member of the <literal>manager</literal>
        role, then the outputLink will not be rendered. The <literal>rendered</literal> attribute can
        generally be used on the control itself, or on a surrounding <literal>&lt;s:div&gt;</literal> or
        <literal>&lt;s:span&gt;</literal> control.
      </para>

      <para>
        Now for something more complex.  Let's say you have a <literal>h:dataTable</literal> control on a
        page listing records for which you may or may not wish to render action links depending on the
        user's privileges.  The <literal>s:hasPermission</literal> EL function allows us to pass in an
        object parameter which can be used to determine whether the user has the requested permission
        for that object or not. Here's how a dataTable with secured links might look:
      </para>

      <programlisting><![CDATA[<h:dataTable value="#{clients}" var="cl">
    <h:column>
        <f:facet name="header">Name</f:facet>
        #{cl.name}
    </h:column>
    <h:column>
        <f:facet name="header">City</f:facet>
        #{cl.city}
    </h:column>
    <h:column>
        <f:facet name="header">Action</f:facet>
        <s:link value="Modify Client" action="#{clientAction.modify}"
                rendered="#{s:hasPermission('client','modify',cl)"/>
        <s:link value="Delete Client" action="#{clientAction.delete}"
                rendered="#{s:hasPermission('client','delete',cl)"/>
    </h:column>
</h:dataTable>]]></programlisting>

    </sect2>

    <sect2>
      <title>Securing pages</title>
      <para>
        Page security requires that the application is using a <literal>pages.xml</literal> file, however is
        extremely simple to configure.  Simply include a <literal>&lt;restrict/&gt;</literal> element within
        the <literal>page</literal> elements that you wish to secure.  If no explicit restriction is specified
        by the <literal>restrict</literal> element, an implied permission of <literal>/viewId.xhtml:render</literal>
        will be checked when the page is accessed via a non-faces (GET) request, and a permission of
        <literal>/viewId.xhtml:restore</literal> will be required when any JSF postback (form submission) originates
        from the page.  Otherwise, the specified restriction will be evaluated as a standard security expression.
        Here's a couple of examples:
      </para>

      <programlisting><![CDATA[<page view-id="/settings.xhtml">
    <restrict/>
</page>]]></programlisting>

      <para>
        This page has an implied permission of <literal>/settings.xhtml:render</literal> required for non-faces
        requests and an implied permission of <literal>/settings.xhtml:restore</literal> for faces requests.
      </para>

      <programlisting><![CDATA[<page view-id="/reports.xhtml">
    <restrict>#{s:hasRole('admin')}</restrict>
</page>]]></programlisting>

      <para>
        Both faces and non-faces requests to this page require that the user is a member of the
        <literal>admin</literal> role.
      </para>

    </sect2>

    <sect2>
      <title>Securing Entities</title>

      <para>
        Seam security also makes it possible to apply security restrictions to read, insert, update and
        delete actions for entities.
      </para>

      <para>
        To secure all actions for an entity class, add a <literal>@Restrict</literal> annotation on the class
        itself:
      </para>

      <programlisting><![CDATA[@Entity
@Name("customer")
@Restrict
public class Customer {
  ...
}]]></programlisting>

      <para>
        If no expression is specified in the <literal>@Restrict</literal> annotation, the default security check
        that is performed is a permission check of <literal>entityName:action</literal>,
        where <literal>entityName</literal> is the Seam component name of the entity (or the fully-qualified class name if no @Name is
        specified), and the <literal>action</literal> is either <literal>read</literal>,
        <literal>insert</literal>, <literal>update</literal> or <literal>delete</literal>.
      </para>

      <para>
        It is also possible to only restrict certain actions, by placing a <literal>@Restrict</literal> annotation
        on the relevent entity lifecycle method (annotated as follows):
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <literal>@PostLoad</literal> - Called after an entity instance is loaded from the database. Use this
            method to configure a <literal>read</literal> permission.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>@PrePersist</literal> - Called before a new instance of the entity is inserted. Use this method
            to configure an <literal>insert</literal> permission.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>@PreUpdate</literal> - Called before an entity is updated. Use this method
            to configure an <literal>update</literal> permission.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>@PreRemove</literal> - Called before an entity is deleted. Use this method
            to configure a <literal>delete</literal> permission.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Here's an example of how an entity would be configured to perform a security check for any <literal>insert</literal>
        operations.  Please note that the method is not required to do anything, the only important thing in regard to
        security is how it is annotated:
      </para>

      <programlisting><![CDATA[
  @PrePersist @Restrict
  public void prePersist() {}
   ]]></programlisting>

      <para>
        And here's an example of an entity permission rule that checks if the authenticated user is allowed to insert
        a new <literal>MemberBlog</literal> record (from the seamspace example).  The entity for which the security
        check is being made is automatically inserted into the working memory (in this case <literal>MemberBlog</literal>):
      </para>

      <programlisting><![CDATA[rule InsertMemberBlog
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "memberBlog", action == "insert", granted == false)
  Principal(principalName : name)
  MemberBlog(member : member -> (member.getUsername().equals(principalName)))
then
  check.grant();
end;]]></programlisting>

       <para>
         This rule will grant the permission <literal>memberBlog:insert</literal> if the currently authenticated
         user (indicated by the <literal>Principal</literal> fact) has the same name as the member for which the
         blog entry is being created.  The "<literal>principalName : name</literal>" structure that can be seen in the
         <literal>Principal</literal> fact (and other places) is a variable binding - it binds the <literal>name</literal>
         property of the <literal>Principal</literal> to a variable called <literal>principalName</literal>.  Variable bindings
         allow the value to be referred to in other places, such as the following line which compares the member's username
         to the <literal>Principal</literal> name.  For more details, please refer to the JBoss Rules documentation.
       </para>

       <para>
         Finally, we need to install a listener class that integrates Seam security with
         your JPA provider.
       </para>

      <sect3>
        <title>Entity security with JPA</title>

        <para>
          Security checks for EJB3 entity beans are performed with an <literal>EntityListener</literal>.
          You can install this listener by using the following <literal>META-INF/orm.xml</literal> file:
        </para>

        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd"
                 version="1.0">

    <persistence-unit-metadata>
        <persistence-unit-defaults>
            <entity-listeners>
                <entity-listener class="org.jboss.seam.security.EntitySecurityListener"/>
            </entity-listeners>
        </persistence-unit-defaults>
    </persistence-unit-metadata>

</entity-mappings>]]></programlisting>

      </sect3>

      <sect3>
        <title>Entity security with Hibernate</title>

        <para>
          If you are using a Hibernate <literal>SessionFactory</literal> configured via Seam, you don't
          need to do anything special to use entity security.
        </para>

      </sect3>

    </sect2>

  </sect1>

  <sect1>
    <title>Writing Security Rules</title>

    <para>
      Up to this point there has been a lot of mention of permissions, but no information about how permissions
      are actually defined or granted.  This section completes the picture, by explaining how permission
      checks are processed, and how to implement permission checks for a Seam application.
    </para>

    <sect2>
      <title>Permissions Overview</title>

      <para>
        So how does the security API know whether a user has the <literal>customer:modify</literal> permission
        for a specific customer?  Seam Security provides quite a novel method for determining user permissions,
        based on JBoss Rules.  A couple of the advantages of using a rule engine are 1) a centralized location
        for the business logic that is behind each user permission, and 2) speed - JBoss Rules uses very efficient
        algorithms for evaluating large numbers of complex rules involving multiple conditions.
      </para>

    </sect2>

    <sect2>
      <title>Configuring a rules file</title>

      <para>
        Seam Security expects to find a <literal>RuleBase</literal> component called <literal>securityRules</literal>
        which it uses to evaluate permission checks.  This is configured in <literal>components.xml</literal> as follows:
      </para>

      <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
            xmlns:core="http://jboss.com/products/seam/core"
            xmlns:security="http://jboss.com/products/seam/security"
            xmlns:drools="http://jboss.com/products/seam/drools"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation=
                "http://jboss.com/products/seam/core http://jboss.com/products/seam/core-2.1.xsd
                 http://jboss.com/products/seam/components http://jboss.com/products/seam/components-2.1.xsd
                 http://jboss.com/products/seam/drools http://jboss.com/products/seam/drools-2.1.xsd"
                 http://jboss.com/products/seam/security http://jboss.com/products/seam/security-2.1.xsd">

   <drools:rule-base name="securityRules">
       <drools:rule-files>
           <value>/META-INF/security.drl</value>
       </drools:rule-files>
   </drools:rule-base>

</components>]]></programlisting>

      <para>
        Once the <literal>RuleBase</literal> component is configured, it's time to write the security rules.
      </para>
    </sect2>

    <sect2>
      <title>Creating a security rules file</title>
      <para>
        For this step you need to create a file called <literal>security.drl</literal> in the
        <literal>/META-INF</literal> directory of your application's jar file.  In actual fact this file can be called
        anything you want, and exist in any location as long as it is configured appropriately in
        <literal>components.xml</literal>.
      </para>

      <para>
        So what should the security rules file contain?  At this stage it might be a good idea to at least skim
        through the JBoss Rules documentation, however to get started here's an extremely simple example:
      </para>

      <programlisting><![CDATA[package MyApplicationPermissions;

import org.jboss.seam.security.PermissionCheck;
import org.jboss.seam.security.Role;

rule CanUserDeleteCustomers
when
  c: PermissionCheck(name == "customer", action == "delete")
  Role(name == "admin")
then
  c.grant();
end;]]></programlisting>

      <para>
        Let's break this down.  The first thing we see is the package declaration.  A package in JBoss Rules
        is essentially a collection of rules.  The package name can be anything you want - it doesn't relate
        to anything else outside the scope of the rule base.
      </para>

      <para>
        The next thing we can notice is a couple of import statements for the <literal>PermissionCheck</literal>
        and <literal>Role</literal> classes. These imports inform the rules engine that we'll be referencing
        these classes within our rules.
      </para>

      <para>
        Finally we have the code for the rule.  Each rule within a package should be given a unique name (usually
        describing the purpose of the rule).  In this case our rule is called <literal>CanUserDeleteCustomers</literal>
        and will be used to check whether a user is allowed to delete a customer record.
      </para>

      <para>
        Looking at the body of the rule definition we can notice two distinct sections.  Rules have what is known
        as a left hand side (LHS) and a right hand side (RHS).  The LHS consists of the conditional part of the
        rule, i.e. a list of conditions which must be satisfied for the rule to fire.  The LHS is represented by
        the <literal>when</literal> section.  The RHS is the consequence, or action section of the rule that will
        only be fired if all of the conditions in the LHS are met.  The RHS is represented by the
        <literal>then</literal> section.  The end of the rule is denoted by the <literal>end;</literal> line.
      </para>

      <para>
        If we look at the LHS of the rule, we see two conditions listed there.  Let's examine the first condition:
      </para>

      <programlisting><![CDATA[c: PermissionCheck(name == "customer", action == "delete")]]></programlisting>

      <para>
        In plain english, this condition is stating that there must exist a <literal>PermissionCheck</literal> object
        with a <literal>name</literal> property equal to "customer", and an <literal>action</literal> property equal
        to "delete" within the working memory.
      </para>
             
      <para>
        So what is the working memory? Also known as a "stateful session" in Drools terminology, the working memory 
        is a session-scoped object that contains the contextual information that is required by the rules engine to 
        make a decision about a permission check. Each time the <literal>hasPermission()</literal> method is called, 
        a temporary <literal>PermissionCheck</literal> object, or <emphasis>Fact</emphasis>, is inserted into the 
        working memory.  This <literal>PermissionCheck</literal> corresponds exactly to the permission that is being 
        checked, so for example if you call <literal>hasPermission("account", "create", null)</literal> then a 
        <literal>PermissionCheck</literal> object with a <literal>name</literal> equal to "account" and 
        <literal>action</literal> equal to "create" will be inserted into the working memory for the duration of the 
        permission check.
      </para>
      
      <para>
        Besides the <literal>PermissionCheck</literal> facts, there is also a <literal>org.jboss.seam.security.Role</literal>
        fact for each of the roles that the authenticated user is a member of.  These <literal>Role</literal> facts 
        are synchronized with the user's authenticated roles at the beginning of every permission check.  As a consequence, 
        any <literal>Role</literal> object that is inserted into the working memory during the course of a permission
        check will be removed before the next permission check occurs, if the authenticated user is not a member of
        that role.  Besides the <literal>PermissionCheck</literal> and <literal>Role</literal> facts, the working
        memory also contains the <literal>java.security.Principal</literal> object that was created during
        the authentication process.  
      </para>
      
      <para>
        It is also possible to insert additional long-lived facts into the working  memory by calling 
        <literal>((RuleBasedIdentity) RuleBasedIdentity.instance()).getSecurityContext().insert()</literal>,
        passing the object as a parameter.  The exception to this is <literal>Role</literal> objects, which as
        already discussed are synchronized at the start of each permission check.
      </para>

      <para>
        Getting back to our simple example, we can also notice that the first line of our LHS is prefixed with
        <literal>c:</literal>.  This is a variable binding, and is used to refer back to the object that is
        matched by the condition.  Moving onto the second line of our LHS, we see this:
      </para>

      <programlisting><![CDATA[Role(name == "admin")]]></programlisting>

      <para>
        This condition simply states that there must be a <literal>Role</literal> object with a 
        <literal>name</literal> of "admin" within the working memory.  As mentioned, user roles are inserted into 
        the working memory at the beginning of each permission check.  So, putting both conditions together, this 
        rule is essentially saying "I will fire if you are checking for the <literal>customer:delete</literal> 
        permission and the user is a member of the <literal>admin</literal> role".
      </para>

      <para>
        So what is the consequence of the rule firing?  Let's take a look at the RHS of the rule:
      </para>

      <programlisting><![CDATA[c.grant()]]></programlisting>

      <para>
        The RHS consists of Java code, and in this case is invoking the <literal>grant()</literal>
        method of the <literal>c</literal> object, which as already mentioned is a variable binding
        for the <literal>PermissionCheck</literal> object.  Besides the <literal>name</literal> and
        <literal>action</literal> properties of the <literal>PermissionCheck</literal> object, there
        is also a <literal>granted</literal> property which is initially set to <literal>false</literal>.
        Calling <literal>grant()</literal> on a <literal>PermissionCheck</literal> sets the
        <literal>granted</literal> property to <literal>true</literal>, which means that the permission
        check was successful, allowing the user to carry out whatever action the permission check was
        intended for.
      </para>

      <sect3>
        <title>Wildcard permission checks</title>

        <para>
          It is possible to implement a wildcard permission check (which allows all actions for a given permission
          name), by omitting the <literal>action</literal> constraint for the <literal>PermissionCheck</literal> in
          your rule, like this:
        </para>

        <programlisting><![CDATA[rule CanDoAnythingToCustomersIfYouAreAnAdmin
when
  c: PermissionCheck(name == "customer")
  Role(name == "admin")
then
  c.grant();
end;
        ]]></programlisting>

        <para>
          This rule allows users with the <literal>admin</literal> role to perform <emphasis>any</emphasis> action for
          any <literal>customer</literal> permission check.
        </para>
      </sect3>

    </sect2>

  </sect1>

  <sect1>
    <title>SSL Security</title>

    <para>
      Seam includes basic support for serving sensitive pages via the HTTPS protocol.  This is easily
      configured by specifying a <literal>scheme</literal> for the page in <literal>pages.xml</literal>.
      The following example shows how the view <literal>/login.xhtml</literal> is configured to use
      HTTPS:
    </para>

    <programlisting><![CDATA[<page view-id="/login.xhtml" scheme="https"/>]]></programlisting>

    <para>
      This configuration is automatically extended to both <literal>s:link</literal> and
      <literal>s:button</literal> JSF controls, which (when specifying the <literal>view</literal>)
      will also render the link using the correct protocol.  Based on the previous example, the following
      link will use the HTTPS protocol because <literal>/login.xhtml</literal> is configured to use it:
    </para>

    <programlisting><![CDATA[<s:link view="/login.xhtml" value="Login"/>]]></programlisting>

    <para>
      Browsing directly to a view when using the <emphasis>incorrect</emphasis> protocol will cause a
      redirect to the same view using the <emphasis>correct</emphasis> protocol.  For example, browsing
      to a page that has <literal>scheme="https"</literal> using HTTP will cause a redirect to the same
      page using HTTPS.
    </para>

    <para>
      It is also possible to configure a <emphasis>default scheme</emphasis> for all pages. This is useful
      if you wish to use HTTPS for a only few pages. If no default scheme is specified then the normal
      behavior is to continue use the current scheme. So once the user accessed a page that required
      HTTPS, then HTTPS would continue to be used after the user navigated away to other non-HTTPS pages.
      (While this is good for security, it is not so great for performance!). To define HTTP as the
      default <literal>scheme</literal>, add this line to <literal>pages.xml</literal>:
    </para>

    <programlisting><![CDATA[<page view-id="*" scheme="http" />]]></programlisting>

    <para>
      Of course, if <emphasis>none</emphasis> of the pages in your application use HTTPS then it is not
      required to specify a default scheme.
    </para>

    <para>
      You may configure Seam to automatically invalidate the current HTTP session each time the scheme
      changes. Just add this line to <literal>components.xml</literal>:
    </para>

    <programlisting><![CDATA[<core:servlet-session invalidate-on-scheme-change="true"/>]]></programlisting>

    <para>
      This option helps make your system less vulnerable to sniffing of the session id or leakage of
      sensitive data from pages using HTTPS to other pages using HTTP.
    </para>

  </sect1>

  <sect1>
    <title>CAPTCHA</title>

    <para>
      Though strictly not part of the security API, Seam provides a built-in CAPTCHA (<emphasis>C</emphasis>ompletely
      <emphasis>A</emphasis>utomated <emphasis>P</emphasis>ublic <emphasis>T</emphasis>uring test to tell
      <emphasis>C</emphasis>omputers and <emphasis>H</emphasis>umans <emphasis>A</emphasis>part) algorithm to
      prevent automated processes from interacting with your application.
    </para>

    <sect2>
      <title>Configuring the CAPTCHA Servlet</title>
      <para>
        To get up and running, it is necessary to configure the Seam Resource Servlet, which will provide the Captcha
        challenge images to your pages.  This requires the following entry in <literal>web.xml</literal>:
      </para>

      <programlisting><![CDATA[<servlet>
    <servlet-name>Seam Resource Servlet</servlet-name>
    <servlet-class>org.jboss.seam.servlet.SeamResourceServlet</servlet-class>
</servlet>

<servlet-mapping>
    <servlet-name>Seam Resource Servlet</servlet-name>
    <url-pattern>/seam/resource/*</url-pattern>
</servlet-mapping>]]></programlisting>

    </sect2>

    <sect2>
      <title>Adding a CAPTCHA to a form</title>

      <para>
        Adding a CAPTCHA challenge to a form is extremely easy. Here's an example:
      </para>

      <programlisting><![CDATA[<h:graphicImage value="/seam/resource/captcha"/>
<h:inputText id="verifyCaptcha" value="#{captcha.response}" required="true">
   <s:validate />
</h:inputText>
<h:message for="verifyCaptcha"/>]]></programlisting>

      <para>
        That's all there is to it.  The <literal>graphicImage</literal> control displays the CAPTCHA challenge,
        and the <literal>inputText</literal> receives the user's response. The response is automatically
        validated against the CAPTCHA when the form is submitted.
      </para>

    </sect2>

    <sect2>
      <title>Customising the CAPTCHA algorithm</title>

      <para>
        You may customize the CAPTCHA algorithm by overriding the built-in component:
      </para>

      <programlisting><![CDATA[@Name("org.jboss.seam.captcha")
@Scope(SESSION)
public class HitchhikersCaptcha extends Captcha
{
   @Override @Create
   public void init()
   {
      setChallenge("What is the answer to life, the universe and everything?");
      setCorrectResponse("42");
   }

   @Override
   public BufferedImage renderChallenge()
   {
       BufferedImage img = super.renderChallenge();
       img.getGraphics().drawOval(5, 3, 60, 14); //add an obscuring decoration
       return img;
   }
}]]></programlisting>

    </sect2>

  </sect1>

  <sect1>
    <title>Security Events</title>

    <para>
      The following table describes a number of events (see <xref linkend="events"/>) raised by Seam Security.
    </para>

    <table>
      <title>Security Events</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*"/>
        <colspec colnum="2" colwidth="3*"/>

        <thead>
          <row>
            <entry align="center">
              <para>Event Key</para>
            </entry>
            <entry align="center">
              <para>Description</para>
            </entry>
          </row>
        </thead>

        <tbody>

          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.loginSuccessful</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised when a login attempt is successful.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.loginFailed</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised when a login attempt fails.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.alreadyLoggedIn</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised when a user that is already authenticated attempts to log in again.
              </para>
            </entry>
          </row>          
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.notLoggedIn</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised when a security check fails when the user is not logged in.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.notAuthorized</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised when a security check fails when the user is logged in however doesn't have sufficient privileges.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.preAuthenticate</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised just prior to user authentication.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.postAuthenticate</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised just after user authentication.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.loggedOut</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised after the user has logged out.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.credentialsUpdated</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised when the user's credentials have been changed.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>org.jboss.seam.security.rememberMe</literal>
              </para>
            </entry>
            <entry>
              <para>
                Raised when the Identity's rememberMe property is changed.
              </para>
            </entry>
          </row>

        </tbody>
      </tgroup>
    </table>

  </sect1>
  
  <sect1>
    <title>Run As</title>
    
    <para>
        Sometimes it may be necessary to perform certain operations with elevated privileges, such
        as creating a new user account as an unauthenticated user.  Seam Security supports such a
        mechanism via the <literal>RunAsOperation</literal> class.  This class allows either the
        <literal>Principal</literal> or <literal>Subject</literal>, or the user's roles to be
        overridden for a single set of operations.
    </para>
    
    <para>
      The following code example demonstrates how <literal>RunAsOperation</literal> is used, by
      overriding its <literal>getRoles()</literal> method to specify a set of roles to masquerade
      as for the duration of the operation.  The <literal>execute()</literal> method contains the
      code that will be executed with the elevated privileges.
    </para>
    
    <programlisting><![CDATA[    new RunAsOperation() {
       @Override
       public String[] getRoles() {
          return new String[] { "admin" };
       }
       
       public void execute() {
          identityManager.createAccount(username, password);
          identityManager.grantRole(username, "user");            
       }         
    }.run();]]></programlisting>
    
    <para>
        In a similar way, the <literal>getPrincipal()</literal> or <literal>getSubject()</literal>
        methods can also be overriden to specify the <literal>Principal</literal> and 
        <literal>Subject</literal> instances to use for the duration of the operation.
        Finally, the <literal>run()</literal> method is used to carry out the 
        <literal>RunAsOperation</literal>.
    </para>

  </sect1>

  <sect1>
    <title>Extending the Identity component</title>

    <para>
      Sometimes it might be necessary to extend the Identity component if your application has
      special security requirements.  For example, users might be required to authenticate using
      a Company or Department ID, along with their usual username and password.  If permission-based
      security is required then RuleBasedIdentity should be extended, otherwise Identity should be
      extended.
    </para>

    <para>
      The following example shows an extended Identity component with an additional
      <literal>companyCode</literal> field.  The install precendence of <literal>APPLICATION</literal>
      ensures that this extended Identity gets installed in preference to the built-in Identity.
    </para>

    <programlisting><![CDATA[@Name("org.jboss.seam.security.identity")
@Scope(SESSION)
@Install(precedence = APPLICATION)
@BypassInterceptors
@Startup
public class CustomIdentity extends Identity
{
   private static final LogProvider log = Logging.getLogProvider(CustomIdentity.class);

   private String companyCode;

   public String getCompanyCode()
   {
      return companyCode;
   }

   public void setCompanyCode(String companyCode)
   {
      this.companyCode = companyCode;
   }

   @Override
   public String login()
   {
      log.info("###### CUSTOM LOGIN CALLED ######");
      return super.login();
   }
}]]></programlisting>

  </sect1>

  <sect1>
    <title>Identity Management</title>

    <para>
      Seam Security provides an optional identity management API, which offers the following features:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          User management - the ability to create, delete and modify user accounts and their role memberships.
        </para>
      </listitem>
      <listitem>
        <para>
          Authentication of users without the need for writing an Authenticator component.
        </para>
      </listitem>
      <listitem>
        <para>
          A hierarchical role/group membership structure, allowing roles to be members of other roles.
        </para>
      </listitem>
      <listitem>
        <para>
          Pluggable identity store, allowing the developer to choose their security provider, whether it be
          JPA, LDAP, Kerberos, etc.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The core of the identity management API is the <literal>IdentityManager</literal> component.  Before it can be
      used however, it must be configured with an <literal>IdentityStore</literal> implementation.  The
      <literal>IdentityStore</literal> does the actual work of interacting with the underlying security provider,
      whatever it may be.
    </para>

    <mediaobject>
      <imageobject role="fo">
        <imagedata fileref="/images/security-identitymanager.png" align="center"/>
      </imageobject>
      <imageobject role="html">
        <imagedata fileref="/images/security-identitymanager.png" align="center"/>
      </imageobject>
    </mediaobject>

    <sect2>
      <title>Configuration</title>

      <para>
        Configuration of the <literal>IdentityManager</literal> is extremely simple, requiring only an
        <literal>IdentityStore</literal> to be configured in <literal>components.xml</literal>.
        The identity management namespace is <literal>http://jboss.com/products/seam/security/management</literal>
        and its schema location is <literal>http://jboss.com/products/seam/identity-management-2.1.xsd</literal>.
        Here's a simple example showing the configuration of a <literal>JPAIdentityStore</literal> - for the
        <literal>IdentityManager</literal> to use it, it must be named <literal>identityStore</literal>:
      </para>

      <programlisting><![CDATA[
  <identity-management:jpa-identity-store name="identityStore" account-class="com.acme.UserAccount"/>
      ]]></programlisting>
    </sect2>

    <sect2>
      <title>JPAIdentityStore</title>

      <para>
        <literal>JPAIdentityStore</literal> is an <literal>IdentityStore</literal> implementation that uses
        JPA as its underlying security provider.  User accounts and their role memberships are stored in a
        self-referencing database table, for which the corresponding entity bean must extend
        <literal>org.jboss.seam.security.management.UserAccount</literal> to provide the following properties:
      </para>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="/images/security-useraccount.png" align="center"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="/images/security-useraccount.png" align="center"/>
        </imageobject>
      </mediaobject>

      <para>
        To provide a complete example, here's what the actual database tables may look like:
      </para>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="/images/security-useraccountschema.png" align="center"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="/images/security-useraccountschema.png" align="center"/>
        </imageobject>
      </mediaobject>

      <para>
        And an example of the corresponding entity bean:
      </para>

      <programlisting><![CDATA[@Entity @Table(name = "USER_ACCOUNT")
public class UserAccount extends org.jboss.seam.security.management.UserAccount
                         implements Serializable
{
   private Integer accountId;
   private String username;
   private String passwordHash;
   private boolean enabled;
   private AccountType accountType;
   private Set<UserAccount> memberships;

   @Id @GeneratedValue public Integer getAccountId() { return accountId; }
   public void setAccountId(Integer accountId) { this.accountId = accountId; }

   @NotNull @Override public String getUsername() { return username; }
   @Override public void setUsername(String username) { this.username = username; }

   @Override public String getPasswordHash() { return passwordHash; }
   @Override public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }

   @Override public AccountType getAccountType() { return accountType; }
   @Override public void setAccountType(AccountType accountType) { this.accountType = accountType; }

   @Override public boolean isEnabled() { return enabled; }
   @Override public void setEnabled(boolean enabled) { this.enabled = enabled; }

   @ManyToMany(targetEntity = MemberAccount.class) @JoinTable(name = "ACCOUNT_MEMBERSHIP",
         joinColumns = @JoinColumn(name = "ACCOUNT_ID"),
         inverseJoinColumns = @JoinColumn(name = "MEMBER_OF"))
   @Override public Set<UserAccount> getMemberships() { return memberships; }
   @Override public void setMemberships(Set<UserAccount> memberships) { this.memberships = memberships; }}]]></programlisting>

      <para>
        In the above example, the implementation of <literal>UserAccount</literal> is self-referencing
        in that it has a many-to-many relationship with itself via its <literal>memberships</literal>
        property.  To keep the model simple, both user accounts and roles are persisted as
        <literal>UserAccount</literal>s, with the <literal>accountType</literal> property acting as the
        discriminator between the two.  With this model, roles can be members of other roles, making it
        possible to define complex role membership hierarchies.
      </para>

      <para>
        Once the <literal>UserAccount</literal> implementation has been created, the <literal>JPAIdentityStore</literal>
        must be configured to use that implementation any time it performs an identity management operation.
        This is done by specifying the <literal>account-class</literal> property in <literal>components.xml</literal>.
        In the following example, it is configured as <literal>com.acme.UserAccount</literal>:
      </para>

      <programlisting><![CDATA[
  <identity-management:jpa-identity-store name="identityStore" account-class="com.acme.UserAccount"/>]]></programlisting>

      <para>
        Please note that this is a required parameter, and must always be specified when using the
        <literal>JPAIdentityStore</literal>.
      </para>
      
      <sect3>
        <title>Password hashing</title>
        
        <para>
            The <literal>JPAIdentityStore</literal> stores a salted hash of the user's password, using the username
            as the source material for salt generation.  This guarantees that two users with the same password will
            still have different password hashes.  The method for generating a password hash is listed here for
            convenience - it may be useful for generating password hashes for inclusion in DML scripts, etc:
        </para>
        
        <programlisting><![CDATA[
   public String hashPassword(String password, String saltPhrase)
   {
      try {
         MessageDigest md = MessageDigest.getInstance("MD5");
         
         md.update(saltPhrase.getBytes());
         byte[] salt = md.digest();
         
         md.reset();
         md.update(password.getBytes("UTF-8"));
         md.update(salt);
         
         byte[] raw = md.digest();
         
         return new String(Hex.encodeHex(raw));
     } 
     catch (Exception e) {
         throw new RuntimeException(e);        
     }      
   }         
        ]]></programlisting>
      </sect3>

    </sect2>

    <sect2>
      <title>Authentication with the Identity Management API</title>

      <para>
        To authenticate using the Identity Management API, it is as simple as not specifying the
        <literal>authenticate-method</literal> property for the <literal>Identity</literal> component.
        If no <literal>authenticate-method</literal> is specified, then by default the authentication
        process (controlled by <literal>SeamLoginModule</literal>) will attempt to authenticate using
        <literal>IdentityManager</literal>'s <literal>authenticate()</literal> method, and no
        Authenticator component is necessary.
      </para>
    </sect2>

    <sect2>
      <title>Using the IdentityManager API</title>

      <para>
        The <literal>IdentityManager</literal> can be accessed either by injecting it into your Seam
        component as follows:
      </para>

      <programlisting><![CDATA[  @In IdentityManager identityManager;]]></programlisting>

      <para>
        or by accessing it through its static <literal>instance()</literal> method:
      </para>

      <programlisting><![CDATA[  IdentityManager identityManager = IdentityManager.instance();]]></programlisting>

      <para>
        The following table describes each of the methods that <literal>IdentityManager</literal> provides:
      </para>

      <table>
        <title>Identity Management API</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>
          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry align="center">
                <para>Method</para>
              </entry>
              <entry align="center">
                <para>Returns</para>
              </entry>
              <entry align="center">
                <para>Description</para>
              </entry>
            </row>
          </thead>

          <tbody>

            <row>
              <entry>
                <para>
                  <literal>createAccount(String name, String password)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Creates a new user account, with the specified name and password.  Returns <literal>true</literal>
                  if successful, or <literal>false</literal> if not.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>deleteAccount(String name)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Deletes the user account with the specified name.  Returns <literal>true</literal>
                  if successful, or <literal>false</literal> if not.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>enableAccount(String name)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Enables the user account with the specified name.  Accounts that are not enabled are
                  not able to authenticate.  Returns <literal>true</literal> if successful, or
                  <literal>false</literal> if not.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>disableAccount(String name)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Disables the user account with the specified name.  Returns <literal>true</literal> if
                  successful, or <literal>false</literal> if not.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>changePassword(String name, String password)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Changes the password for the user account with the specified name.  Returns
                  <literal>true</literal> if successful, or <literal>false</literal> if not.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>isEnabled(String name)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Returns <literal>true</literal> if the specified user account is enabled, or
                  <literal>false</literal> if it isn't.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>grantRole(String name, String role)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Grants the specified role to the specified user account.  The role must already exist for it to
                  be granted.  Returns <literal>true</literal> if the role is successfully granted, or
                  <literal>false</literal> if it is already granted to the user.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>revokeRole(String name, String role)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Revokes the specified role from the specified user account.  Returns <literal>true</literal>
                  if the specified user is a member of the role and it is successfully revoked, or
                  <literal>false</literal> if the user is not a member of the role.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>accountExists(String name)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Returns <literal>true</literal> if the specified user exists, or <literal>false</literal>
                  if it doesn't.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>listUsers()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>List</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Returns a list of all user names, sorted in alpha-numeric order.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>listUsers(String filter)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>List</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Returns a list of all user names filtered by the specified filter parameter, sorted in alpha-numeric order.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>listRoles()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>List</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Returns a list of all role names.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>getGrantedRoles(String name)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>List</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Returns a list of the names of all the roles explicitly granted to the specified user name.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>getImpliedRoles(String name)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>List</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Returns a list of the names of all the roles implicitly granted to the specified user name.
                  Implicitly granted roles include those that are not directly granted to a user, rather they are
                  granted to the roles that the user is a member of.  For example, is the <literal>admin</literal>
                  role is a member of the <literal>user</literal> role, and a user is a member of the <literal>admin</literal>
                  role, then the implied roles for the user are both the <literal>admin</literal>, and <literal>user</literal>
                  roles.
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>authenticate(String name, String password)</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>boolean</literal>
                </para>
              </entry>
              <entry>
                <para>
                  Authenticates the specified username and password using the configured Identity Store.  Returns
                  <literal>true</literal> if successful or <literal>false</literal> if authentication failed.
                  Successful authentication implies nothing beyond the return value of the method.  It does not
                  change the state of the <literal>Identity</literal> component - to perform a proper Seam login the
                  <literal>Identity.login()</literal> must be used instead.
                </para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>

      <para>
        Using the Identity Management API requires that the calling user has the appropriate authorization to invoke
        its methods.  The following table describes the permission requirements for each of the methods in
        <literal>IdentityManager</literal>.
      </para>

      <table>
        <title>Identity Management Security Permissions</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*"/>
          <colspec colnum="2" colwidth="3*"/>

          <thead>
            <row>
              <entry align="center">
                <para>Method</para>
              </entry>
              <entry align="center">
                <para>Permission Name</para>
              </entry>
              <entry align="center">
                <para>Permission Action</para>
              </entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>
                <para>
                  <literal>createAccount()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>create</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>deleteAccount()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>delete</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>enableAccount()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>update</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>disableAccount()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>update</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>changePassword()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>update</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>isEnabled()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>read</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>grantRole()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>update</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>revokeRole()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>update</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>accountExists()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>read</literal>
                </para>
              </entry>
            </row>

            <row>
              <entry>
                <para>
                  <literal>listUsers()</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>seam.account</literal>
                </para>
              </entry>
              <entry>
                <para>
                  <literal>read</literal>
                </para>
              </entry>
            </row>

          </tbody>
        </tgroup>
      </table>

      <para>
        The following code listing provides an example set of security rules that grants access to all
        Identity Management-related methods to members of the <literal>admin</literal> role:
      </para>

      <programlisting><![CDATA[rule CreateAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "create", granted == false)
  Role(name == "admin")
then
  check.grant();
end

rule ReadAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "read", granted == false)
  Role(name == "admin")
then
  check.grant();
end

rule UpdateAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "update", granted == false)
  Role(name == "admin")
then
  check.grant();
end

rule DeleteAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "delete", granted == false)
  Role(name == "admin")
then
  check.grant();
end]]></programlisting>

    </sect2>

    <sect2>
      <title>Seam-gen and Identity Management</title>

      <para>
        When creating a new project using seam-gen (see <xref linkend="gettingstarted"/>), by default the
        <literal>IdentityManager</literal> will be configured with a <literal>JPAIdentityStore</literal>
        and a <literal>UserAccount</literal> implementation will be generated as part of the new project.
        In addition to this, the project will include the following user management screens, allowing
        new users to be created, roles assigned, etc:
      </para>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="/images/security-usermanager1.png" align="center"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="/images/security-usermanager1.png" align="center"/>
        </imageobject>
      </mediaobject>

      <para>
        The user detail screen:
      </para>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="/images/security-usermanager2.png" align="center"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="/images/security-usermanager2.png" align="center"/>
        </imageobject>
      </mediaobject>


    </sect2>

  </sect1>

</chapter>
    <chapter id="i18n">
    <title>Internationalization and themes</title>
    <para>
        Seam makes it easy to build internationalized applications by
        providing several built-in components for handling multi-language
        UI messages.
    </para>
    
    <section>
        <title>Locales</title>
        <para>
            Each user login session has an associated instance of
            <literal>java.util.Locale</literal> (available to the 
            application as a component named 
            <literal>locale</literal>). Under normal circumstances,
            you won't need to do any special configuration to set
            the locale. Seam just delegates to JSF to determine
            the active locale:
        </para>
        
        <itemizedlist>
            <listitem>
                <para>If there is a locale associated with the HTTP request
                (the browser locale), and that locale is in the list
                of supported locales from <literal>faces-config.xml</literal>, 
                use that locale for the rest of the session.</para>
            </listitem>
            <listitem>
                <para>Otherwise, if a default locale was specified in the
                <literal>faces-config.xml</literal>, use that locale 
                for the rest of the session.</para>
            </listitem>
            <listitem>
                <para>Otherwise, use the default locale of the server.</para>
            </listitem>
        </itemizedlist>
        
        <para>
            It is <emphasis>possible</emphasis> to set the locale
            manually via the Seam configuration properties
            <literal>org.jboss.seam.international.localeSelector.language</literal>,
            <literal>org.jboss.seam.international.localeSelector.country</literal> and
            <literal>org.jboss.seam.international.localeSelector.variant</literal>, but 
            we can't think of any good reason to ever do this.
        </para>
        
        <para>
            It is, however, useful to allow the user to set the
            locale manually via the application user interface.
            Seam provides built-in functionality for overriding
            the locale determined by the algorithm above. All
            you have to do is add the following fragment to a 
            form in your JSP or Facelets page:
        </para>
        
<programlisting><![CDATA[<h:selectOneMenu value="#{localeSelector.language}">
    <f:selectItem itemLabel="English" itemValue="en"/>
    <f:selectItem itemLabel="Deutsch" itemValue="de"/>
    <f:selectItem itemLabel="Francais" itemValue="fr"/>
</h:selectOneMenu>
<h:commandButton action="#{localeSelector.select}" value="#{messages['ChangeLanguage']}"/>]]></programlisting>

        <para>
            Or, if you want a list of all supported locales from 
            <literal>faces-config.xml</literal>, just use:
        </para>

        <programlisting><![CDATA[<h:selectOneMenu value="#{localeSelector.localeString}">
    <f:selectItems value="#{localeSelector.supportedLocales}"/>
</h:selectOneMenu>
<h:commandButton action="#{localeSelector.select}" value="#{messages['ChangeLanguage']}"/>]]></programlisting>

        <para>
            When this use selects an item from the drop-down, and 
            clicks the button, the Seam and JSF locales will be 
            overridden for the rest of the session.
        </para>
        
    </section>
    
    <section>
        <title>Labels</title>
        <para>
            JSF supports internationalization of user interface labels and
            descriptive text via the use of <literal>&lt;f:loadBundle /&gt;</literal>.
            You can use this approach in Seam applications. Alternatively, you can
            take advantage of the Seam <literal>messages</literal> component to 
            display templated labels with embedded EL expressions.
        </para>
        
    <section>
        <title>Defining labels</title>
        <para>
            Seam provides a <literal>java.util.ResourceBundle</literal> (available 
            to the application as a <literal>org.jboss.seam.core.resourceBundle</literal>). 
            You'll need to make your internationalized labels available via this special 
            resource bundle. By default, the resource bundle used by Seam is named 
            <literal>messages</literal> and so you'll need to define your labels 
            in files named <literal>messages.properties</literal>, 
            <literal>messages_en.properties</literal>,
            <literal>messages_en_AU.properties</literal>, etc. These
            files usually belong in the <literal>WEB-INF/classes</literal> 
            directory.
        </para>
        
        <para>
            So, in <literal>messages_en.properties</literal>:
        </para>
        
        <programlisting><![CDATA[Hello=Hello]]></programlisting>

        <para>
            And in <literal>messages_en_AU.properties</literal>:
        </para>
        
        <programlisting><![CDATA[Hello=G'day]]></programlisting>
        
        <para>
            You can select a different name for the resource bundle by setting
            the Seam configuration property named
            <literal>org.jboss.seam.core.resourceLoader.bundleNames</literal>. You can even specify
            a list of resource bundle names to be searched (depth first) for
            messages.
        </para>

        <programlisting><![CDATA[<core:resource-loader>
    <core:bundle-names>
        <value>mycompany_messages</value>
        <value>standard_messages</value>       
    </core:bundle-names>
</core:resource-loader>]]></programlisting>

        <para>
            If you want to define a message just for a particular page, you
            can specify it in a resource bundle with the same name as the
            JSF view id, with the leading <literal>/</literal> and trailing
            file extension removed. So we could put our message in 
            <literal>welcome/hello_en.properties</literal> if we only needed
            to display the message on <literal>/welcome/hello.jsp</literal>.
        </para>
        
        <para>
            You can even specify an explicit bundle name in <literal>pages.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<page view-id="/welcome/hello.jsp" bundle="HelloMessages"/>]]></programlisting>
        
        <para>
            Then we could use messages defined in <literal>HelloMessages.properties</literal>
            on <literal>/welcome/hello.jsp</literal>.
        </para>
    </section>
    
    <section>
        <title>Displaying labels</title>

        <para>
            If you define your labels using the Seam resource bundle, you'll
            be able to use them without having to type <literal>&lt;f:loadBundle ... /&gt;</literal>
            on every page. Instead, you can simply type:
        </para>
        
        <programlisting><![CDATA[<h:outputText value="#{messages['Hello']}"/>]]></programlisting>
        
        <para>
            or:
        </para>
        
        <programlisting><![CDATA[<h:outputText value="#{messages.Hello}"/>]]></programlisting>
        
        <para>
            Even better, the messages themselves may contain EL expressions:
        </para>

        <programlisting><![CDATA[Hello=Hello, #{user.firstName} #{user.lastName}]]></programlisting>
        <programlisting><![CDATA[Hello=G'day, #{user.firstName}]]></programlisting>
        
        <para>
            You can even use the messages in your code:
        </para>

        <programlisting><![CDATA[@In private Map<String, String> messages;]]></programlisting>
        <programlisting><![CDATA[@In("#{messages['Hello']}") private String helloMessage;]]></programlisting>

    </section>
    
    <section>
        <title>Faces messages</title>
        <para>
            The <literal>facesMessages</literal> component is a super-convenient 
            way to display success or failure messages to the user. The functionality 
            we just described also works for faces messages:
        </para>

        <programlisting><![CDATA[@Name("hello")
@Stateless
public class HelloBean implements Hello {
    @In FacesMessages facesMessages;
    
    public String sayIt() {
        facesMessages.addFromResourceBundle("Hello");
    }
}]]></programlisting>

        <para>
            This will display <literal>Hello, Gavin King</literal> or <literal>G'day, Gavin</literal>,
            depending upon the user's locale.
        </para>

    </section>
    </section>
    
    <section>
        <title>Timezones</title>
        <para>
            There is also a session-scoped instance of <literal>java.util.Timezone</literal>,
            named <literal>org.jboss.seam.international.timezone</literal>, and a Seam component for changing 
            the timezone named <literal>org.jboss.seam.international.timezoneSelector</literal>. By default, 
            the timezone is the default timezone of the server. Unfortunately, the JSF specification 
            says that all dates and times should be assumed to be UTC, and displayed as UTC, unless 
            a timezone is explicitly specified using <literal>&lt;f:convertDateTime&gt;</literal>. 
            This is an extremely inconvenient default behavior.
        </para>
        <para>
            Seam overrides this behavior, and defaults all dates and times to the Seam timezone.
            In addition, Seam provides the <literal>&lt;s:convertDateTime&gt;</literal> tag which 
            always performs conversions in the Seam timezone.
        </para>
    </section>
    
    <section>
        <title>Themes</title>
        <para>
            Seam applications are also very easily skinnable. The theme API is very
            similar to the localization API, but of course these two concerns are
            orthogonal, and some applications support both localization and themes.
        </para>
        
        <para>
            First, configure the set of supported themes:
        </para>
        
        <programlisting><![CDATA[<theme:theme-selector cookie-enabled="true">
    <theme:available-themes>
        <value>default</value>
        <value>accessible</value>
        <value>printable</value>
    </theme:available-themes>
</theme:theme-selector>]]></programlisting>
       
       <para>
            Note that the first theme listed is the default theme.
       </para>

        <para>
            Themes are defined in a properties file with the same name as the theme.
            For example, the <literal>default</literal> theme is defined as a set of
            entries in <literal>default.properties</literal>. For example, 
            <literal>default.properties</literal> might define:
        </para>
        
<programlisting><![CDATA[css ../screen.css
template /template.xhtml]]></programlisting>

        <para>
            Usually the entries in a theme resource bundle will be paths to CSS styles
            or images and names of facelets templates (unlike localization resource
            bundles which are usually text).
        </para>
        
        <para>
            Now we can use these entries in our JSP or facelets pages. For example,
            to theme the stylesheet in a facelets page:
        </para>
        
        <programlisting><![CDATA[<link href="#{theme.css}" rel="stylesheet" type="text/css" />]]></programlisting>
        
        <para>Or, when the page definition resides in a subdirectory:</para>
        
        <programlisting><![CDATA[<link href="#{facesContext.externalContext.requestContextPath}#{theme.css}" 
    rel="stylesheet" type="text/css" />]]></programlisting>
        
        <para>
            Most powerfully, facelets lets us theme the template used by a <literal>&lt;ui:composition&gt;</literal>:
        </para>

        <programlisting><![CDATA[<ui:composition xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    template="#{theme.template}">]]></programlisting>
        
        <para>
            Just like the locale selector, there is a built-in theme selector to allow 
            the user to freely switch themes:
        </para>

        <programlisting><![CDATA[<h:selectOneMenu value="#{themeSelector.theme}">
    <f:selectItems value="#{themeSelector.themes}"/>
</h:selectOneMenu>
<h:commandButton action="#{themeSelector.select}" value="Select Theme"/>]]></programlisting>

    </section>
    
    <section>
        <title>Persisting locale and theme preferences via cookies</title>
        <para>
            The locale selector, theme selector and timezone selector all support 
            persistence of locale and theme preference to a cookie. Simply set the 
            <literal>cookie-enabled</literal> property in <literal>components.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<theme:theme-selector cookie-enabled="true">
    <theme:available-themes>
        <value>default</value>
        <value>accessible</value>
        <value>printable</value>
    </theme:available-themes>
</theme:theme-selector>

<international:locale-selector cookie-enabled="true"/>]]></programlisting>

    </section>
    
</chapter>
    <chapter id="text">
    <title>Seam Text</title>
    
    <para>
        Collaboration-oriented websites require a human-friendly markup language for easy entry
        of formatted text in forum posts, wiki pages, blogs, comments, etc. Seam provides the
        <literal>&lt;s:formattedText/&gt;</literal> control for display of formatted text that
        conforms to the <emphasis>Seam Text</emphasis> language. Seam Text is implemented using
        an ANTLR-based parser. You don't need to know anything about ANTLR to use it, however.
    </para>
    
    <section>
        <title>Basic fomatting</title>
        <para>
            Here is a simple example:
        </para>
        
        <programlisting><![CDATA[It's easy to make *emphasis*, |monospace|,
~deleted text~, super^scripts^ or _underlines_.]]></programlisting>
    
        <para>
            If we display this using <literal>&lt;s:formattedText/&gt;</literal>, we will get
            the following HTML produced:
        </para>
        
        <programlisting><![CDATA[<p>
It's easy to make <i>emphasis</i>, <tt>monospace</tt>
<del>deleted text</del>, super<sup>scripts</sup> or <u>underlines</u>.
</p>]]></programlisting>

        <para>
            We can use a blank line to indicate a new paragraph, and <literal>+</literal> to
            indicate a heading:
        </para>

        <programlisting><![CDATA[+This is a big heading
You /must/ have some text following a heading!
 
++This is a smaller heading
This is the first paragraph. We can split it across multiple 
lines, but we must end it with a blank line.

This is the second paragraph.]]></programlisting>

        <para>
            (Note that a simple newline is ignored, you need an additional blank line to wrap text into a new paragraph.)
           This is the HTML that results:
        </para>
    
        <programlisting><![CDATA[<h1>This is a big heading</h1>
<p>
You <i>must</i> have some text following a heading!
</p>
 
<h2>This is a smaller heading</h2>
<p>
This is the first paragraph. We can split it across multiple 
lines, but we must end it with a blank line.
</p>

<p>
This is the second paragraph.
</p>]]></programlisting>

        <para>
            Ordered lists are created using the <literal>#</literal> character. Unordered lists
            use the <literal>=</literal> character:
        </para>

        <programlisting><![CDATA[An ordered list:
        
#first item
#second item
#and even the /third/ item

An unordered list:

=an item
=another item]]></programlisting>

        <programlisting><![CDATA[<p>
An ordered list:
</p>
 
<ol>       
<li>first item</li>
<li>second item</li>
<li>and even the <i>third</i> item</li>
</ol>

<p>
An unordered list:
</p>

<ul>
<li>an item</li>
<li>another item</li>
</ul>]]></programlisting>
        
        <para>
            Quoted sections should be surrounded in double quotes:
        </para>

        <programlisting><![CDATA[The other guy said:
        
"Nyeah nyeah-nee 
/nyeah/ nyeah!"

But what do you think he means by "nyeah-nee"?]]></programlisting>
        
        <programlisting><![CDATA[<p>
The other guy said:
</p>
        
<q>Nyeah nyeah-nee
<i>nyeah</i> nyeah!</q>

<p>
But what do you think he means by <q>nyeah-nee</q>?
</p>]]></programlisting>

    </section>
    
    <section>
        <title>Entering code and text with special characters</title>
        <para>
            Special characters such as <literal>*</literal>, <literal>|</literal>
            and <literal>#</literal>, along with HTML characters such as
            <literal>&lt;</literal>, <literal>&gt;</literal> and <literal>&amp;</literal> 
            may be escaped using <literal>\</literal>:
        </para>
        
        <programlisting><![CDATA[You can write down equations like 2\*3\=6 and HTML tags
like \<body\> using the escape character: \\.]]></programlisting>
        
        <programlisting><![CDATA[<p>
You can write down equations like 2*3=6 and HTML tags
like &lt;body&gt; using the escape character: \.
</p>]]></programlisting>

        <para>
            And we can quote code blocks using backticks:
        </para>
        
        <programlisting><![CDATA[My code doesn't work:

`for (int i=0; i<100; i--)
{
    doSomething();
}`

Any ideas?]]></programlisting>

        <programlisting><![CDATA[<p>
My code doesn't work:
</p>

<pre>for (int i=0; i&lt;100; i--)
{
    doSomething();
}</pre>

<p>
Any ideas?
</p>]]></programlisting>

       <para>
          Note that inline monospace formatting always escapes (most monospace formatted text is in fact
          code or tags with many special characters). So you can, for example, write:
       </para>

       <programlisting><![CDATA[This is a |<tag attribute="value"/>| example.]]></programlisting>

       <para>
          without escaping any of the characters inside the monospace bars. The downside is that
          you can't format inline monospace text in any other way (italics, underscore, and so on).
       </para>

    </section>
    
    <section>
        <title>Links</title>
        
        <para>
            A link may be created using the following syntax:
        </para>

        <programlisting><![CDATA[Go to the Seam website at [=>http://jboss.com/products/seam].]]></programlisting>
        
        <para>
            Or, if you want to specify the text of the link:
        </para>

        <programlisting><![CDATA[Go to [the Seam website=>http://jboss.com/products/seam].]]></programlisting>
        
        <para>
            For advanced users, it is even possible to customize the Seam Text parser to understand
            wikiword links written using this syntax.
        </para>
        
    </section>
    
    <section>
        <title>Entering HTML</title>
        
        <para>
            Text may even include a certain limited subset of HTML (don't worry, the subset is chosen
            to be safe from cross-site scripting attacks). This is useful for creating links:
        </para>
        
        <programlisting><![CDATA[You might want to link to <a href="http://jboss.com/products/seam">something
cool</a>, or even include an image: <img src="/logo.jpg"/>]]></programlisting>
        
        <para>
           And for creating tables:
        </para>
        
        <programlisting><![CDATA[<table>
    <tr><td>First name:</td><td>Gavin</td></tr>
    <tr><td>Last name:</td><td>King</td></tr>
</table>]]></programlisting>

        <para>
            But you can do much more if you want!
        </para>
         
    </section>
    
</chapter>
    <chapter id="itext">
    <title>iText PDF generation</title>
    <para>Seam now includes a component set for generating documents using iText. The primary focus of Seam's iText
        document support is for the generation of PDF doucuments, but Seam also offers basic support for RTF document
        generation.</para>

    <section id="itext.intro">
        <title>Using PDF Support</title>
        <para>iText support is provided by <literal>jboss-seam-pdf.jar</literal>. This JAR contains the iText JSF
            controls, which are used to construct views that can render to PDF, and the DocumentStore component, which
            serves the rendered documents to the user. To include PDF support in your application, included
                <literal>jboss-seam-pdf.jar</literal> in your <literal>WEB-INF/lib</literal> directory along with the
            iText JAR file. There is no further configuration needed to use Seam's ciText supportfon. </para>
        <para> The Seam iText module requires the use of Facelets as the view technology. Future versions of the library
            may also support the use of JSP. Additionally, it requires the use of the seam-ui package.</para>

        <para> The <literal>examples/itext</literal> project contains an example of the PDF support in action. It
            demonstrates proper deployment packaging, and it contains a number examples that demonstrate the key PDF
            generation features current supported. </para>

        <section id="itext.document">
            <title>Creating a document</title>

            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>

                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:document&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para> Documents are generated by facelet XHTML files using tags in the
                                        <literal>http://jboss.com/products/seam/pdf</literal> namespace. Documents
                                    should always have the <literal>document</literal> tag at the root of the document.
                                    The <literal>document</literal> tag prepares Seam to generate a document into the
                                    DocumentStore and renders an HTML redirect to that stored content.</para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>

                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>type</literal> — The type of the document to be produced.
                                            Valid values are <literal>PDF</literal>, <literal>RTF</literal> and
                                                <literal>HTML</literal> modes. Seam defaults to PDF generation, and many
                                            of the features only work correctly when generating PDF documents.</para>
                                    </listitem>


                                    <listitem>
                                        <para>
                                            <literal>pageSize</literal> — The size of the page to be generate.
                                            The most commonly used values would be <literal>LETTER</literal> and
                                                <literal>A4</literal>. A full list of supported pages sizes can be found
                                            in <literal>com.lowagie.text.PageSize</literal> class. Alternatively,
                                            pageSize can provide the width and height of the page directly. The value
                                            "612 792", for example, is equivalent to the LETTER page size. </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>orientation</literal> — The orientation of the page.
                                            Valid values are <literal>portrait</literal> and
                                            <literal>landscape</literal>. In landscape mode, the height and width page
                                            size values are reversed. </para>
                                    </listitem>


                                    <listitem>
                                        <para>
                                            <literal>margins</literal> — The left, right, top and bottom
                                            margin values. </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>marginMirroring</literal> — Indicates that margin
                                            settings should be reversed an alternating pages.</para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>disposition</literal> — When generating PDFs in a web browser, this determines the HTTP
                                            <literal>Content-Disposition</literal> of the document.  Valid values are <literal>inline</literal>, which
                                            indicates the document should be displayed in the browser window if possible,
                                            and <literal>attachment</literal>, which indicates that the document should be treated as a download. 
                                            The default value is <literal>inline</literal>.</para>
                                    </listitem>
                                </itemizedlist>


                                <para>
                                    <emphasis>Metadata Attributes</emphasis>
                                </para>


                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>title</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>subject</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>keywords</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>author</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>creator</literal>
                                        </para>
                                    </listitem>
                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:document xmlns:p="http://jboss.com/products/seam/pdf"&gt;                                                      
  The document goes here.                                                                                             
&lt;/p:document&gt;</programlisting>


                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

        </section>


        <section id="itext.text">
            <title>Basic Text Elements</title>

            <para> Useful documents will need to contain more than just text; however, the standard UI components are
                geared towards HTML generation and are not useful for generating PDF content. Instead, Seam provides a
                special UI components for generating suitable PDF content. Tags like
                <literal>&lt;p:image&gt;</literal> and <literal>&lt;p:paragraph&gt;</literal> are the
                basic foundations of simple documents. Tags like <literal>&lt;p:font&gt;</literal> provide style
                information to all the content surrounging them. </para>


            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:paragraph&gt;</literal>
                                </para>
                            </entry>


                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para> Most uses of text should be sectioned into paragraphs so that text fragments can
                                    be flowed, formatted and styled in logical groups.</para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>

                                <itemizedlist>
                                    <listitem>
                                        <para>
                                            <literal>firstLineIndent</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>extraParagraphSpace</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>leading</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>multipliedLeading</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>spacingBefore</literal> — The blank space to be inserted
                                            before the element. </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>spacingAfter</literal> — The blank space to be inserted
                                            after the element.</para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>indentationLeft</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>indentationRight</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>keepTogether</literal>
                                        </para>
                                    </listitem>
                                </itemizedlist>

                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:paragraph alignment="justify"&gt;
    This is a simple document.  It isn't very fancy.
&lt;/p:paragraph&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>



            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:text&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>

                                <para> The <literal>text</literal> tag allows text fragments to be produced from
                                    application data using normal JSF converter mechanisms. It is very similar to the
                                        <literal>outputText</literal> tag used when rendering HTML documents. </para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>
                                    <listitem>
                                        <para><literal>value</literal> — The value to be displayed. This will
                                            typically be a value binding expression.</para>
                                    </listitem>
                                </itemizedlist>

                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>

                                <programlisting>&lt;p:paragraph&gt;
    The item costs &lt;p:text value="#{product.price}"&gt;
        &lt;f:convertNumber type="currency" currencySymbol="$"/&gt;
    &lt;/p:text&gt;
&lt;/p:paragraph&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>


            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:html&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>

                                <para> The <literal>html</literal> tag renders HTML content into the PDF.                                                                      
                                </para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>
                                    <listitem>
                                        <para><literal>value</literal> — The text to be displayed.</para>
                                    </listitem>
                                </itemizedlist>

                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>

                                <programlisting>
&lt;p:html value="This is HTML with &amp;lt;b&amp;gt;some markup&amp;lt;/b&amp;gt;." /&gt;
&lt;p:html&gt;
    &lt;h1&gt;This is more complex HTML&lt;/h1&gt;
    &lt;ul&gt;
        &lt;li&gt;one&lt;/li&gt;
        &lt;li&gt;two&lt;/li&gt;
        &lt;li&gt;three&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p:html&gt;

&lt;p:html&gt;
    &lt;s:formattedText value="*This* is |Seam Text| as HTML.  It's very^cool^." /&gt;
&lt;/p:html&gt;                                    
</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>


            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:font&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>

                                <para> The font tag defines the default font to be used for all text inside of it. </para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>
                                    <listitem>
                                        <para><literal>name</literal> — The font name, for example:
                                                <literal>COURIER</literal>, <literal>HELVETICA</literal>,
                                                <literal>TIMES-ROMAN</literal>, <literal>SYMBOL</literal> or
                                                <literal>ZAPFDINGBATS</literal>.</para>
                                    </listitem>

                                    <listitem>
                                        <para><literal>size</literal> — The point size of the font.</para>
                                    </listitem>

                                    <listitem>
                                        <para><literal>style</literal> — The font styles. Any combination of :
                                                <literal>NORMAL</literal>, <literal>BOLD</literal>,
                                            <literal>ITALIC</literal>, <literal>OBLIQUE</literal>,
                                            <literal>UNDERLINE</literal>, <literal>LINE-THROUGH</literal></para>

                                    </listitem>

                                    <listitem>
                                        <para><literal>encoding</literal> — The character set encoding.</para>
                                    </listitem>
                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>

                                <programlisting>&lt;p:font name="courier" style="bold" size="24"&gt;
    &lt;p:paragraph&gt;My Title&lt;/p:paragraph&gt;
&lt;/p:font&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>



            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:newPage&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>


                                <para><literal>p:newPage</literal> inserts a page break. </para>


                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>

                                <programlisting>&lt;p:newPage /&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>



            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:image&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>


                                <para><literal>p:image</literal> inserts an image into the document. Images can be be
                                    loaded from the classpath or from the web application context using the
                                        <literal>value</literal> attribute. </para>



                                <para>Resources can also be dynamically generated by application code. The
                                        <literal>imageData</literal> attribute can specify a value binding expression
                                    whose value is a <literal>java.awt.Image</literal> object. </para>




                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>

                                <itemizedlist>
                                    <listitem>
                                        <para><literal>value</literal> — A resource name or a method
                                            expression binding to an application-generated image. </para>
                                    </listitem>


                                    <listitem>
                                        <para><literal>rotation</literal> — The rotation of the image in
                                            degrees. </para>
                                    </listitem>


                                    <listitem>
                                        <para><literal>height</literal> — The height of the image. </para>
                                    </listitem>

                                    <listitem>
                                        <para><literal>width</literal> — The width of the image. </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>alignment</literal>— The alignment of the image. (see
                                                <xref linkend="itext.alignment"/> for possible values) </para>

                                    </listitem>
                                    <listitem>

                                        <para>
                                            <literal>alt</literal> — Alternative text representation for the
                                            image.</para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>indentationLeft</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>indentationRight</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>spacingBefore</literal> — The blank space to be inserted
                                            before the element.</para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>spacingAfter</literal> — The blank space to be inserted
                                            after the element.</para>

                                    </listitem>
                                    <listitem>

                                        <para>
                                            <literal>widthPercentage</literal>
                                        </para>

                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>initialRotation</literal>
                                        </para>
                                    </listitem>
                                    <listitem>

                                        <para>
                                            <literal>dpi</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>scalePercent</literal> — The scaling factor (as a
                                            percentage) to use for the image. This can be expressed as a single
                                            percentage value or as two percentage values representing separate x and y
                                            scaling percentages.</para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>wrap</literal>
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>underlying</literal>
                                        </para>
                                    </listitem>
                                </itemizedlist>

                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>


                                <programlisting>&lt;p:image value="/jboss.jpg" /&gt;</programlisting>
                                <programlisting>&lt;p:image value="#{images.chart}" /&gt;</programlisting>


                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:anchor&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para><literal>p:anchor</literal> defines clickable links from a document. It supports
                                    the following attributes:</para>


                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>
                                    <listitem>
                                        <para><literal>name</literal> — The name of an in-document anchor
                                            destination.</para>

                                    </listitem>

                                    <listitem>

                                        <para><literal>reference</literal> — The destination the link refers
                                            to. Links to other points in the document should begin with a "#". For
                                            example, "#link1" to refer to an anchor postion with a
                                            <literal>name</literal> of <literal>link1</literal>. Links may also be a
                                            full URL to point to a resource outside of the document.</para>
                                    </listitem>
                                </itemizedlist>


                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:listItem&gt;&lt;p:anchor reference="#reason1"&gt;Reason 1&lt;/p:anchor&gt;&lt;/p:listItem&gt; 
...
&lt;p:paragraph&gt;
    &lt;p:anchor name="reason1"&gt;It's the quickest way to get "rich"&lt;/p:anchor&gt; 
    ... 
&lt;/p:paragraph&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

        </section>

        <section id="itext.header">
            <title>Headers and Footers</title>



            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:header&gt;</literal>
                                </para>
                                <para>
                                    <literal>&lt;p:footer&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para>The <literal>p:header</literal> and <literal>p:footer</literal> components provide
                                    the ability to place header and footer text on each page of a generated document,
                                    with the exception of the first page. Header and footer declarations should appear
                                    near the top of a document. </para>


                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>


                                    <listitem>
                                        <para>
                                            <literal>alignment</literal> — The alignment of the header/footer
                                            box section. (see <xref linkend="itext.alignment"/> for alignment values)</para>

                                    </listitem>

                                    <listitem>
                                        <para><literal>backgroundColor</literal> — The background color of the
                                            header/footer box. (see <xref linkend="itext.colors"/> for color values)
                                        </para>
                                    </listitem>




                                    <listitem>
                                        <para><literal>borderColor</literal> — The border color of the
                                            header/footer box. Individual border sides can be set using
                                                <literal>borderColorLeft</literal>, <literal>borderColorRight</literal>,
                                                <literal>borderColorTop</literal> and
                                            <literal>borderColorBottom</literal>.(see <xref linkend="itext.colors"/> for
                                            color values) </para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>borderWidth</literal> — The width of the border.
                                            Inidvidual border sides can be specified using
                                            <literal>borderWidthLeft</literal>, <literal>borderWidthRight</literal>,
                                                <literal>borderWidthTop</literal> and
                                            <literal>borderWidthBottom</literal>.</para>
                                    </listitem>
                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:facet name="header"&gt;
  &lt;p:font size="12"&gt;
    &lt;p:footer borderWidthTop="1" borderColorTop="blue" 
              borderWidthBottom="0" alignment="center"&gt;
        Why Seam? [&lt;p:pageNumber /&gt;]
    &lt;/p:footer&gt;
  &lt;/p:font&gt;
&lt;/f:facet&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>



            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:pageNumber&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para>The current page number can be placed inside of a header or footer using the
                                        <literal>p:pageNumber</literal> tag. The page number tag can only be used in the
                                    context of a header or footer and can only be used once.</para>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:footer borderWidthTop="1" borderColorTop="blue" 
          borderWidthBottom="0" alignment="center"&gt;
    Why Seam? [&lt;p:pageNumber /&gt;]
&lt;/p:footer&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </section>




        <section id="itext.chapters">
            <title>Chapters and Sections</title>

            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:chapter&gt;</literal>
                                </para>
                                <para>
                                    <literal>&lt;p:section&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>

                                <para>If the generated document follows a book/article structure, the
                                    <literal>p:chapter</literal> and <literal>p:section</literal> tags can be used to
                                    provide the necessary structure. Sections can only be used inside of chapters, but
                                    they may be nested arbitrarily deep. Most PDF viewers provide easy navigation
                                    between chapters and sections in a document. </para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>


                                    <listitem>
                                        <para>
                                            <literal>alignment</literal> — The alignment of the header/footer
                                            box section. (see <xref linkend="itext.alignment"/> for alignment values)</para>

                                    </listitem>

                                    <listitem>
                                        <para><literal>number</literal> — The chapter number. Every chapter
                                            should be assigned a chapter number.</para>
                                    </listitem>

                                    <listitem>
                                        <para><literal>numberDepth</literal> — The depth of numbering for
                                            section. All sections are numbered relative to their surrounding
                                            chapter/sections. The fourth section of of the first section of chapter
                                            three would be section 3.1.4, if displayed at the default number depth of
                                            three. To omit the chapter number, a number depth of 2 should be used. In
                                            that case, the section number would be displayed as 1.4.</para>
                                    </listitem>
                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>

                                <programlisting>&lt;p:document xmlns:p="http://jboss.com/products/seam/pdf"
            title="Hello"&gt;

   &lt;p:chapter number="1"&gt;
      &lt;p:title&gt;&lt;p:paragraph&gt;Hello&lt;/p:paragraph&gt;&lt;/p:title&gt;
      &lt;p:paragraph&gt;Hello #{user.name}!&lt;/p:paragraph&gt;
   &lt;/p:chapter&gt;

   &lt;p:chapter number="2"&gt;
      &lt;p:title&gt;&lt;p:paragraph&gt;Goodbye&lt;/p:paragraph&gt;&lt;/p:title&gt;
      &lt;p:paragraph&gt;Goodbye #{user.name}.&lt;/p:paragraph&gt;
   &lt;/p:chapter&gt;

&lt;/p:document&gt; </programlisting>


                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>


            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:header&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>

                                <para>Any chapter or section can contain a <literal>p:title</literal>. The title will be
                                    displayed next to the chapter/section number. The body of the title may contain raw
                                    text or may be a <literal>p:paragraph</literal>. </para>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </section>


        <section id="itext.list">
            <title>Lists</title>

            <para>List structures can be displayed using the <literal>p:list</literal> and <literal>p:listItem</literal>
                tags. Lists may contain arbitrarily-nested sublists. List items may not be used outside of a list. he
                following document uses the <literal>ui:repeat</literal> tag to to display a list of values retrieved
                from a Seam component. </para>

            <programlisting>&lt;p:document xmlns:p="http://jboss.com/products/seam/pdf"
            xmlns:ui="http://java.sun.com/jsf/facelets"
            title="Hello"&gt;
   &lt;p:list style="numbered"&gt;
      &lt;ui:repeat value="#{documents}" var="doc"&gt;
         &lt;p:listItem&gt;#{doc.name}&lt;/p:listItem&gt;
      &lt;/ui:repeat&gt;
   &lt;/p:list&gt;
&lt;/p:document&gt;</programlisting>



            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:list&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <!-- 
                    <para>
                        <emphasis>Description</emphasis>
                    </para>
                    <para>...</para>
                    -->
                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>

                                <itemizedlist>

                                    <listitem>
                                        <para><literal>style</literal> — The ordering/bulleting style of list.
                                            One of: <literal>NUMBERED</literal>, <literal>LETTERED</literal>,
                                                <literal>GREEK</literal>, <literal>ROMAN</literal>,
                                                <literal>ZAPFDINGBATS</literal>, <literal>ZAPFDINGBATS_NUMBER</literal>.
                                            If no style is given, the list items are bulleted.</para>
                                    </listitem>
                                    <listitem>
                                        <para><literal>listSymbol</literal> — For bulleted lists, specifies
                                            the bullet symbol. </para>
                                    </listitem>

                                    <listitem>
                                        <para><literal>indent</literal> — The indentation level of the
                                        list.</para>
                                    </listitem>


                                    <listitem>
                                        <para><literal>lowerCase</literal> — For list styles using letters,
                                            indicates whether the letters should be lower case.</para>
                                    </listitem>


                                    <listitem>
                                        <para><literal>charNumber</literal> — For ZAPFDINGBATS, indicates the
                                            character code of the bullet character.</para>
                                    </listitem>


                                    <listitem>
                                        <para><literal>numberType</literal> — For ZAPFDINGBATS_NUMBER,
                                            indicates the numbering style.</para>
                                    </listitem>

                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:list style="numbered"&gt;
  &lt;ui:repeat value="#{documents}" var="doc"&gt;
    &lt;p:listItem&gt;#{doc.name}&lt;/p:listItem&gt;
  &lt;/ui:repeat&gt;
&lt;/p:list&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>


            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:listItem&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para><literal>p:listItem</literal> supports the following attributes:</para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>


                                    <listitem>
                                        <para>
                                            <literal>alignment</literal> — The alignment of the header/footer
                                            box section. (see <xref linkend="itext.alignment"/> for alignment values)</para>

                                    </listitem>

                                    <listitem>
                                        <para><literal>alignment</literal> — The alignment of the list item.
                                            (See <xref linkend="itext.alignment"/> for possible values)</para>
                                    </listitem>


                                    <listitem>
                                        <para><literal>indentationLeft</literal> — The left indentation
                                            amount.</para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>indentationRight</literal> — The right indentation
                                            amount.</para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>listSymbol</literal> — Overrides the default list
                                            symbol for this list item.</para>
                                    </listitem>


                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>...</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>




        </section>

        <section id="itext.tables">
            <title>Tables</title>

            <para>Table structures can be created using the <literal>p:table</literal> and <literal>p:cell</literal>
                tags. Unlike many table structures, there is no explicit row declaration. If a table has 3 columns, then
                every 3 cells will automatically form a row. Header and footer rows can be declared, and the headers and
                footers will be repeated in the event a table structure spans multiple pages.</para>




            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:table&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para><literal>p:table</literal> supports the following attributes.</para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>

                                <itemizedlist>


                                    <listitem>
                                        <para><literal>columns</literal> — The number of columns (cells) that
                                            make up a table row.</para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>widths</literal> — The relative widths of each column.
                                            There should be one value for each column. For example: widths="2 1 1" would
                                            indicate that there are 3 columns and the first column should be twice the
                                            size of the second and third column.</para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>headerRows</literal> — The initial number of rows which
                                            are considered to be headers or footer rows and should be repeated if the
                                            table spans multiple pages. </para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>footerRows</literal> — The number of rows that are
                                            considered to be footer rows. This value is subtracted from the
                                                <literal>headerRows</literal> value. If document has 2 rows which make
                                            up the header and one row that makes up the footer,
                                            <literal>headerRows</literal> should be set to 3 and
                                            <literal>footerRows</literal> should be set to 1</para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>widthPercentage</literal> — The percentage of the page
                                            width that the table spans.</para>
                                    </listitem>

                                    <listitem>
                                        <para><literal>horizontalAlignment</literal> — The horizontal
                                            alignment of the table. (See <xref linkend="itext.alignment"/> for possible
                                            values)</para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>skipFirstHeader</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>runDirection</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>lockedWidth</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>splitRows</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>spacingBefore</literal> — The blank space to be
                                            inserted before the element.</para>
                                    </listitem>


                                    <listitem>
                                        <para><literal>spacingAfter</literal> — The blank space to be inserted
                                            after the element.</para>
                                    </listitem>
                                    <listitem>
                                        <para>
                                            <literal>extendLastRow</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>headersInEvent</literal>
                                        </para>
                                    </listitem>


                                    <listitem>
                                        <para>
                                            <literal>splitLate</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>keepTogether</literal>
                                        </para>
                                    </listitem>

                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:table columns="3" headerRows="1"&gt;
  &lt;p:cell&gt;name&lt;/p:cell&gt;
  &lt;p:cell&gt;owner&lt;/p:cell&gt;
  &lt;p:cell&gt;size&lt;/p:cell&gt;
  &lt;ui:repeat value="#{documents}" var="doc"&gt;
    &lt;p:cell&gt;#{doc.name}&lt;/p:cell&gt;
    &lt;p:cell&gt;#{doc.user.name}&lt;/p:cell&gt;
    &lt;p:cell&gt;#{doc.size}&lt;/p:cell&gt;
  &lt;/ui:repeat&gt;
&lt;/p:table&gt;</programlisting>


                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

            <informaltable>
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="1*"/>
                    <colspec colnum="2" colwidth="3*"/>

                    <tbody>
                        <row>
                            <entry valign="top">
                                <para>
                                    <literal>&lt;p:cell&gt;</literal>
                                </para>
                            </entry>
                            <entry valign="top">
                                <para>
                                    <emphasis>Description</emphasis>
                                </para>
                                <para><literal>p:cell</literal> supports the following attributes.</para>

                                <para>
                                    <emphasis>Attributes</emphasis>
                                </para>


                                <itemizedlist>

                                    <listitem>
                                        <para>
                                            <literal>colspan</literal> — Cells can span more than one column
                                            by declaring a <literal>colspan</literal> greater than 1. Tables do not have
                                            the ability to span across multiple rows. </para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>horizontalAlignment</literal> — The horizontal
                                            alignment of the cell. (see <xref linkend="itext.alignment"/> for possible
                                            values)</para>
                                    </listitem>



                                    <listitem>
                                        <para><literal>verticalAlignment</literal> — The vertical alignment of
                                            the cell. (see <xref linkend="itext.alignment"/> for possible values)</para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>padding</literal> — Padding on a given side can also be
                                            specified using <literal>paddingLeft</literal>,
                                            <literal>paddingRight</literal>, <literal>paddingTop</literal> and
                                                <literal>paddingBottom</literal>.</para>
                                    </listitem>


                                    <listitem>
                                        <para>
                                            <literal>useBorderPadding</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>leading</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>multipliedLeading</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>indent</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>verticalAlignment</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>extraParagraphSpace</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>fixedHeight</literal>
                                        </para>
                                    </listitem>


                                    <listitem>
                                        <para>
                                            <literal>noWrap</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>minimumHeight</literal>
                                        </para>
                                    </listitem>


                                    <listitem>
                                        <para>
                                            <literal>followingIndent</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>rightIndent</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>spaceCharRatio</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>runDirection</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>arabicOptions</literal>
                                        </para>
                                    </listitem>


                                    <listitem>
                                        <para>
                                            <literal>useAscender</literal>
                                        </para>
                                    </listitem>



                                    <listitem>
                                        <para>
                                            <literal>grayFill</literal>
                                        </para>
                                    </listitem>

                                    <listitem>
                                        <para>
                                            <literal>rotation</literal>
                                        </para>
                                    </listitem>

                                </itemizedlist>
                                <para>
                                    <emphasis>Usage</emphasis>
                                </para>
                                <programlisting>&lt;p:cell&gt;...&lt;/p:cell&gt;</programlisting>

                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>


        </section>

        <section id="itext.constant">
            <title>Document Constants</title>

            <para>This section documents some of the constants shared by attributes on multiple tags. </para>

            <section id="itext.colors">
                <title>Color Values</title>
                <para>Seam documents do not yet support a full color specification. Currently, only named colors are
                    supported. They are: <literal>white</literal>, <literal>gray</literal>,
                    <literal>lightgray</literal>, <literal>darkgray</literal>, <literal>black</literal>,
                    <literal>red</literal>, <literal>pink</literal>, <literal>yellow</literal>,
                    <literal>green</literal>, <literal>magenta</literal>, <literal>cyan</literal> and
                    <literal>blue</literal>. </para>

            </section>

            <section id="itext.alignment">
                <title>Alignment Values</title>
                <para> Where alignment values are used, the Seam PDF supports the following horizontal alignment values:
                        <literal>left</literal>, <literal>right</literal>, <literal>center</literal>,
                    <literal>justify</literal> and <literal>justifyall</literal>. The vertical alignment values are
                        <literal>top</literal>, <literal>middle</literal>, <literal>bottom</literal>, and
                        <literal>baseline</literal>.</para>
            </section>

        </section>

        <section id="itext.configuration">
            <title>Configuring iText</title>

            <para>Document generation works out of the box with no additional configuration needed. However, there are a
                few points of configuration that are needed for more serious applications. </para>

            <para> The default implementation serves PDF documents from a generic URL,
                <literal>/seam-doc.seam</literal>. Many browsers (and users) would prefer to see URLs that contain the
                actual PDF name like <literal>/myDocument.pdf</literal>. This capability requires some configuration. To
                serve PDF files, all *.pdf resources should be mapped to the DocumentStoreServlet:</para>

            <programlisting>
&lt;servlet&gt;
    &lt;servlet-name&gt;Document Store Servlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.jboss.seam.pdf.DocumentStoreServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;Document Store Servlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.pdf&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</programlisting>

            <para> The <literal>use-extensions</literal> option on the document store component completes the
                functionality by instructing the document store to generate URLs with the correct filename extension for
                the document type being generated. </para>

            <programlisting>&lt;components xmlns="http://jboss.com/products/seam/components"
            xmlns:pdf="http://jboss.com/products/seam/pdf"&gt;
    &lt;pdf:document-store use-extensions="true" /&gt;
&lt;/components&gt;</programlisting>

            <para> Generated documents are stored in conversation scope and will expire when the conversation ends. At
                that point, references to the document will be invalid. To You can specify a default view to be shown
                when a document does not exist using the <literal>error-page</literal> property of the documentStore. </para>
            <programlisting>&lt;pdf:document-store use-extensions="true" error-page="/pdfMissing.seam" /&gt;</programlisting>
        </section>
    </section>


    <section id="itext.charting">
        <title>Charting</title>

        <para> Charting support is also provided with <literal>jboss-seam-pdf.jar</literal>. Charts can be used in PDF
            documents or can be used as images in an HTML page. Charting requires the JFreeChart library
                (<literal>jfreechart.jar</literal> and <literal>jcommon.jar</literal>) to be added to the
                <literal>WEB-INF/lib</literal> directory. Three types of charts are currently supported: pie charts, bar
            charts and line charts. </para>

        <informaltable id="itext.barchart">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:barchart&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>Displays a bar chart.</para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <literal>borderVisible</literal> — Controls whether or not a border is
                                        displayed around the entire chart. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>borderPaint</literal> — The color of the border, if visible;
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>borderBackgroundPaint</literal> — The default background
                                        color of the chart. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>borderStroke</literal> — </para>
                                </listitem>


                                <listitem>
                                    <para>
                                        <literal>domainAxisLabel</literal> — The text label for the domain
                                        axis. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>domainAxisPaint</literal> — The color of the domain axis
                                        label. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>domainGridlinesVisible</literal>— Controls whether or not
                                        gridlines for the domain axis are shown on the chart. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>domainGridlinePaint</literal>— The color of the domain
                                        gridlines, if visible. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>domainGridlineStroke</literal> — The stroke style of the
                                        domain gridleines, if visible. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>height</literal> — The height of the chart. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>width</literal> — The width of the chart. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>is3D</literal> — A boolean value indicating that the chart
                                        should be rendered in 3D instead of 2D. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>legend</literal> — A boolean value indicating whether or not
                                        the chart should include a legend. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>legendItemPaint</literal>— The default color of the text
                                        labels in the legend. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>legendItemBackgoundPaint</literal>— The background color for
                                        the legend, if different from the chart background color.</para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>orientation</literal> — The orientation of the plot, either
                                            <code>vertical</code> (the default) or <code>horizontal</code>. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotBackgroundPaint</literal>— The color of the plot
                                        background.</para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotBackgroundAlpha</literal>— The alpha (transparency) level
                                        of the plot background. It should be a number between 0 (completely transparent)
                                        and 1 (completely opaque). </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotForegroundAlpha</literal>— The alpha (transparency) level
                                        of the plot. It should be a number between 0 (completely transparent) and 1
                                        (completely opaque). </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotOutlinePaint</literal>— The color of the range gridlines,
                                        if visible. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>plotOutlineStroke</literal> — The stroke style of the range
                                        gridleines, if visible. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>rangeAxisLabel</literal> — The text label for the range axis.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>rangeAxisPaint</literal> — The color of the range axis label.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>rangeGridlinesVisible</literal>— Controls whether or not
                                        gridlines for the range axis are shown on the chart. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>rangeGridlinePaint</literal>— The color of the range
                                        gridlines, if visible. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>rangeGridlineStroke</literal> — The stroke style of the range
                                        gridleines, if visible. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>title</literal> — The chart title text. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>titlePaint</literal>— The color of the chart title text.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>titleBackgroundPaint</literal>— The background color around
                                        the chart title.</para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>width</literal> — The width of the chart. </para>
                                </listitem>

                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>
&lt;p:barchart title="Bar Chart" legend="true"
            width="500" height="500"&gt;
    &lt;p:series key="Last Year"&gt;
        &lt;p:data columnKey="Joe" value="100" /&gt;
        &lt;p:data columnKey="Bob" value="120" /&gt;
    &lt;/p:series&gt;        &lt;p:series key="This Year"&gt;
        &lt;p:data columnKey="Joe" value="125" /&gt;
        &lt;p:data columnKey="Bob" value="115" /&gt;
    &lt;/p:series&gt;
&lt;/p:barchart&gt;                                
                            </programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>


        <informaltable id="itext.linechart">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:linechart&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>Displays a line chart.</para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <literal>borderVisible</literal> — Controls whether or not a border is
                                        displayed around the entire chart. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>borderPaint</literal> — The color of the border, if visible;
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>borderBackgroundPaint</literal> — The default background
                                        color of the chart. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>borderStroke</literal> — </para>
                                </listitem>


                                <listitem>
                                    <para>
                                        <literal>domainAxisLabel</literal> — The text label for the domain
                                        axis. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>domainAxisPaint</literal> — The color of the domain axis
                                        label. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>domainGridlinesVisible</literal>— Controls whether or not
                                        gridlines for the domain axis are shown on the chart. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>domainGridlinePaint</literal>— The color of the domain
                                        gridlines, if visible. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>domainGridlineStroke</literal> — The stroke style of the
                                        domain gridleines, if visible. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>height</literal> — The height of the chart. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>width</literal> — The width of the chart. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>is3D</literal> — A boolean value indicating that the chart
                                        should be rendered in 3D instead of 2D. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>legend</literal> — A boolean value indicating whether or not
                                        the chart should include a legend. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>legendItemPaint</literal>— The default color of the text
                                        labels in the legend. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>legendItemBackgoundPaint</literal>— The background color for
                                        the legend, if different from the chart background color.</para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>orientation</literal> — The orientation of the plot, either
                                            <code>vertical</code> (the default) or <code>horizontal</code>. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotBackgroundPaint</literal>— The color of the plot
                                        background.</para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotBackgroundAlpha</literal>— The alpha (transparency) level
                                        of the plot background. It should be a number between 0 (completely transparent)
                                        and 1 (completely opaque). </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotForegroundAlpha</literal>— The alpha (transparency) level
                                        of the plot. It should be a number between 0 (completely transparent) and 1
                                        (completely opaque). </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>plotOutlinePaint</literal>— The color of the range gridlines,
                                        if visible. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>plotOutlineStroke</literal> — The stroke style of the range
                                        gridleines, if visible. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>rangeAxisLabel</literal> — The text label for the range axis.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>rangeAxisPaint</literal> — The color of the range axis label.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>rangeGridlinesVisible</literal>— Controls whether or not
                                        gridlines for the range axis are shown on the chart. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>rangeGridlinePaint</literal>— The color of the range
                                        gridlines, if visible. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>rangeGridlineStroke</literal> — The stroke style of the range
                                        gridleines, if visible. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>title</literal> — The chart title text. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>titlePaint</literal>— The color of the chart title text.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>titleBackgroundPaint</literal>— The background color around
                                        the chart title.</para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>width</literal> — The width of the chart. </para>
                                </listitem>

                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>&lt;p:linechart title="Line Chart"
            width="500" height="500"&gt;
    &lt;p:series key="Prices"&gt;
        &lt;p:data columnKey="2003" value="7.36" /&gt;
        &lt;p:data columnKey="2004" value="11.50" /&gt;
        &lt;p:data columnKey="2005" value="34.625" /&gt;
        &lt;p:data columnKey="2006" value="76.30" /&gt;
        &lt;p:data columnKey="2007" value="85.05" /&gt;
    &lt;/p:series&gt;
&lt;/p:linechart&gt;</programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>

        <informaltable id="itext.piechart">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:piechart&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>Displays a pie chart.</para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>

                                <listitem>
                                    <para>
                                        <literal>title</literal>— The chart title text. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>label</literal>— The default label text for pie sections.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>legend</literal>— A boolean value indicating whether or not
                                        the chart should include a legend. Default value is true </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>is3D</literal>—A boolean value indicating that the chart
                                        should be rendered in 3D instead of 2D. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelLinkMargin</literal>— The link margin for labels.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelLinkPaint</literal>— The paint used for the label
                                        linking lines. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelLinkStroke</literal>— he stroke used for the label
                                        linking lines. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>labelLinksVisible</literal>— A flag that controls whether or
                                        not the label links are drawn. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelOutlinePaint</literal>— The paint used to draw the
                                        outline of the section labels. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelOutlineStroke</literal>— The stroke used to draw the
                                        outline of the section labels. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelShadowPaint</literal>— The paint used to draw the shadow
                                        for the section labels. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelPaint</literal>— The color used to draw the section
                                        labels </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelGap</literal>— The gap between the labels and the plot
                                        as a percentage of the plot width. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>labelBackgroundPaint</literal>— The color used to draw the
                                        background of the section labels. If this is null, the background is not filled.
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>startAngle</literal>— The starting angle of the first
                                        section. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>circular</literal>— A boolean value indicating that the chart
                                        should be drawn as a circle. If false, the chart is drawn as an ellipse. The
                                        default is true. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>direction</literal>— The direction the pie section are drawn.
                                        One of: <literal>clockwise</literal> or <literal>anticlockwise</literal>. The
                                        default is <literal>clockwise</literal>. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>sectionOutlinePaint</literal>— The outline paint for all
                                        sections. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>sectionOutlineStroke</literal>— The outline stroke for all
                                        sections </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>sectionOutlinesVisible</literal>— Indicates whether an
                                        outline is drawn for each section in the plot. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>baseSectionOutlinePaint</literal>— The base section outline
                                        paint. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>baseSectionPaint</literal>— The base section paint. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>baseSectionOutlineStroke</literal>— The base section outline
                                        stroke. </para>
                                </listitem>
                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>
                                
&lt;p:piechart title="Pie Chart" circular="false" direction="anticlockwise" 
    startAngle="30" labelGap="0.1" labelLinkPaint="red"&gt;	
    &lt;p:series key="Prices"&gt; 
        &lt;p:data key="2003" columnKey="2003" value="7.36" /&gt; 
        &lt;p:data key="2004" columnKey="2004" value="11.50" /&gt; 
        &lt;p:data key="2005" columnKey="2005" value="34.625" /&gt; 
        &lt;p:data key="2006" columnKey="2006" value="76.30" /&gt; 
        &lt;p:data key="2007" columnKey="2007" value="85.05" /&gt; 
    &lt;/p:series&gt; 
&lt;/p:piechart&gt;	                                
                                
                            </programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>


        <informaltable id="itext.series">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:series&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>Category data can be broken down into series. The series tag is used to categorize a
                                set of data with a series and apply styling to the entire series. </para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>

                                <listitem>
                                    <para>
                                        <literal>key</literal> — The series name. </para>
                                </listitem>
                                <!--
                                <listitem>
                                    <para>
                                        <literal>seriesFillPaint</literal>  &#8212; 
                                    </para>
                                </listitem>
                                -->
                                <listitem>
                                    <para>
                                        <literal>seriesPaint</literal> — The color of each item in the series
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>seriesOutlinePaint</literal> — The outline color for each
                                        item in the series. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>seriesOutlineStroke</literal> — The stroke used to draw each
                                        item in the series. </para>
                                </listitem>
                                <!--
                                <listitem>
                                    <para>
                                        <literal>seriesStroke</literal>
                                    </para>
                                </listitem>
                                -->
                                <listitem>
                                    <para>
                                        <literal>seriesVisible</literal> — A boolean indicating if the series
                                        should be displayed. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>seriesVisibleInLegend</literal> — A boolean indiciating if
                                        the series should be listed in the legend. </para>
                                </listitem>

                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>&lt;p:series key="data1"&gt;
    &lt;ui:repeat value="#{data.pieData1}" var="item"&gt;
        &lt;p:data columnKey="#{item.name}" value="#{item.value}" /&gt;
    &lt;/ui:repeat&gt;
&lt;/p:series&gt;</programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>

        <informaltable id="itext.chartdata">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:data&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>The data tag describes each data point to be displayed in the graph.</para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <literal>key</literal> — The name of the data item. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>series</literal> — The series name, when not embedded inside
                                        a <code>&lt;p:series&gt;</code>. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>value</literal> — The numeric data value. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>explodedPercent</literal> — For pie charts, indicates how
                                        exploded a from the pie a piece is. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>sectionOutlinePaint</literal> — For bar charts, the color of
                                        the section outline.</para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>sectionOutlineStroke</literal> — For bar charts, the stroke
                                        type for the section outline.</para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>sectionPaint</literal> — For bar charts, the color of the
                                        section.</para>
                                </listitem>
                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>



                            <programlisting>&lt;p:data key="foo" value="20" sectionPaint="#111111" 
        explodedPercent=".2" /&gt;
&lt;p:data key="bar" value="30" sectionPaint="#333333" /&gt;
&lt;p:data key="baz" value="40" sectionPaint="#555555" 
        sectionOutlineStroke="my-dot-style" /&gt;</programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>



        <informaltable id="itext.color">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:color&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>The color component declares a color or gradient than can be referenced when drawing
                                filled shapes. </para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>

                                <listitem>
                                    <para>
                                        <literal>color</literal> — The color value. For gradient colors, this
                                        the starting color. <xref linkend="itext.colors"/>
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>color2</literal> — For gradient colors, this is the color
                                        that ends the gradient. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>point</literal> — The co-ordinates where the gradient color
                                        begins. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>point2</literal> — The co-ordinates where the gradient color
                                        ends. </para>
                                </listitem>
                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>&lt;p:color id="foo" color="#0ff00f"/&gt;
&lt;p:color id="bar" color="#ff00ff" color2="#00ff00" 
                  point="50 50" point2="300 300"/&gt;  </programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>


        <informaltable id="itext.stroke">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:stroke&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>Describes a stroke used to draw lines in a chart.</para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>

                                <listitem>
                                    <para>
                                        <literal>width</literal> — The width of the stroke. </para>
                                </listitem>

                                <listitem>
                                    <para><literal>cap</literal> — The line cap type. Valid values are
                                            <literal>butt</literal>, <literal>round</literal> and
                                        <literal>square</literal></para>
                                </listitem>

                                <listitem>
                                    <para><literal>join</literal> — The line join type. Valid values are
                                            <literal>miter</literal>, <literal>round</literal> and
                                        <literal>bevel</literal></para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>miterLimit</literal> — For miter joins, this value is the
                                        limit of the size of the join. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>dash</literal> — The dash value sets the dash pattern to be
                                        used to draw the line. The space separated integers indicate the length of each
                                        alternating drawn and undrawn segments. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>dashPhase</literal> — The dash phase indicates the offset
                                        into the dash pattern that the the line should be drawn with. </para>
                                </listitem>
                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>&lt;p:stroke id="dot2" width="2" cap="round" join="bevel" dash="2 3" /&gt;                            </programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>


    </section>

    <section id="itext.barcodes">
        <title>Bar codes</title>
        <para>Seam can use iText to generate barcodes in a wide variety of formats.  These barcodes can
        be embedded in a PDF document or displayed as an image on a web page. Note that 
        when used with HTML images, barcodes can not currently display barcode text in the barcode. 
        </para>

        <informaltable id="itext.barcode">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:barCode&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>
                            </para>
                            <para>Displays a barcode image.</para>

                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>

                                <listitem>
                                    <para>
                                        <literal>type</literal> — A barcode type supported by iText. Valid
                                        values include: <literal>EAN13</literal>, <literal>EAN8</literal>,
                                        <literal>UPCA</literal>, <literal>UPCE</literal>, <literal>SUPP2</literal>,
                                            <literal>SUPP5</literal>, <literal>POSTNET</literal>,
                                        <literal>PLANET</literal>, <literal>CODE128</literal>,
                                        <literal>CODE128_UCC</literal>, <literal>CODE128_RAW</literal> and
                                            <literal>CODABAR</literal>. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>code</literal>— The value to be encoded by the barcode.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>xpos</literal>— For PDFs, the absolute y position of the
                                        barcode on the page. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>ypos</literal>— For PDFs, the absolute y position of the
                                        barcode on the page. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>rotDegrees</literal> — For PDFs, the rotation factor of the
                                        barcode in degrees. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>barHeight</literal> — The height of the bars in the barCode
                                    </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>minBarWidth</literal> — The minimum bar width. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>barMultiplier</literal> — The bar multiplier for wide bars or
                                        the distance between bars for <literal>POSTNET</literal> and
                                        <literal>PLANET</literal> code. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>barColor</literal> — The color to draw the bars. </para>
                                </listitem>

                                <listitem>
                                    <para>
                                        <literal>textColor</literal> — The color of any text on the barcode.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>textSize</literal> — The size of the barcode text, if any.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>altText</literal> — The <literal>alt</literal> text for HTML image links.
                                    </para>
                                </listitem>                                                                


                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>
&lt;p:barCode type="code128" 
           barHeight="80" 
           textSize="20" 
           code="(10)45566(17)040301" 
           codeType="code128_ucc" 
           altText="My BarCode" /&gt;</programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </section>


    <section id="itext.swingcomponents">
        <title>Rendering Swing/AWT components</title>
        <para>Seam now provides experimental support for rendering Swing components to into a PDF
        image.  Some Swing look and feels supports, notably ones that use native widgets, will not
        render correctly.
        </para>

        <informaltable id="itext.swing">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*"/>
                <colspec colnum="2" colwidth="3*"/>

                <tbody>
                    <row>
                        <entry valign="top">
                            <para>
                                <literal>&lt;p:swing&gt;</literal>
                            </para>
                        </entry>
                        <entry valign="top">
                            <para>
                                <emphasis>Description</emphasis>  
                            </para>
                            
                            <para>Renders a Swing component into a PDF document.</para>
                            <para>
                                <emphasis>Attributes</emphasis>
                            </para>

                            <itemizedlist>

                                <listitem>
                                    <para>
                                        <literal>width</literal> — The width of the component to be rendered. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>height</literal> — ..The height of the component to be rendered. </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <literal>component</literal> — An expression whose value is a Swing or AWT component. </para>
                                </listitem>                                

                            </itemizedlist>
                            <para>
                                <emphasis>Usage</emphasis>
                            </para>
                            <programlisting>
&lt;p:swing width="310" height="120" component="#{aButton}" /&gt;
                            </programlisting>

                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </section>


    <section id="itext.links">
        <title>Further documentation</title>

        <para>For further information on iText, see:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        <ulink url="http://www.lowagie.com/iText/">iText Home Page</ulink>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <ulink url="http://www.manning.com/lowagie/">iText in Action</ulink>
                    </para>
                </listitem>
            </itemizedlist>

        </para>
    </section>
</chapter>
    <chapter id="mail">
  <title>Email</title>
  <para>
    Seam now includes an optional components for templating and sending emails.
  </para>

  <para>
    Email support is provided by <literal>jboss-seam-mail.jar</literal>. This 
    JAR contains the mail JSF controls, which are used to construct emails,
    and the <literal>mailSession</literal> manager component. 
  </para>

  <para>
    The examples/mail project contains an example of the email support in 
    action. It demonstrates proper packaging, and it contains a number of 
    example that demonstrate the key features currently supported. 
  </para>
  
  <para>
    You can also test your mail's using Seam's integration testing environment.
    See <xref linkend="testing.mail"/>.
  </para>
    
  <section>
    <title>Creating a message</title>
    	
    <para>
      You don't need to learn a whole new templating language to use Seam Mail 
      — an email is just facelet!
    </para>
    	
    <programlisting><![CDATA[<m:message xmlns="http://www.w3.org/1999/xhtml"
    xmlns:m="http://jboss.com/products/seam/mail"
    xmlns:h="http://java.sun.com/jsf/html">
  
    <m:from name="Peter" address="peter@example.com" />
    <m:to name="#{person.firstname} #{person.lastname}">#{person.address}</m:to>
    <m:subject>Try out Seam!</m:subject>
    
    <m:body>
        <p><h:outputText value="Dear #{person.firstname}" />,</p>
        <p>You can try out Seam by visiting 
        <a href="http://labs.jboss.com/jbossseam">http://labs.jboss.com/jbossseam</a>.</p>
        <p>Regards,</p>
        <p>Pete</p>
    </m:body>
    
</m:message>]]></programlisting>
    	
    <para>
      The <literal>&lt;m:message&gt;</literal> tag wraps the whole message, 
      and tells Seam to start rendering an email.  Inside the <literal>&lt;m:message&gt;</literal>
      tag we use an <literal>&lt;m:from&gt;</literal> tag to set who the 
      message is from, a <literal>&lt;m:to&gt;</literal> tag to	specify a 
      sender (notice how we use EL as we would in a normal facelet), and a 
      <literal>&lt;m:subject&gt;</literal> tag.
    </para>
    	
    <para>
      The <literal>&lt;m:body&gt;</literal> tag wraps the body of the email. 
      You can use regular HTML tags inside the body as well as JSF components.
    </para>
    	
    <para>
      So, now you have your email template, how do you go about sending it? 
      Well, at the end of rendering the <literal>m:message</literal> the 
      <literal>mailSession</literal> is called to send the email, so all you 
      have to do is ask Seam to render the view:
    </para>
    	
    <programlisting><![CDATA[@In(create=true)
private Renderer renderer;
   
public void send() {
    try {
       renderer.render("/simple.xhtml");
       facesMessages.add("Email sent successfully");
   } 
   catch (Exception e) {
       facesMessages.add("Email sending failed: " + e.getMessage());
   }
}]]></programlisting>
    	
   	<para>
      If, for example, you entered an invalid email address, then an exception 
      would be thrown, which is caught and then displayed to the user.
    </para>
   	
   	<section>
   	  <title>Attachments</title>
   	  <para>
        Seam makes it easy to attach files to an email.  It supports most of 
        the standard java types used when working with files.
      </para>
   		
   	  <para>
        If you wanted to email the <literal>jboss-seam-mail.jar</literal>:
      </para>
   		
   	  <programlisting><![CDATA[<m:attachment value="/WEB-INF/lib/jboss-seam-mail.jar"/>]]></programlisting>
   		    	
   	  <para>
        Seam will load the file from the classpath, and attach it to the email.
        By default it would be attached as <literal>jboss-seam-mail.jar</literal>;
   		if you wanted it to have another name you would just add the <literal>fileName</literal> attribute:
      </para>
   		
   	  <programlisting><![CDATA[<m:attachment value="/WEB-INF/lib/jboss-seam-mail.jar" fileName="this-is-so-cool.jar"/>]]></programlisting>
   		
   	  <para>
        You could also attach a <literal>java.io.File</literal>, a <literal>java.net.URL</literal>:
      </para>
   		
   	  <programlisting><![CDATA[<m:attachment value="#{numbers}"/>]]></programlisting>
   		
   	  <para>
        Or a <literal>byte[]</literal> or a <literal>java.io.InputStream</literal>:
      </para>
   		
   	  <programlisting><![CDATA[<m:attachment value="#{person.photo}" contentType="image/png"/>]]></programlisting>
   		
   	  <para>
        You'll notice that for a <literal>byte[]</literal> and a <literal>java.io.InputStream</literal>
        you need to specify the MIME type of the attachment (as that 
        information is not carried as part of the file).
      </para>
   		
   	  <para>
        And it gets even better, you can attach a Seam generated PDF, or any 
        standard JSF view, just by wrapping a <literal>&lt;m:attachment&gt;</literal> 
        around the normal tags you would use:
      </para>
   		
   	  <programlisting><![CDATA[<m:attachment fileName="tiny.pdf">
    <p:document>                                                      
        A very tiny PDF                                                                                                
    </p:document>
</m:attachment>]]></programlisting>

	  <para>
        If you had a set of files you wanted to attach (for example a set of 
        pictures loaded from a database) you can just use a <literal>&lt;ui:repeat&gt;</literal>:
      </para>
		
	  <programlisting><![CDATA[<ui:repeat value="#{people}" var="person">
    <m:attachment value="#{person.photo}" contentType="image/jpeg" fileName="#{person.firstname}_#{person.lastname}.jpg"/>
</ui:repeat>]]></programlisting>
   		
      <para>
        And if you want to display an attached image inline:
      </para>

      <programlisting><![CDATA[<m:attachment 
    value="#{person.photo}" 
    contentType="image/jpeg" 
    fileName="#{person.firstname}_#{person.lastname}.jpg" 
    status="personPhoto" 
    disposition="inline" />
<img src="cid:#{personPhoto.contentId}" />]]></programlisting>

      <para>
        You may be wondering what <literal>cid:#{...}</literal> does. Well, the
        IETF specified that by putting this as the src for your image, the 
        attachments will be looked at when trying to locate the image (the 
        <literal>Content-ID</literal>'s must match) — magic!
      </para>
          
      <para>
        You must declare the attachment before trying to access the status object.
      </para>
      
    </section>
    
	<section>
	  <title>HTML/Text alternative part</title>
	    	
	  <para>
        Whilst most mail readers nowadays support HTML, some don't, so you can 
        add a plain text alternative to your email body:
      </para>
	    	 
	  <programlisting><![CDATA[<m:body>
    <f:facet name="alternative">Sorry, your email reader can't show our fancy email, 
please go to http://labs.jboss.com/jbossseam to explore Seam.</f:facet>
</m:body>]]></programlisting>

	</section>
	    
	<section>
	  <title>Multiple recipients</title>
	    	
	  <para>
        Often you'll want to send an email to a group of recipients (for 
        example your users).  All of the recipient mail tags can be placed 
        inside a <literal>&lt;ui:repeat&gt;</literal>:
      </para>
	    	 
	  <programlisting><![CDATA[<ui:repeat value="#{allUsers} var="user">
    <m:to name="#{user.firstname} #{user.lastname}" address="#{user.emailAddress}" />
</ui:repeat>]]></programlisting>

    </section>
	    
	<section>
	  <title>Multiple messages</title>
	    	
	  <para>
        Sometimes, however, you need to send a slightly different message to 
        each recipient (e.g. a password	reset).  The best way to do this is to 
        place the whole message inside a <literal>&lt;ui:repeat&gt;</literal>:
      </para>
	    	
	  <programlisting><![CDATA[<ui:repeat value="#{people}" var="p">
    <m:message>
        <m:from name="#{person.firstname} #{person.lastname}">#{person.address}</m:from>
        <m:to name="#{p.firstname}">#{p.address}</m:to>
            ...
    </m:message>
</ui:repeat>]]></programlisting>

	</section>
	    
	<section>
	  <title>Templating</title>
	    	
	  <para>
        The mail templating example shows that facelets templating Just Works 
        with the Seam mail tags.
      </para>
	    	
	  <para>
        Our <literal>template.xhtml</literal> contains:
      </para>
	    	
	  <programlisting><![CDATA[<m:message>
   <m:from name="Seam" address="do-not-reply@jboss.com" />
   <m:to name="#{person.firstname} #{person.lastname}">#{person.address}</m:to>
   <m:subject>#{subject}</m:subject>
   <m:body>
       <html>
           <body>
               <ui:insert name="body">This is the default body, specified by the template.</ui:insert>
           </body>
       </html>
   </m:body>
</m:message>]]></programlisting>

      <para>
        Our <literal>templating.xhtml</literal> contains:
      </para>
	    	
      <programlisting><![CDATA[<ui:param name="subject" value="Templating with Seam Mail"/>
<ui:define name="body">
    <p>This example demonstrates that you can easily use <i>facelets templating</i> in email!</p>
</ui:define>]]></programlisting>
            
      <para>
        You can also use facelets source tags in your email, but you must place
        them in a jar in <literal>WEB-INF/lib</literal> - referencing the 
        <literal>.taglib.xml</literal> from <literal>web.xml</literal> isn't 
        reliable when using Seam Mail (if you send your mail asynchrounously 
        Seam Mail doesn't have access to the full JSF or Servlet context, and 
        so doesn't know about <literal>web.xml</literal> configuration 
        parameters).
      </para>
            
      <para>
        If you do need more configure Facelets or JSF when sending mail, you'll
        need to override the Renderer component and do the configuration 
        programmatically - only for advanced users!
      </para>
            
            
	</section>
	    
	<section>
	  <title>Internationalisation</title>
	  
      <para>
        Seam supports sending internationalised messages.  By default, the 
        encoding provided by JSF is used, but this can be overridden on the 
        template:
      </para>
      
	  <programlisting><![CDATA[<m:message charset="UTF-8">
   ...
</m:message>]]></programlisting>

      <para>
        The body, subject and recipient (and from) name will be encoded.  
        You'll need to make sure facelets uses the correct charset for parsing
        your pages by setting encoding of the template:
      </para> 
    
      <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>]]></programlisting>
    </section>
	    
	<section>
      <title>Other Headers</title>
	    	
      <para>
        Sometimes you'll want to add other headers to your email.  Seam 
        provides support for some (see <xref linkend="mail.tags"/>). For 
        example, we can set the importance of the email, and ask for a read 
        receipt:
      </para>
	    	
	  <programlisting><![CDATA[<m:message xmlns:m="http://jboss.com/products/seam/mail"
    importance="low"
    requestReadReceipt="true"/>]]></programlisting>
   
      <para>
        Otherise you can add any header to the message using the 
        <literal>&lt;m:header&gt;</literal> tag:
      </para>
	    	
      <programlisting><![CDATA[<m:header name="X-Sent-From" value="JBoss Seam"/>]]></programlisting>
	    	
    </section>

  </section>
  <section>
    <title>Receiving emails</title>
    
    <para>
      If you are using EJB then you can use a MDB (Message Driven Bean) to 
      receive email.  JBoss provides a JCA adaptor — 
      <literal>mail-ra.rar</literal> — but the version distributed with
      JBoss AS has a number of limitations (and isn't bundled in some versions)
      therefore we recommend using the <literal>mail-ra.rar</literal> 
      distributed with Seam is recommended (it's in the <literal>mail</literal>
      directory in the Seam bundle).  <literal>mail-ra.rar</literal> should 
      be placed in <literal>$JBOSS_HOME/server/default/deploy</literal>; if the
      version of JBoss AS you use already has this file, replace it.
    </para>
    
    <para>
      You can configure it like this:
    </para>
      
	<programlisting><![CDATA[@MessageDriven(activationConfig={
    @ActivationConfigProperty(propertyName="mailServer", propertyValue="localhost"),
    @ActivationConfigProperty(propertyName="mailFolder", propertyValue="INBOX"),
    @ActivationConfigProperty(propertyName="storeProtocol", propertyValue="pop3"),
    @ActivationConfigProperty(propertyName="userName", propertyValue="seam"),
    @ActivationConfigProperty(propertyName="password", propertyValue="seam")
})
@ResourceAdapter("mail-ra.rar")
@Name("mailListener")
public class MailListenerMDB implements MailListener {

    @In(create=true)
    private OrderProcessor orderProcessor;

    public void onMessage(Message message) {
       // Process the message
       orderProcessor.process(message.getSubject());
    }
   
}]]></programlisting>

    <para>
      Each message received will cause <literal>onMessage(Message message)</literal> 
      to be called.  Most Seam annotations will work inside a MDB but you 
      musn't access the persistence context.
    </para>

    <para>
      You can find more information on<literal>mail-ra.rar</literal>
      at <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=InboundJavaMail">http://wiki.jboss.org/wiki/Wiki.jsp?page=InboundJavaMail</ulink>.
    </para>
		
    <para>
      If you aren't using JBoss AS you can still use <literal>mail-ra.rar</literal> 
      or you may find your application server includes a similar adapter.
    </para>
	
  </section>

  <section>
    <title>Configuration</title>
		
    <para>
      To include Email support in your application, include <literal>jboss-seam-mail.jar</literal>
      in your <literal>WEB-INF/lib</literal> directory. If you are using JBoss 
      AS there is no further configuration needed to use Seam's email support.
      Otherwise you need to make sure you have the JavaMail API, an 
      implementation of the JavaMail API present (the API and impl used in 
      JBoss AS are distributed with seam as <literal>lib/mail.jar</literal>),
      and a copy of the Java Activation Framework (distributed with Seam as 
      <literal>lib/activation.jar</literal>.
    </para>
            
    <para>
      The Seam Email module requires the use of Facelets as the view 
      technology. Future versions of the library may also support the use of 
      JSP. Additionally, it requires the use of the seam-ui package.
    </para>
            
    <para>
      The <literal>mailSession</literal> component uses JavaMail to talk to a 
      'real' SMTP server.
    </para>
		
    <section>
      <title><literal>mailSession</literal></title>
	        
      <para>
        A JavaMail Session may be available via a JNDI lookup if you are 
        working in an JEE environment or you can use a Seam configured Session.
      </para>
	        
	  <para>
        The mailSession component's properties are described in more detail in 
        <xref linkend="components.mail"/>.
      </para>
	       
	  <section>
		<title>JNDI lookup in JBoss AS</title>
		        
		<para>
          The JBossAS <literal>deploy/mail-service.xml</literal> configures a 
          JavaMail session binding into JNDI.  The default service 
          configuration will need altering for your network.  
          <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=JavaMail">http://wiki.jboss.org/wiki/Wiki.jsp?page=JavaMail</ulink>
          describes the service in more detail.
        </para>
		        
        <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
    xmlns:core="http://jboss.com/products/seam/core"
    xmlns:mail="http://jboss.com/products/seam/mail">
        
    <mail:mail-session session-jndi-name="java:/Mail"/>
    
</components>]]></programlisting>

        <para>
          Here we tell Seam to get the mail session bound to 
          <literal>java:/Mail</literal> from JNDI.
        </para>
		        
	  </section>
	        
      <section>
        <title>Seam configured Session</title>
	        	
        <para>
          A mail session can be configured via <literal>components.xml</literal>.
          Here we tell Seam to use <literal>smtp.example.com</literal> as the 
          smtp server:
        </para>
	      	 	
        <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
    xmlns:core="http://jboss.com/products/seam/core"
    xmlns:mail="http://jboss.com/products/seam/mail">
        
    <mail:mail-session host="smtp.example.com"/>
    
</components>]]></programlisting>

      </section>
    </section>
  </section>
	
  <section>
    <title>Meldware</title>
	
    <para>
	  Seam's mail examples use Meldware (from <ulink url="http://buni.org">buni.org</ulink>) 
      as a mail server. Meldware is a groupware package that provides 
      <literal>SMTP</literal>, <literal>POP3</literal>, <literal>IMAP</literal>,
      webmail, a shared calendar and an graphical admin tool; it's written as a
      JEE application so can be deployed onto JBoss AS alongside your Seam
      application. 
    </para>
		
    <para>
      The version of Meldware distributed with Seam (in the <literal>mail/buni-meldware</literal>
      folder) is specially tailored for development - mailboxes, users and 
      aliases (email addresses) are created every time the application 
      deploys.  If you want to use Meldware in production you should install
      the latest release from <ulink url="http://buni.org">buni.org</ulink>. 
    </para>
    <para>
      To create mailboxes, users and aliases, you can use the 
      <literal>meldware</literal> component:
    </para>
		
    <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
    xmlns:core="http://jboss.com/products/seam/core"
    xmlns:mail="http://jboss.com/products/seam/mail">
              
    <mail:mail-session host="smtp.example.com"/>
    
    <mail:meldware>
        <mail:users>
            <value>#{duke}</value>
            <value>#{root}</value>
	    </mail:users>
    </mail:meldware>
    
   	<mail:meldware-user name="duke" username="duke" password="duke">
   	    <mail:aliases>
   	        <value>duke@jboss.org</value>
   	        <value>duke@jboss.com</value>
   	    </mail:aliases>
   	<mail:meldware-user name="root" username="root" password="root" administrator="true" /> 
</components>]]></programlisting>

    <para>
      Here we've created two users, <literal>duke</literal>, who has two email
      addresses and an administrator with the username <literal>root</literal>.
    </para>
 			
  </section>

  <section id="mail.tags">
    <title>Tags</title>

    <para>
      Emails are generated using tags in the <literal>http://jboss.com/products/seam/mail</literal>
      namespace. Documents should always have the <literal>message</literal>
      tag at the root of the message. The message tag prepares Seam to generate
      an email.
    </para>
            
    <para>
      The standard templating tags of facelets can be used as normal. Inside
      the body you can use any JSF tag; if it  requires access to external 
      resources (stylesheets, javascript) then be sure to set the 
      <literal>urlBase</literal>.
    </para>
            
    <variablelist>
      <varlistentry>
        <term>&lt;m:message&gt;</term>
        <listitem>
          <para>
	        Root tag of a mail message
	      </para>
	      <itemizedlist>
            <listitem>
              <para>
	            <literal>importance</literal> — low, normal or high.  By
                default normal, this sets the importance of the mail message.
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>precedence</literal> — sets the precedence of
                the message (e.g. bulk).
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>requestReadReceipt</literal> — by default false,
                if set, a read receipt request will be will be added, with the
                read receipt being sent to the <literal>From:</literal>
                address.
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>urlBase</literal> — If set, the value is
                prepended to the <literal>requestContextPath</literal> allowing
                you to use components such as
                <literal>&lt;h:graphicImage&gt;</literal> in your emails.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;m:from&gt;</term>
        <listitem>
          <para>
            Set's the From: address for the email.  You can only have one of 
            these per email.
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <literal>name</literal> — the name the email should come
                from.
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>address</literal> — the email address the email
                should come from.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;m:replyTo&gt;</term>
          <listitem>
            <para>
              Set's the Reply-to: address for the email.  You can only have one
              of these per email.
            </para>
           <itemizedlist>
             <listitem>
               <para>
                 <literal>address</literal> — the email address the email
                 should come from.
               </para>
             </listitem>
           </itemizedlist>
         </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;m:to&gt;</term>
  	    <listitem>
          <para>
            Add a recipient to the email. Use multiple &lt;m:to&gt; tags for
            multiple recipients. This tag can be safely placed inside a repeat 
            tag such as &lt;ui:repeat&gt;.
        </para>
          <itemizedlist>
            <listitem>
              <para>
                <literal>name</literal> — the name of the recipient.
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>address</literal> — the email address of the recipient.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;m:cc&gt;</term>
          <listitem>
            <para>
              Add a cc recipient to the email. Use multiple &lt;m:cc&gt; tags
              for multiple ccs. This tag can be safely placed inside a iterator
              tag such as &lt;ui:repeat&gt;.
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>name</literal> — the name of the recipient.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>address</literal> —  the email address of the
                  recipient.
                </para>
             </listitem>
           </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;m:bcc&gt;</term>
          <listitem>
            <para>
              Add a bcc recipient to the email. Use multiple &lt;m:bcc&gt; 
              tags for multiple bccs. This tag can be safely placed inside a
              repeat tag such as &lt;ui:repeat&gt;.
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>name</literal> — the name of the recipient.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>address</literal> — the email address of the
                  recipient.
                </para>
              </listitem>
            </itemizedlist>
         </listitem>
     	</varlistentry>
      <varlistentry>
        <term>&lt;m:header&gt;</term>
          <listitem>
            <para>
              Add a header to the email (e.g. <literal>X-Sent-From: JBoss Seam</literal>)
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>name</literal> — The name of the header to 
                  add (e.g. <literal>X-Sent-From</literal>).
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>value</literal> — The value of the header to
                  add (e.g. <literal>JBoss Seam</literal>).
                </para>
             </listitem>
           </itemizedlist>
         </listitem>
    	</varlistentry>
      <varlistentry>
        <term>&lt;m:attachment&gt;</term>
        <listitem>
          <para>
            Add an attachment to the email.
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <literal>value</literal> — The file to attach:
              </para>
 	            <itemizedlist>
         	      <listitem>
                  <para>
                    <literal>String</literal> — A <literal>String</literal>
                     is interpreted as a path to file within the classpath
                  </para>
                </listitem>
                <listitem>    
                  <para>
                    <literal>java.io.File</literal> — An EL expression
                    can reference a <literal>File</literal> object
                  </para>
                </listitem>
        	      <listitem>
 	           	    <para>
                   <literal>java.net.URL</literal> — An EL expression
                   can reference a <literal>URL</literal> object
                  </para>
                </listitem>
  		      <listitem>
                  <para>
                    <literal>java.io.InputStream</literal> — An EL 
                    expression can reference an <literal>InputStream</literal>. 
                    In this case both a <literal>fileName</literal> and a 
                    <literal>contentType</literal> must be specified.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <literal>byte[]</literal> — An EL expression can
                    reference an <literal>byte[]</literal>. In this case both
                    a <literal>fileName</literal> and a 
                    <literal>contentType</literal> must be specified.
                  </para>
                </listitem>
              </itemizedlist>
              <para>If the value attribute is ommitted:</para>
              <itemizedlist>
                <listitem>
                  <para>
                    If this tag contains a <literal>&lt;p:document&gt;</literal>
                    tag, the document described will be generated and 
                    attached to the email.  A <literal>fileName</literal>
                    should be specfied.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If this tag contains other JSF tags a HTML document will 
                    be generated from them and attached to the email. A 
                    <literal>fileName</literal> should be specfied.
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>
                <literal>fileName</literal> — Specify the file name to
                use for the attached file.
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>contentType</literal> — Specify the MIME type
                of the attached file
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;m:subject&gt;</term>
        <listitem>
          <para>
            Set's the subject for the email.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;m:body&gt;</term>
        <listitem>
          <para>
            Set's the body for the email.  Supports an <literal>alternative</literal>
            facet which, if an HTML email is generated can contain
            alternative text for a mail reader which doesn't support html.
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <literal>type</literal> — If set to <literal>plain</literal>
                then a plain text email will be generated otherwise an HTML 
                email is generated.  
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</chapter>
    <chapter id="jms">
    <title>Asynchronicity and messaging</title>
    <para>
        Seam makes it very easy to perform work asynchronously from a web request. When most people
        think of asynchronicity in Java EE, they think of using JMS. This is certainly one way to
        approach the problem in Seam, and is the right way when you have strict and well-defined
        quality of service requirements. Seam makes it easy to send and recieve JMS messages using
        Seam components.
    </para>
    
    <para>
        But for many usecases, JMS is overkill. Seam layers a simple asynchronous method and event
        facility over your choice of <emphasis>dispatchers</emphasis>:
    </para>
    
    <itemizedlist>
        <listitem>
            <para>
                <literal>java.util.concurrent.ScheduledThreadPoolExecutor</literal> (by default)
            </para>
        </listitem>
        <listitem>
            <para>
                the EJB timer service (for EJB 3.0 environments)
            </para>
        </listitem>
        <listitem>
            <para>
                Quartz
            </para>
        </listitem>
    </itemizedlist>
            
    <sect1>
        <title>Asynchronicity</title>

        <para>
            Asynchronous events and method calls have the same quality of service expectations as  
            the underlying dispatcher mechanism. The default dispatcher, based upon a 
            <literal>ScheduledThreadPoolExecutor</literal> performs efficiently but provides no
            support for persistent asynchronous tasks, and hence no guarantee that a task
            will ever actually be executed. If you're working in an environment that supports
            EJB 3.0, and add the following line to <literal>components.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<async:timer-service-dispatcher/>]]></programlisting>
        
        <para>
            then your asynchronous tasks will be processed by the container's EJB timer service. If 
            you're not familiar with the Timer service, don't worry, you don't need to interact with 
            it directly if you want to use asynchronous methods in Seam. The important thing to know
            is that any good EJB 3.0 implementation will have the option of using persistent timers, 
            which gives some guarantee that the tasks will eventually be processed.
        </para>
        
        <para>
            Another alternative is to use the open source Quartz library to manage asynchronous method. 
            You need to bundle the Quartz library JAR (found in the <literal>lib</literal> directory) 
            in your EAR and declare it as a Java module in <literal>application.xml</literal>. In addition, 
            you need to add the following line to <literal>components.xml</literal> to install the Quartz 
            dispatcher.
        </para>
        
        <programlisting><![CDATA[<async:quartz-dispatcher/>]]></programlisting>
            
        <para>
            The Seam API for the default <literal>ScheduledThreadPoolExecutor</literal>, the EJB3 
            <literal>Timer</literal>, and the Quartz <literal>Scheduler</literal> are largely the 
            same. They can just "plug and play" by adding a line to <literal>components.xml</literal>.
        </para>
        
        <sect2>
        <title>Asynchronous methods</title>
        
        <para>
            In simplest form, an asynchronous call just lets a method call be processed asynchronously 
            (in a different thread) from the caller. We usually use an asynchronous call when we want 
            to return an immediate response to the client, and let some expensive work be processed in
            the background. This pattern works very well in applications which use AJAX, where the
            client can automatically poll the server for the result of the work.
        </para>
        
        <para>
            For EJB components, we annotate the local interface to specify that a method is processed
            asynchronously.
        </para>
        
        <programlisting><![CDATA[@Local
public interface PaymentHandler
{
    @Asynchronous
    public void processPayment(Payment payment);
}]]></programlisting>

        <para>
            (For JavaBean components we can annotate the component implementation class if we like.)
        </para>
        
        <para>
            The use of asynchronicity is transparent to the bean class:
        </para>
        
        <programlisting><![CDATA[@Stateless
@Name("paymentHandler")
public class PaymentHandlerBean implements PaymentHandler
{
    public void processPayment(Payment payment)
    {
        //do some work!
    }
}]]></programlisting>
        
        <para>
            And also transparent to the client:
        </para>
        
        <programlisting><![CDATA[@Stateful
@Name("paymentAction")
public class CreatePaymentAction
{
    @In(create=true) PaymentHandler paymentHandler;
    @In Bill bill;
    
    public String pay()
    {
        paymentHandler.processPayment( new Payment(bill) );
        return "success";
    }
}]]></programlisting>

        <para>
            The asynchronous method is processed in a completely new event context and does
            not have access to the session or conversation context state of the caller. However,
            the business process context <emphasis>is</emphasis> propagated.
        </para>
        
        <para>
            Asynchronous method calls may be scheduled for later execution using the
            <literal>@Duration</literal>, <literal>@Expiration</literal> and
            <literal>@IntervalDuration</literal> annotations.
        </para>
        
        <programlisting><![CDATA[@Local
public interface PaymentHandler
{
    @Asynchronous
    public void processScheduledPayment(Payment payment, @Expiration Date date);

    @Asynchronous
    public void processRecurringPayment(Payment payment, 
                                        @Expiration Date date, 
                                        @IntervalDuration Long interval)'
}]]></programlisting>
        
        <programlisting><![CDATA[@Stateful
@Name("paymentAction")
public class CreatePaymentAction
{
    @In(create=true) PaymentHandler paymentHandler;
    @In Bill bill;
    
    public String schedulePayment()
    {
        paymentHandler.processScheduledPayment( new Payment(bill), bill.getDueDate() );
        return "success";
    }

    public String scheduleRecurringPayment()
    {
        paymentHandler.processRecurringPayment( new Payment(bill), bill.getDueDate(), 
                                                ONE_MONTH );
        return "success";
    }
}]]></programlisting>

        <para>
            Both client and server may access the <literal>Timer</literal> object associated with
            the invocation. The <literal>Timer</literal> object shown below is the EJB3 timer when you use the EJB3 dispatcher. For the default <literal>ScheduledThreadPoolExecutor</literal>, the returned object is <literal>Future</literal> from the JDK. For the Quartz dispatcher, it returns <literal>QuartzTriggerHandle</literal>, which we will discuss in the next section.
        </para>

        <programlisting><![CDATA[@Local
public interface PaymentHandler
{
    @Asynchronous
    public Timer processScheduledPayment(Payment payment, @Expiration Date date);
}]]></programlisting>
        
        <programlisting><![CDATA[@Stateless
@Name("paymentHandler")
public class PaymentHandlerBean implements PaymentHandler
{
    @In Timer timer;
    
    public Timer processScheduledPayment(Payment payment, @Expiration Date date)
    {
        //do some work!
        
        return timer; //note that return value is completely ignored
    }

}]]></programlisting>
        
        <programlisting><![CDATA[@Stateful
@Name("paymentAction")
public class CreatePaymentAction
{
    @In(create=true) PaymentHandler paymentHandler;
    @In Bill bill;
    
    public String schedulePayment()
    {
        Timer timer = paymentHandler.processScheduledPayment( new Payment(bill), 
                                                              bill.getDueDate() );
        return "success";
    }
}]]></programlisting>

        <para>
            Asynchronous methods cannot return any other value to the caller.
        </para>

        </sect2>
        
        <sect2>
        <title>Asynchronous methods with the Quartz Dispatcher</title>
        
        <para>
            The Quartz dispatcher (see earlier on how to install it) allows you to use the <literal>@Asynchronous</literal>, <literal>@Duration</literal>, <literal>@Expiration</literal>, and <literal>@IntervalDuration</literal> annotations as above. But it has some powerful additional features. The Quartz dispatcher supports three new annotations.
        </para>
        
        <para>The <literal>@FinalExpiration</literal> annotation specifies an end date for the recurring task.</para>
        
        <programlisting><![CDATA[
    // Defines the method in the "processor" component
    @Asynchronous
    public QuartzTriggerHandle schedulePayment(@Expiration Date when, 
                                 @IntervalDuration Long interval,
                                 @FinalExpiration Date endDate, 
                                 Payment payment) 
    { 
        // do the repeating or long running task until endDate
    }
    
    ... ...
    
    // Schedule the task in the business logic processing code
    // Starts now, repeats every hour, and ends on May 10th, 2010
    Calendar cal = Calendar.getInstance ();
    cal.set (2010, Calendar.MAY, 10);
    processor.schedulePayment(new Date(), 60*60*1000, cal.getTime(), payment);
]]></programlisting>

        <para>Note that the method returns the <literal>QuartzTriggerHandle</literal> object, which you can use later to stop, pause, and resume the scheduler. The <literal>QuartzTriggerHandle</literal> object is serializable, so you can save it into the database if you need to keep it around for extended period of time.</para>
        
        <programlisting><![CDATA[QuartzTriggerHandle handle =
         processor.schedulePayment(payment.getPaymentDate(), 
                                   payment.getPaymentCron(), 
                                   payment);
        payment.setQuartzTriggerHandle( handle );
        // Save payment to DB
        
        // later ...
        
        // Retrieve payment from DB
        // Cancel the remaining scheduled tasks
        payment.getQuartzTriggerHandle().cancel();
]]></programlisting>
            
        <para>The <literal>@IntervalCron</literal> annotation supports Unix cron job syntax for task scheduling. For instance, the following asynchronous method runs at 2:10pm and at 2:44pm every Wednesday in the month of March.
        </para>
        
        <programlisting><![CDATA[
    // Define the method
    @Asynchronous
    public QuartzTriggerHandle schedulePayment(@Expiration Date when, 
                                 @IntervalCron String cron, 
                                 Payment payment) 
    { 
        // do the repeating or long running task
    }
    
    ... ...
    
    // Schedule the task in the business logic processing code
    QuartzTriggerHandle handle = 
      processor.schedulePayment(new Date(), "0 10,44 14 ? 3 WED", payment);
]]></programlisting>

        <para>The <literal>@IntervalBusinessDay</literal> annotation supports invocation on the "nth Business Day" scenario. For instance, the following asynchronous method runs at 14:00 on the 2nd business day of each month. By default, it excludes all weekends and US federal holidays until 2010 from the business days.
        </para>
        
        <programlisting><![CDATA[
    // Define the method
    @Asynchronous
    public QuartzTriggerHandle schedulePayment(@Expiration Date when, 
                                 @IntervalBusinessDay NthBusinessDay nth, 
                                 Payment payment) 
    { 
        // do the repeating or long running task
    }
    
    ... ...
    
    // Schedule the task in the business logic processing code
    QuartzTriggerHandle handle = 
      processor.schedulePayment(new Date(), 
          new NthBusinessDay(2, "14:00", WEEKLY), payment);
]]></programlisting>

        <para>The <literal>NthBusinessDay</literal> object contains the configuration of the invocation trigger. You can specify more holidays (e.g., company holidays, non-US holidays etc.) via the <literal>additionalHolidays</literal> property.</para>
        
        <programlisting><![CDATA[
public class NthBusinessDay implements Serializable
{
      int n;
      String fireAtTime;
      List <Date> additionalHolidays;
      BusinessDayIntervalType interval;
      boolean excludeWeekends;
      boolean excludeUsFederalHolidays;

      public enum BusinessDayIntervalType { WEEKLY, MONTHLY, YEARLY }

      public NthBusinessDay ()
      {
        n = 1;
        fireAtTime = "12:00";
        additionalHolidays = new ArrayList <Date> ();
        interval = BusinessDayIntervalType.WEEKLY;
        excludeWeekends = true;
        excludeUsFederalHolidays = true;
      }     
      ... ...
}
]]></programlisting>

        <para>The <literal>@IntervalDuration</literal>, <literal>@IntervalCron</literal>, and <literal>@IntervalNthBusinessDay</literal> annotations are mutually exclusive. If they are used in the same method, a <literal>RuntimeException</literal> will be thrown.</para>
        
        </sect2>
        
        <sect2>
            <title>Asynchronous events</title>
            <para>
                Component-driven events may also be asynchronous. To raise an event for asynchronous
                processing, simply call the <literal>raiseAsynchronousEvent()</literal> method of 
                the <literal>Events</literal> class. To schedule a timed event, call the
                <literal>raiseTimedEvent()</literal> method, passing a <emphasis>schedule</emphasis>
                object (for the default dispatcher or timer service dispatcher, use <literal>TimerSchedule</literal>). 
                Components may observe asynchronous events in the usual way, but remember that only the 
                business process context is propagated to the asynchronous thread.
            </para>
        </sect2>

    </sect1>
    
    <sect1>
    <title>Messaging in Seam</title>
    
    <para>
        Seam makes it easy to send and receive JMS messages to and from
        Seam components.
    </para>
    
    <sect2>
        <title>Configuration</title>
        <para>
            To configure Seam's infrastructure for sending JMS messages,
            you need to tell Seam about any topics and queues you want to
            send messages to, and also tell Seam where to find the
            <literal>QueueConnectionFactory</literal> and/or
            <literal>TopicConnectionFactory</literal>.
        </para>
        
        <para>
            Seam defaults to using <literal>UIL2ConnectionFactory</literal>
            which is the usual connection factory for use with JBossMQ. If
            you are using some other JMS provider, you need to set one or
            both of <literal>queueConnection.queueConnectionFactoryJndiName</literal>
            and <literal>topicConnection.topicConnectionFactoryJndiName</literal>
            in <literal>seam.properties</literal>, <literal>web.xml</literal>
            or <literal>components.xml</literal>.
        </para>
        
        <para>
            You also need to list topics and queues in <literal>components.xml</literal>
            to install Seam managed <literal>TopicPublisher</literal>s and
            <literal>QueueSender</literal>s:
        </para>
        
        <programlisting><![CDATA[<jms:managed-topic-publisher name="stockTickerPublisher" 
                             auto-create="true" 
                             topic-jndi-name="topic/stockTickerTopic"/>

<jms:managed-queue-sender name="paymentQueueSender" 
                          auto-create="true" 
                          queue-jndi-name="queue/paymentQueue"/>]]></programlisting>

    </sect2>

    <sect2>
        <title>Sending messages</title>
        <para>
            Now, you can inject a JMS <literal>TopicPublisher</literal> and
            <literal>TopicSession</literal> into any component:
        </para>
        
        <programlisting><![CDATA[@In 
private TopicPublisher stockTickerPublisher;   
@In 
private TopicSession topicSession;

public void publish(StockPrice price) {
      try
      {
         stockTickerPublisher.publish( topicSession.createObjectMessage(price) );
      } 
      catch (Exception ex)
      {
         throw new RuntimeException(ex);
      } 
}]]></programlisting>

        <para>Or, for working with a queue:</para>

        <programlisting><![CDATA[@In
private QueueSender paymentQueueSender;   
@In
private QueueSession queueSession;

public void publish(Payment payment) {
      try
      {
         paymentQueueSender.send( queueSession.createObjectMessage(payment) );
      } 
      catch (Exception ex)
      {
         throw new RuntimeException(ex);
      } 
}]]></programlisting>

    </sect2>
    
    <sect2>
        <title>Receiving messages using a message-driven bean</title>
        <para>
            You can process messages using any EJB3 message driven bean. Message-driven
            beans may even be Seam components, in which case it is possible to inject
            other event and application scoped Seam components.
        </para>
    </sect2>
    
    <sect2>
        <title>Receiving messages in the client</title>
        <para>
            Seam Remoting lets you subscribe to a JMS topic from client-side JavaScript. This is
            described in <xref linkend="remoting"/>.
        </para>
    </sect2>
    
    </sect1>
</chapter>
    <chapter id="cache">
    <title>Caching</title>
    
    <para>
        In almost all enterprise applications, the database is the primary 
        bottleneck, and the least scalable tier of the runtime environment. 
        People from a PHP/Ruby environment will try to tell you that so-called
        "shared nothing" architectures scale well. While that may be literally
        true, I don't know of many interesting multi-user applications which 
        can be implemented with no sharing of resources between different 
        nodes of the cluster. What these silly people are really thinking of 
        is a "share nothing except for the database" architecture. Of course, 
        sharing the database is the primary problem with scaling a multi-user 
        application—so the claim that this architecture is highly scalable 
        is absurd, and tells you a lot about the kind of applications that these
        folks spend most of their time working on. 
    </para>
    
    <para>
        Almost anything we can possibly do to share the database <emphasis>less 
        often</emphasis> is worth doing.
    </para>
    
    <para>
        This calls for a cache. Well, not just one cache. A well designed Seam
        application will feature a rich, multi-layered caching strategy that
        impacts every layer of the application:
    </para>
    
    <itemizedlist>
        <listitem>
            <para>
                The database, of course, has its own cache. This is 
                super-important, but can't scale like a cache in the
                application tier.
            </para>
        </listitem>
        <listitem>
            <para>
                Your ORM solution (Hibernate, or some other JPA implementation)
                has a second-level cache of data from the database. This is
                a very powerful capability, but is often misused. In a clustered
                environment, keeping the data in the cache transactionally
                consistent across the whole cluster, and with the database,
                is quite expensive. It makes most sense for data which is shared
                between many users, and is updated rarely. In traditional 
                stateless architectures, people often try to use the second-level
                cache for conversational state. This is always bad, and is
                especially wrong in Seam.
            </para>
        </listitem>
        <listitem>
            <para>
                The Seam conversation context is a cache of conversational state.
                Components you put into the conversation context can hold and cache
                state relating to the current user interaction.
            </para>
        </listitem>
        <listitem>
            <para>
                In particular, the
                Seam-managed persistence context (or an extended EJB container-managed
                persistence context associated with a conversation-scoped stateful
                session bean) acts as a cache of data that has been read in the
                current conversation. This cache tends to have a pretty high
                hitrate! Seam optimizes the replication of Seam-managed persistence 
                contexts in a clustered environment, and there is no requirement for 
                transactional consistency with the database (optimistic locking is 
                sufficient) so you don't need to worry too much about the performance 
                implications of this cache, unless you read thousands of objects into
                a single persistence context.
            </para>
        </listitem>
       <listitem>
            <para>
                The application can cache non-transactional state in the Seam
                application context. State kept in the application context is
                of course not visible to other nodes in the cluster.
            </para>
        </listitem>
       <listitem>
            <para>
                The application can cache transactional state using the Seam
                <literal>pojoCache</literal> component, which integrates
                JBossCache into the Seam environment. This state will be visible
                to other nodes if you run JBoss cache in a clustered mode.
            </para>
        </listitem>
       <listitem>
            <para>
                Finally, Seam lets you cache rendered fragments of a JSF page. Unlike  
                the ORM second-level cache, this cache is not automatically invalidated 
                when data changes, so you need to write application code to perform
                explicit invalidation, or set appropriate expiration policies.
            </para>
        </listitem>
    </itemizedlist>
    
    <para>
        For more information about the second-level cache, you'll need to refer to
        the documentation of your ORM solution, since this is an extremely complex
        topic. In this section we'll discuss the use of JBossCache directly, via
        the <literal>pojoCache</literal> component, or as the page fragment cache,
        via the <literal>&lt;s:cache&gt;</literal> control.
    </para>
    
    <section>
        <title>Using JBossCache in Seam</title>
        
        <para>
            The built-in <literal>pojoCache</literal> component manages an instance
            of <literal>org.jboss.cache.aop.PojoCache</literal>. You can safely put 
            any immutable Java object in the cache, and it will be replicated across
            the cluster (assuming that replication is enabled). If you want to
            keep mutable objects in the cache, you'll need to run the JBossCache
            bytecode preprocessor to ensure that changes to the objects will be
            automatically detected and replicated.
        </para>
        
        <para>
            To use <literal>pojoCache</literal>, all you need to do is put the
            JBossCache jars in the classpath, and provide a resource named
            <literal>treecache.xml</literal> with an appropriate cache configuration.
            JBossCache has many scary and confusing configuration settings, so
            we won't discuss them here. Please refer to the JBossCache documentation
            for more information.
        </para>
        
        <para>
            You can find a sample <literal>treecache.xml</literal> in
            <literal>examples/blog/resources/treecache.xml</literal>.
        </para>
             
        
        <para>
            For an EAR depoyment of Seam, we recommend that the JBossCache jars and
            configuration go directly into the EAR. Make sure you place both
            <literal>jboss-cache.jar</literal> and <literal>jgroups.jar</literal>
            in your EAR's lib folder.
        </para>
        
        <para>
            Now you can inject the cache into any Seam component:
        </para>
        
        <programlisting><![CDATA[@Name("chatroom")
public class Chatroom {
    @In PojoCache pojoCache;
    
    public void join(String username) {
      try
      {
         Set<String> userList = (Set<String>) pojoCache.get("chatroom", "userList");
         if (userList==null) 
         {
            userList = new HashSet<String>();
            pojoCache.put("chatroom", "userList", userList);
         }
         userList.put(username);
      }
      catch (CacheException ce)
      {
         throw new RuntimeException(ce);
      }
    }
}]]></programlisting>

        <para>
            If you want to have multiple JBossCache configurations in your application,
            use <literal>components.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<core:pojo-cache name="myCache" cfg-resource-name="myown/cache.xml"/>]]></programlisting>
        
    </section>
    
    <section>
        <title>Page fragment caching</title>
        
        <para>
            The most interesting user of JBossCache is the <literal>&lt;s:cache&gt;</literal>
            tag, Seam's solution to the problem of page fragment caching in JSF.
            <literal>&lt;s:cache&gt;</literal> uses <literal>pojoCache</literal> internally,
            so you need to follow the steps listed above before you can use it. (Put the jars 
            in the EAR, wade through the scary configuration options, etc.)
        </para>
        
        <para>
            <literal>&lt;s:cache&gt;</literal> is used for caching some rendered content which
            changes rarely. For example, the welcome page of our blog displays the recent
            blog entries:
        </para>
        
        <programlisting><![CDATA[<s:cache key="recentEntries-#{blog.id}" region="welcomePageFragments">
   <h:dataTable value="#{blog.recentEntries}" var="blogEntry">
      <h:column>
         <h3>#{blogEntry.title}</h3>
         <div>
            <s:formattedText value="#{blogEntry.body}"/>
         </div>
      </h:column>
   </h:dataTable>
</s:cache>]]></programlisting>

        <para>
            The <literal>key</literal> let's you have multiple cached versions of each page
            fragment. In this case, there is one cached version per blog. The 
            <literal>region</literal> determines the JBossCache node that all version will
            be stored in. Different nodes may have different expiry policies. (That's the 
            stuff you set up using the aforementioned scary configuration options.)
        </para>
        
        <para>
            Of course, the big problem with <literal>&lt;s:cache&gt;</literal> is that it 
            is too stupid to know when the underlying data changes (for example, when the 
            blogger posts a new entry). So you need to evict the cached fragment manually:
        </para>
        
        <programlisting><![CDATA[public void post() {
    ...
    entityManager.persist(blogEntry);
    pojoCache.remove("welcomePageFragments", "recentEntries-" + blog.getId() );
}]]></programlisting>
        
        <para>
            Alternatively, if it is not critical that changes are immediately visible to the
            user, you could set a short expiry time on the JbossCache node.
        </para>
        
    </section>
    
</chapter>
    <chapter id="webservices">
  <title>Web Services</title>

  <para>
    Seam integrates with JBossWS to allow standard JEE web services to take full advantage of Seam's contextual framework,
    including support for conversational web services. This chapter walks through the steps required to allow web 
    services to run within a Seam environment.
  </para>

  <sect1>
    <title>Configuration and Packaging</title>
    <para>
      To allow Seam to intercept web service requests so that the necessary Seam contexts can be created for the request, 
      a special SOAP handler must be configured; <literal>org.jboss.seam.webservice.SOAPRequestHandler</literal>
      is a <literal>SOAPHandler</literal> implementation that does the work of managing Seam's lifecycle during the scope
      of a web service request.  
    </para>
    
    <para>
      A special configuration file, <literal>standard-jaxws-endpoint-config.xml</literal> should be placed 
      into the <literal>META-INF</literal> directory of the <literal>jar</literal> file that contains the 
      web service classes.  This file contains the following SOAP handler configuration:
    </para>
    
    <programlisting><![CDATA[<jaxws-config xmlns="urn:jboss:jaxws-config:2.0" 
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
              xmlns:javaee="http://java.sun.com/xml/ns/javaee"
              xsi:schemaLocation="urn:jboss:jaxws-config:2.0 jaxws-config_2_0.xsd">
   <endpoint-config>
      <config-name>Seam WebService Endpoint</config-name>
      <pre-handler-chains>
         <javaee:handler-chain>
            <javaee:protocol-bindings>##SOAP11_HTTP</javaee:protocol-bindings>
            <javaee:handler>
               <javaee:handler-name>SOAP Request Handler</javaee:handler-name>
               <javaee:handler-class>org.jboss.seam.webservice.SOAPRequestHandler</javaee:handler-class>
            </javaee:handler>
         </javaee:handler-chain>
      </pre-handler-chains>
   </endpoint-config>
</jaxws-config>]]></programlisting>

  </sect1>
  
  <sect1>
    <title>Conversational Web Services</title>
    <para>
      So how are conversations propagated between web service requests?  Seam uses a SOAP header element present
      in both the SOAP request and response messages to carry the conversation ID from the consumer to the service,
      and back again.  Here's an example of a web service request that contains a conversation ID:
    </para>
    
    <programlisting><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
    xmlns:seam="http://seambay.example.seam.jboss.org/">
  <soapenv:Header>
    <seam:conversationId xmlns:seam='http://www.jboss.org/seam/webservice'>2</seam:conversationId>
  </soapenv:Header>
  <soapenv:Body>
    <seam:confirmAuction/>
  </soapenv:Body>
</soapenv:Envelope>    
    ]]></programlisting>
    
    <para>
      As you can see in the above SOAP message, there is a <literal>conversationId</literal> element within the
      SOAP header that contains the conversation ID for the request, in this case <literal>2</literal>.  
      Unfortunately, because web services may be consumed by a variety of web service clients written in a 
      variety of languages, it is up to the developer to implement conversation ID propagation between individual 
      web services that are intended to be used within the scope of a single conversation.
    </para>
    
    <para>
      An important thing to note is that the <literal>conversationId</literal> header element must be qualified
      with a namespace of <literal>http://www.jboss.org/seam/webservice</literal>, otherwise Seam will not be
      able to read the conversation ID from the request. Here's an example of a response to the above request message:
    </para>
    
    <programlisting><![CDATA[<env:Envelope xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'>
  <env:Header>
    <seam:conversationId xmlns:seam='http://www.jboss.org/seam/webservice'>2</seam:conversationId>
  </env:Header>
  <env:Body>
    <confirmAuctionResponse xmlns="http://seambay.example.seam.jboss.org/"/>
  </env:Body>
</env:Envelope>    
    ]]></programlisting>
    
    <para>
      As you can see, the response message contains the same <literal>conversationId</literal> element as the request.
    </para>
    
    <sect2>
      <title>A Recommended Strategy</title>
      
      <para>
        As web services must be implemented as either a stateless session bean or POJO, it is recommended that for
        conversational web services, the web service acts as a facade to a conversational Seam component.
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="/images/ws-strategy.png" align="center"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="/images/ws-strategy.png" align="center"/>
        </imageobject>
      </mediaobject>      
      
      <para>
        If the web service is written as a stateless session bean, then it is also possible to make it a Seam
        component by giving it a <literal>@Name</literal>.  Doing this allows Seam's bijection (and other) 
        features to be used in the web service class itself. 
      </para>
      
    </sect2>
    
  </sect1>
  
  <sect1>
    <title>An example web service</title>
    
    <para>
      Let's walk through an example web service.  The code in this section all comes from the seamBay example
      application in Seam's <literal>/examples</literal> directory, and follows the recommended strategy as
      described in the previous section.  Let's first take a look at the web service class and one of its web 
      service methods:
    </para>
    
    <programlisting><![CDATA[@Stateless
@WebService(name = "AuctionService", serviceName = "AuctionService")
public class AuctionService implements AuctionServiceRemote
{           
   @WebMethod
   public boolean login(String username, String password)
   {
      Identity.instance().setUsername(username);
      Identity.instance().setPassword(password);
      Identity.instance().login();
      return Identity.instance().isLoggedIn();
   }
   
   // snip
}]]></programlisting>

    <para>
      As you can see, our web service is a stateless session bean, and is annotated using the JWS annotations 
      from the <literal>javax.jws</literal> package, as defined by JSR-181.  The <literal>@WebService</literal> 
      annotation tells the container that this class implements a web service, and the <literal>@WebMethod</literal> 
      annotation on the <literal>login()</literal> method identifies the method as a web service method.  
      The <literal>name</literal> and <literal>serviceName</literal> attributes in the <literal>@WebService</literal> 
      annotation are optional.
    </para>
    
    <para>
      As is required by the specification, each method that is to be exposed as a web service method must also be 
      declared in the remote interface of the web service class (when the web service is a stateless session bean).  
      In the above example, the <literal>AuctionServiceRemote</literal> interface must declare the <literal>login()</literal> 
      method as it is annotated as a <literal>@WebMethod</literal>.
    </para>    
    
    <para>
      As you can see in the above code, the web service implements a <literal>login()</literal> method that 
      delegates to Seam's built-in <literal>Identity</literal> component.  In keeping with our recommended strategy,
      the web service is written as a simple facade, passing off the real work to a Seam component.  This allows
      for the greatest reuse of business logic between web services and other clients.
    </para>
    
    <para>
      Let's look at another example.  This web service method begins a new conversation by delegating to the
      <literal>AuctionAction.createAuction()</literal> method:
    </para>
    
    <programlisting><![CDATA[   @WebMethod
   public void createAuction(String title, String description, int categoryId)
   {
      AuctionAction action = (AuctionAction) Component.getInstance(AuctionAction.class, true);
      action.createAuction();
      action.setDetails(title, description, categoryId);
   }]]></programlisting>
   
    <para>
      And here's the code from <literal>AuctionAction</literal>:
    </para>
    
    <programlisting><![CDATA[   @Begin
   public void createAuction()
   {
      auction = new Auction();
      auction.setAccount(authenticatedAccount);
      auction.setStatus(Auction.STATUS_UNLISTED);        
      durationDays = DEFAULT_AUCTION_DURATION;
   }]]></programlisting>
   
    <para>
      From this we can see how web services can participate in long running conversations, by acting as a facade
      and delegating the real work to a conversational Seam component.
    </para>

  </sect1>


</chapter>
    <chapter id="remoting">
  <title>Remoting</title>
  <para> Seam provides a convenient method of remotely accessing components from a web page, using AJAX (Asynchronous
    Javascript and XML). The framework for this functionality is provided with almost no up-front development effort -
    your components only require simple annotating to become accessible via AJAX. This chapter describes the steps
    required to build an AJAX-enabled web page, then goes on to explain the features of the Seam Remoting framework in
    more detail. </para>

  <section>
    <title>Configuration</title>
    <para> To use remoting, the Seam Resource servlet must first be configured in your <literal>web.xml</literal> file: </para>

    <programlisting><![CDATA[<servlet>
  <servlet-name>Seam Resource Servlet</servlet-name>
  <servlet-class>org.jboss.seam.servlet.SeamResourceServlet</servlet-class>
</servlet>

<servlet-mapping>
  <servlet-name>Seam Resource Servlet</servlet-name>
  <url-pattern>/seam/resource/*</url-pattern>
</servlet-mapping>]]></programlisting>

    <para> The next step is to import the necessary Javascript into your web page. There are a minimum of two scripts
      that must be imported. The first one contains all the client-side framework code that enables remoting
      functionality: </para>

    <programlisting><![CDATA[<script type="text/javascript" src="seam/resource/remoting/resource/remote.js"></script>]]></programlisting>

    <para> The second script contains the stubs and type definitions for the components you wish to call. It is
      generated dynamically based on the local interface of your components, and includes type definitions for all of
      the classes that can be used to call the remotable methods of the interface. The name of the script reflects the
      name of your component. For example, if you have a stateless session bean annotated with
        <literal>@Name("customerAction")</literal>, then your script tag should look like this: </para>

    <programlisting><![CDATA[<script type="text/javascript" 
          src="seam/resource/remoting/interface.js?customerAction"></script>]]></programlisting>

    <para> If you wish to access more than one component from the same page, then include them all as parameters of your
      script tag: </para>

    <programlisting><![CDATA[<script type="text/javascript" 
        src="seam/resource/remoting/interface.js?customerAction&accountAction"></script>]]></programlisting>
        
        
    <para>
      Alternatively, you may use the <literal>s:remote</literal> tag to import the required Javascript.  Separate each
      component or class name you wish to import with a comma: 
    </para>
    
    <programlisting><![CDATA[
  <s:remote include="customerAction,accountAction"/>    
    ]]></programlisting>

  </section>

  <section>
    <title>The "Seam" object</title>

    <para> Client-side interaction with your components is all performed via the <literal>Seam</literal> Javascript
      object. This object is defined in <literal>remote.js</literal>, and you'll be using it to make asynchronous calls
      against your component. It is split into two areas of functionality; <literal>Seam.Component</literal> contains
      methods for working with components and <literal>Seam.Remoting</literal> contains methods for executing remote
      requests. The easiest way to become familiar with this object is to start with a simple example. </para>

    <section>
      <title>A Hello World example</title>

      <para> Let's step through a simple example to see how the <literal>Seam</literal> object works. First of all,
        let's create a new Seam component called <literal>helloAction</literal>. </para>

      <programlisting><![CDATA[@Stateless
@Name("helloAction")
public class HelloAction implements HelloLocal {
    public String sayHello(String name) {
        return "Hello, " + name;
    }
}]]></programlisting>

      <para>You also need to create a local interface for our new component - take special note of the
          <literal>@WebRemote</literal> annotation, as it's required to make our method accessible via remoting:</para>

      <programlisting><![CDATA[@Local
public interface HelloLocal {
  @WebRemote
  public String sayHello(String name);
}]]></programlisting>

      <para> That's all the server-side code we need to write. Now for our web page - create a new page and import the 
          <literal>helloAction</literal> component: </para>

      <programlisting><![CDATA[<s:remote include="helloAction"/>]]></programlisting>

      <para> To make this a fully interactive user experience, let's add a button to our page: </para>

      <programlisting><![CDATA[<button onclick="javascript:sayHello()">Say Hello</button>]]></programlisting>

      <para> We'll also need to add some more script to make our button actually do something when it's clicked: </para>

      <programlisting><![CDATA[<script type="text/javascript">
  //<![CDATA[

  function sayHello() {
    var name = prompt("What is your name?");
    Seam.Component.getInstance("helloAction").sayHello(name, sayHelloCallback);
  }

  function sayHelloCallback(result) {
    alert(result);
  }

   // ]]>]]&gt;<![CDATA[
</script>]]></programlisting>

      <para> We're done! Deploy your application and browse to your page. Click the button, and enter a name when
        prompted. A message box will display the hello message confirming that the call was successful. If you want to
        save some time, you'll find the full source code for this Hello World example in Seam's
          <literal>/examples/remoting/helloworld</literal> directory. </para>

      <para> So what does the code of our script actually do? Let's break it down into smaller pieces. To start with,
        you can see from the Javascript code listing that we have implemented two methods - the first method is
        responsible for prompting the user for their name and then making a remote request. Take a look at the following
        line: </para>

      <programlisting>Seam.Component.getInstance("helloAction").sayHello(name, sayHelloCallback);</programlisting>

      <para> The first section of this line, <literal>Seam.Component.getInstance("helloAction")</literal> returns a
        proxy, or "stub" for our <literal>helloAction</literal> component. We can invoke the methods of our component
        against this stub, which is exactly what happens with the remainder of the line: <literal>sayHello(name,
          sayHelloCallback);</literal>. </para>

      <para> What this line of code in its completeness does, is invoke the <literal>sayHello</literal> method of our
        component, passing in <literal>name</literal> as a parameter. The second parameter,
        <literal>sayHelloCallback</literal> isn't a parameter of our component's <literal>sayHello</literal> method,
        instead it tells the Seam Remoting framework that once it receives the response to our request, it should pass
        it to the <literal>sayHelloCallback</literal> Javascript method. This callback parameter is entirely optional,
        so feel free to leave it out if you're calling a method with a <literal>void</literal> return type or if you
        don't care about the result. </para>

      <para> The <literal>sayHelloCallback</literal> method, once receiving the response to our remote request then pops
        up an alert message displaying the result of our method call. </para>

    </section>

    <section>
      <title>Seam.Component</title>

      <para> The <literal>Seam.Component</literal> Javascript object provides a number of client-side methods for
        working with your Seam components. The two main methods, <literal>newInstance()</literal> and
          <literal>getInstance()</literal> are documented in the following sections however their main difference is
        that <literal>newInstance()</literal> will always create a new instance of a component type, and
          <literal>getInstance()</literal> will return a singleton instance. </para>

      <section>
        <title>Seam.Component.newInstance()</title>
        <para> Use this method to create a new instance of an entity or Javabean component. The object returned by this
          method will have the same getter/setter methods as its server-side counterpart, or alternatively if you wish
          you can access its fields directly. Take the following Seam entity component for example: </para>

        <programlisting>@Name("customer")
@Entity
public class Customer implements Serializable
{
  private Integer customerId;
  private String firstName;
  private String lastName;
    
  @Column public Integer getCustomerId() { 
    return customerId; 
  }
    
  public void setCustomerId(Integer customerId} { 
    this.customerId = customerId; 
  }
  
  @Column public String getFirstName() { 
    return firstName; 
  }
  
  public void setFirstName(String firstName) {
    this.firstName = firstName; 
  }
  
  @Column public String getLastName() {
    return lastName;
  }
  
  public void setLastName(String lastName) {
    this.lastName = lastName;
  }
}</programlisting>

        <para> To create a client-side Customer you would write the following code: </para>

        <programlisting>var customer = Seam.Component.newInstance("customer");</programlisting>

        <para> Then from here you can set the fields of the customer object: </para>

        <programlisting>customer.setFirstName("John");
// Or you can set the fields directly
customer.lastName = "Smith";</programlisting>

      </section>

      <section>
        <title>Seam.Component.getInstance()</title>

        <para> The <literal>getInstance()</literal> method is used to get a reference to a Seam session bean component
          stub, which can then be used to remotely execute methods against your component. This method returns a
          singleton for the specified component, so calling it twice in a row with the same component name will return
          the same instance of the component. </para>

        <para> To continue our example from before, if we have created a new <literal>customer</literal> and we now wish
          to save it, we would pass it to the <literal>saveCustomer()</literal> method of our
          <literal>customerAction</literal> component: </para>

        <programlisting>Seam.Component.getInstance("customerAction").saveCustomer(customer);</programlisting>
      </section>

      <section>
        <title>Seam.Component.getComponentName()</title>

        <para> Passing an object into this method will return its component name if it is a component, or
          <literal>null</literal> if it is not. </para>

        <programlisting>if (Seam.Component.getComponentName(instance) == "customer")
  alert("Customer");
else if (Seam.Component.getComponentName(instance) == "staff")
  alert("Staff member");</programlisting>
      </section>

    </section>

    <section>
      <title>Seam.Remoting</title>

      <para> Most of the client side functionality for Seam Remoting is contained within the
        <literal>Seam.Remoting</literal> object. While you shouldn't need to directly call most of its methods, there
        are a couple of important ones worth mentioning. </para>

      <section>
        <title>Seam.Remoting.createType()</title>

        <para> If your application contains or uses Javabean classes that aren't Seam components, you may need to create
          these types on the client side to pass as parameters into your component method. Use the
          <literal>createType()</literal> method to create an instance of your type. Pass in the fully qualified Java
          class name as a parameter: </para>

        <programlisting>var widget = Seam.Remoting.createType("com.acme.widgets.MyWidget");</programlisting>
      </section>

      <section>
        <title>Seam.Remoting.getTypeName()</title>

        <para> This method is the equivalent of <literal>Seam.Component.getComponentName()</literal> but for
          non-component types. It will return the name of the type for an object instance, or <literal>null</literal> if
          the type is not known. The name is the fully qualified name of the type's Java class. </para>
      </section>
    </section>
  </section>
  
  <section>
    <title>Evaluating EL Expressions</title>
    
    <para>
      Seam Remoting also supports the evaluation of EL expressions, which provides another convenient method for retrieving
      data from the server.  Using the <literal>Seam.Remoting.eval()</literal> function, an EL expression can be remotely
      evaluated on the server and the resulting value returned to a client-side callback method.  This function accepts two
      parameters, the first being the EL expression to evaluate, and the second being the callback method to invoke with the
      value of the expression.  Here's an example:
    </para>
    
    <programlisting><![CDATA[  function customersCallback(customers) {
    for (var i = 0; i < customers.length; i++) {
      alert("Got customer: " + customers[i].getName());
    }    
  }
    
  Seam.Remoting.eval("#{customers}", customersCallback);  
    ]]></programlisting>
    
    <para>
      In this example, the expression <literal>#{customers}</literal> is evaluated by Seam, and the value of the expression
      (in this case a list of Customer objects) is returned to the <literal>customersCallback()</literal> method.  It is 
      important to remember that the objects returned this way must have their types imported (via <literal>s:remote</literal>)
      to be able to work with them in Javascript.  So to work with a list of <literal>customer</literal> objects,
      it is required to import the <literal>customer</literal> type:
    </para>
    
    <programlisting><![CDATA[<s:remote include="customer"/>]]></programlisting>
  </section>

  <section>
    <title>Client Interfaces</title>

    <para> In the configuration section above, the interface, or "stub" for our component is imported into our page 
        either via <literal>seam/resource/remoting/interface.js</literal>: or using the <literal>s:remote</literal>
        tag:

    <programlisting><![CDATA[<script type="text/javascript" 
        src="seam/resource/remoting/interface.js?customerAction"></script>]]></programlisting>
        
    <programlisting><![CDATA[<s:remote include="customerAction"/>]]></programlisting>
</para>
    <para> By including this script in our page, the interface definitions for our component, plus any other components
      or types that are required to execute the methods of our component are generated and made available for the
      remoting framework to use. </para>

    <para> There are two types of client stub that can be generated, "executable" stubs and "type" stubs. Executable
      stubs are behavioural, and are used to execute methods against your session bean components, while type stubs
      contain state and represent the types that can be passed in as parameters or returned as a result. </para>

    <para> The type of client stub that is generated depends on the type of your Seam component. If the component is a
      session bean, then an executable stub will be generated, otherwise if it's an entity or JavaBean, then a type stub
      will be generated. There is one exception to this rule; if your component is a JavaBean (ie it is not a session
      bean nor an entity bean) and any of its methods are annotated with @WebRemote, then an executable stub will be
      generated for it instead of a type stub. This allows you to use remoting to call methods of your JavaBean
      components in a non-EJB environment where you don't have access to session beans. </para>

  </section>

  <section>
    <title>The Context</title>

    <para> The Seam Remoting Context contains additional information which is sent and received as part of a remoting
      request/response cycle. At this stage it only contains the conversation ID but may be expanded in the future. </para>

    <section>
      <title>Setting and reading the Conversation ID</title>


    <para> If you intend on using remote calls within the scope of a conversation then you need to be able to read or
      set the conversation ID in the Seam Remoting Context. To read the conversation ID after making a remote request
      call <literal>Seam.Remoting.getContext().getConversationId()</literal>. To set the conversation ID before making a
      request, call <literal>Seam.Remoting.getContext().setConversationId()</literal>. </para>

    <para> If the conversation ID hasn't been explicitly set with
        <literal>Seam.Remoting.getContext().setConversationId()</literal>, then it will be automatically assigned the
      first valid conversation ID that is returned by any remoting call. If you are working with multiple conversations
      within your page, then you may need to explicitly set the conversation ID before each call. If you are working
      with just a single conversation, then you don't need to do anything special. </para>
    </section>      
    <section>
      <title>Remote calls within the current conversation scope</title>
      
      <para> In some circumstances it may be required to make a remote call within the scope of the
        current view's conversation.  To do this, you must explicitly set the conversation ID to that
        of the view before making the remote call.  This small snippet of JavaScript will set the
        conversation ID that is used for remoting calls to the current view's conversation ID: </para>
        
      <programlisting><![CDATA[Seam.Remoting.getContext().setConversationId( #{conversation.id} );]]></programlisting>
    </section>
  </section>

  <section>
    <title>Batch Requests</title>

    <para> Seam Remoting allows multiple component calls to be executed within a single request. It is recommended that
      this feature is used wherever it is appropriate to reduce network traffic. </para>

    <para> The method <literal>Seam.Remoting.startBatch()</literal> will start a new batch, and any component calls
      executed after starting a batch are queued, rather than being sent immediately. When all the desired component
      calls have been added to the batch, the <literal>Seam.Remoting.executeBatch()</literal> method will send a single
      request containing all of the queued calls to the server, where they will be executed in order. After the calls
      have been executed, a single response containining all return values will be returned to the client and the
      callback functions (if provided) triggered in the same order as execution. </para>

    <para> If you start a new batch via the <literal>startBatch()</literal> method but then decide you don't want to
      send it, the <literal>Seam.Remoting.cancelBatch()</literal> method will discard any calls that were queued and
      exit the batch mode. </para>

    <para> To see an example of a batch being used, take a look at <literal>/examples/remoting/chatroom</literal>.
    </para>
  </section>

  <section>
    <title>Working with Data types</title>

    <section>
      <title>Primitives / Basic Types</title>

      <para> This section describes the support for basic data types. On the server side these values are generally
        compatible with either their primitive type or their corresponding wrapper class. </para>

      <section>
        <title>String</title>

        <para> Simply use Javascript String objects when setting String parameter values. </para>
      </section>

      <section>
        <title>Number</title>

        <para> There is support for all number types supported by Java. On the client side, number values are always
          serialized as their String representation and then on the server side they are converted to the correct
          destination type. Conversion into either a primitive or wrapper type is supported for <literal>Byte</literal>,
            <literal>Double</literal>, <literal>Float</literal>, <literal>Integer</literal>, <literal>Long</literal> and
            <literal>Short</literal> types. </para>
      </section>

      <section>
        <title>Boolean</title>

        <para> Booleans are represented client side by Javascript Boolean values, and server side by a Java boolean.
        </para>
      </section>
    </section>

    <section>
      <title>JavaBeans</title>

      <para> In general these will be either Seam entity or JavaBean components, or some other non-component class. Use
        the appropriate method (either <literal>Seam.Component.newInstance()</literal> for Seam components or
          <literal>Seam.Remoting.createType()</literal> for everything else) to create a new instance of the object. </para>

      <para> It is important to note that only objects that are created by either of these two methods should be used as
        parameter values, where the parameter is not one of the other valid types mentioned anywhere else in this
        section. In some situations you may have a component method where the exact parameter type cannot be determined,
        such as: </para>

      <programlisting>@Name("myAction")
public class MyAction implements MyActionLocal {
  public void doSomethingWithObject(Object obj) {
    // code
  }
}</programlisting>

      <para> In this case you might want to pass in an instance of your <literal>myWidget</literal> component, however
        the interface for <literal>myAction</literal> won't include <literal>myWidget</literal> as it is not directly
        referenced by any of its methods. To get around this, <literal>MyWidget</literal> needs to be explicitly
        imported: </para>

      <programlisting><![CDATA[<s:remote include="myAction,myWidget"/>]]></programlisting>

      <para> This will then allow a <literal>myWidget</literal> object to be created with
          <literal>Seam.Component.newInstance("myWidget")</literal>, which can then be passed to
          <literal>myAction.doSomethingWithObject()</literal>. </para>

    </section>

    <section>
      <title>Dates and Times</title>

      <para> Date values are serialized into a String representation that is accurate to the millisecond. On the client
        side, use a Javascript Date object to work with date values. On the server side, use any
        <literal>java.util.Date</literal> (or descendent, such as <literal>java.sql.Date</literal> or
          <literal>java.sql.Timestamp</literal> class. </para>
    </section>

    <section>
      <title>Enums</title>

      <para> On the client side, enums are treated the same as Strings. When setting the value for an enum parameter,
        simply use the String representation of the enum. Take the following component as an example: </para>

      <programlisting>@Name("paintAction")
public class paintAction implements paintLocal {
  public enum Color {red, green, blue, yellow, orange, purple};

  public void paint(Color color) {
    // code
  }    
} </programlisting>

      <para> To call the <literal>paint()</literal> method with the color <literal>red</literal>, pass the parameter
        value as a String literal: </para>

      <programlisting>Seam.Component.getInstance("paintAction").paint("red");</programlisting>

      <para> The inverse is also true - that is, if a component method returns an enum parameter (or contains an enum
        field anywhere in the returned object graph) then on the client-side it will be represented as a String. </para>
    </section>

    <section>
      <title>Collections</title>

      <section>
        <title>Bags</title>

        <para> Bags cover all collection types including arrays, collections, lists, sets, (but excluding Maps - see the
          next section for those), and are implemented client-side as a Javascript array. When calling a component
          method that accepts one of these types as a parameter, your parameter should be a Javascript array. If a
          component method returns one of these types, then the return value will also be a Javascript array. The
          remoting framework is clever enough on the server side to convert the bag to an appropriate type for the
          component method call. </para>
      </section>

      <section>
        <title>Maps</title>

        <para> As there is no native support for Maps within Javascript, a simple Map implementation is provided with
          the Seam Remoting framework. To create a Map which can be used as a parameter to a remote call, create a new
            <literal>Seam.Remoting.Map</literal> object: </para>

        <programlisting>var map = new Seam.Remoting.Map();</programlisting>

        <para> This Javascript implementation provides basic methods for working with Maps: <literal>size()</literal>,
            <literal>isEmpty()</literal>, <literal>keySet()</literal>, <literal>values()</literal>,
          <literal>get(key)</literal>, <literal>put(key, value)</literal>, <literal>remove(key)</literal> and
            <literal>contains(key)</literal>. Each of these methods are equivalent to their Java counterpart. Where the
          method returns a collection, such as <literal>keySet()</literal> and <literal>values()</literal>, a Javascript
          Array object will be returned that contains the key or value objects (respectively). </para>
      </section>
    </section>
  </section>

  <section>
    <title>Debugging</title>

    <para> To aid in tracking down bugs, it is possible to enable a debug mode which will display the contents of all
      the packets send back and forth between the client and server in a popup window. To enable debug mode, either
      execute the <literal>setDebug()</literal> method in Javascript: </para>

    <programlisting>Seam.Remoting.setDebug(true);</programlisting>

    <para> Or configure it via components.xml: </para>

    <programlisting>&lt;remoting:remoting debug="true"/&gt;</programlisting>

    <para> To turn off debugging, call <literal>setDebug(false)</literal>. If you want to write your own messages to the
      debug log, call <literal>Seam.Remoting.log(message)</literal>. </para>
  </section>

  <section>
    <title>The Loading Message</title>

    <para> The default loading message that appears in the top right corner of the screen can be modified, its rendering
      customised or even turned off completely. </para>

    <section>
      <title>Changing the message</title>

      <para> To change the message from the default "Please Wait..." to something different, set the value of
          <literal>Seam.Remoting.loadingMessage</literal>: </para>

      <programlisting>Seam.Remoting.loadingMessage = "Loading..."; </programlisting>
    </section>

    <section>
      <title>Hiding the loading message</title>

      <para> To completely suppress the display of the loading message, override the implementation of
          <literal>displayLoadingMessage()</literal> and <literal>hideLoadingMessage()</literal> with functions that
        instead do nothing: </para>

      <programlisting>// don't display the loading indicator
Seam.Remoting.displayLoadingMessage = function() {};
Seam.Remoting.hideLoadingMessage = function() {};</programlisting>
    </section>

    <section>
      <title>A Custom Loading Indicator</title>

      <para> It is also possible to override the loading indicator to display an animated icon, or anything else that
        you want. To do this override the <literal>displayLoadingMessage()</literal> and
        <literal>hideLoadingMessage()</literal> messages with your own implementation: </para>

      <programlisting>  Seam.Remoting.displayLoadingMessage = function() {
    // Write code here to display the indicator
  };
  
  Seam.Remoting.hideLoadingMessage = function() {
    // Write code here to hide the indicator
  };</programlisting>
    </section>
  </section>

  <section>
    <title>Controlling what data is returned</title>

    <para> When a remote method is executed, the result is serialized into an XML response that is returned to the
      client. This response is then unmarshaled by the client into a Javascript object. For complex types (i.e.
      Javabeans) that include references to other objects, all of these referenced objects are also serialized as part
      of the response. These objects may reference other objects, which may reference other objects, and so forth. If
      left unchecked, this object "graph" could potentially be enormous, depending on what relationships exist between
      your objects. And as a side issue (besides the potential verbosity of the response), you might also wish to
      prevent sensitive information from being exposed to the client. </para>

    <para> Seam Remoting provides a simple means to "constrain" the object graph, by specifying the
      <literal>exclude</literal> field of the remote method's <literal>@WebRemote</literal> annotation. This field
      accepts a String array containing one or more paths specified using dot notation. When invoking a remote method,
      the objects in the result's object graph that match these paths are excluded from the serialized result packet. </para>

    <para> For all our examples, we'll use the following <literal>Widget</literal> class: </para>

    <programlisting>@Name("widget")
public class Widget
{
  private String value;
  private String secret;
  private Widget child;
  private Map&lt;String,Widget&gt; widgetMap;
  private List&lt;Widget&gt; widgetList;
  
  // getters and setters for all fields
}</programlisting>

    <section>
      <title>Constraining normal fields</title>

      <para> If your remote method returns an instance of <literal>Widget</literal>, but you don't want to expose the
          <literal>secret</literal> field because it contains sensitive information, you would constrain it like this: </para>

      <programlisting>@WebRemote(exclude = {"secret"})
public Widget getWidget(); </programlisting>

      <para> The value "secret" refers to the <literal>secret</literal> field of the returned object. Now, suppose that
        we don't care about exposing this particular field to the client. Instead, notice that the
        <literal>Widget</literal> value that is returned has a field <literal>child</literal> that is also a
          <literal>Widget</literal>. What if we want to hide the <literal>child</literal>'s <literal>secret</literal>
        value instead? We can do this by using dot notation to specify this field's path within the result's object
        graph: </para>

      <programlisting>@WebRemote(exclude = {"child.secret"})
public Widget getWidget();</programlisting>

    </section>

    <section>
      <title>Constraining Maps and Collections</title>

      <para> The other place that objects can exist within an object graph are within a <literal>Map</literal> or some
        kind of collection (<literal>List</literal>, <literal>Set</literal>, <literal>Array</literal>, etc). Collections
        are easy, and are treated like any other field. For example, if our <literal>Widget</literal> contained a list
        of other <literal>Widget</literal>s in its <literal>widgetList</literal> field, to constrain the
        <literal>secret</literal> field of the <literal>Widget</literal>s in this list the annotation would look like
        this: </para>

      <programlisting>@WebRemote(exclude = {"widgetList.secret"})
  public Widget getWidget();</programlisting>

      <para> To constrain a <literal>Map</literal>'s key or value, the notation is slightly different. Appending
          <literal>[key]</literal> after the <literal>Map</literal>'s field name will constrain the
        <literal>Map</literal>'s key object values, while <literal>[value]</literal> will constrain the value object
        values. The following example demonstrates how the values of the <literal>widgetMap</literal> field have their
          <literal>secret</literal> field constrained: </para>

      <programlisting>@WebRemote(exclude = {"widgetMap[value].secret"})
public Widget getWidget(); </programlisting>
    </section>

    <section>
      <title>Constraining objects of a specific type</title>

      <para> There is one last notation that can be used to constrain the fields of a type of object no matter where in
        the result's object graph it appears. This notation uses either the name of the component (if the object is a
        Seam component) or the fully qualified class name (only if the object is not a Seam component) and is expressed
        using square brackets: </para>

      <programlisting>@WebRemote(exclude = {"[widget].secret"})
public Widget getWidget(); </programlisting>

    </section>

    <section>
      <title>Combining Constraints</title>

      <para> Constraints can also be combined, to filter objects from multiple paths within the object graph: </para>

      <programlisting>@WebRemote(exclude = {"widgetList.secret", "widgetMap[value].secret"})
public Widget getWidget();</programlisting>
    </section>

  </section>

  <section>
    <title>JMS Messaging</title>

    <para> Seam Remoting provides experimental support for JMS Messaging. This section describes the JMS support that is
      currently implemented, but please note that this may change in the future. It is currently not recommended that
      this feature is used within a production environment. </para>

    <section>
      <title>Configuration</title>

      <para> Before you can subscribe to a JMS topic, you must first configure a list of the topics that can be
        subscribed to by Seam Remoting. List the topics under
          <literal>org.jboss.seam.remoting.messaging.subscriptionRegistry.allowedTopics</literal> in
          <literal>seam.properties</literal>, <literal>web.xml</literal> or <literal>components.xml</literal>. </para>

      <programlisting><![CDATA[<remoting:remoting poll-timeout="5" poll-interval="1"/>]]></programlisting>

    </section>

    <section>
      <title>Subscribing to a JMS Topic</title>

      <para> The following example demonstrates how to subscribe to a JMS Topic: </para>

      <programlisting>function subscriptionCallback(message)
{
  if (message instanceof Seam.Remoting.TextMessage)
    alert("Received message: " + message.getText());
}           

Seam.Remoting.subscribe("topicName", subscriptionCallback);</programlisting>

      <para> The <literal>Seam.Remoting.subscribe()</literal> method accepts two parameters, the first being the name of
        the JMS Topic to subscribe to, the second being the callback function to invoke when a message is received. </para>

      <para> There are two types of messages supported, Text messages and Object messages. If you need to test for the
        type of message that is passed to your callback function you can use the <literal>instanceof</literal> operator
        to test whether the message is a <literal>Seam.Remoting.TextMessage</literal> or
          <literal>Seam.Remoting.ObjectMessage</literal>. A <literal>TextMessage</literal> contains the text value in
        its <literal>text</literal> field (or alternatively call <literal>getText()</literal> on it), while an
          <literal>ObjectMessage</literal> contains its object value in its <literal>value</literal> field (or call its
          <literal>getValue()</literal> method). </para>
    </section>

    <section>
      <title>Unsubscribing from a Topic</title>

      <para> To unsubscribe from a topic, call <literal>Seam.Remoting.unsubscribe()</literal> and pass in the topic
        name: </para>

      <programlisting>Seam.Remoting.unsubscribe("topicName");</programlisting>
    </section>

    <section>
      <title>Tuning the Polling Process</title>

      <para> There are two parameters which you can modify to control how polling occurs. The first one is
          <literal>Seam.Remoting.pollInterval</literal>, which controls how long to wait between subsequent polls for
        new messages. This parameter is expressed in seconds, and its default setting is 10. </para>

      <para> The second parameter is <literal>Seam.Remoting.pollTimeout</literal>, and is also expressed as seconds. It
        controls how long a request to the server should wait for a new message before timing out and sending an empty
        response. Its default is 0 seconds, which means that when the server is polled, if there are no messages ready
        for delivery then an empty response will be immediately returned. </para>

      <para> Caution should be used when setting a high <literal>pollTimeout</literal> value; each request that has to
        wait for a message means that a server thread is tied up until a message is received, or until the request times
        out. If many such requests are being served simultaneously, it could mean a large number of threads become tied
        up because of this reason. </para>

      <para> It is recommended that you set these options via components.xml, however they can be overridden via
        Javascript if desired. The following example demonstrates how to configure the polling to occur much more
        aggressively. You should set these parameters to suitable values for your application: </para>

      <para> Via components.xml: </para>

      <programlisting><![CDATA[<remoting:remoting poll-timeout="5" poll-interval="1"/>]]></programlisting>    

      <para> Via JavaScript: </para>

      <programlisting>// Only wait 1 second between receiving a poll response and sending the next poll request.
Seam.Remoting.pollInterval = 1;
  
// Wait up to 5 seconds on the server for new messages
Seam.Remoting.pollTimeout = 5;   </programlisting>

    </section>

  </section>

</chapter>
    <chapter id="gwt">
  <title>Seam and the Google Web Toolkit</title>

  <para>
    For those that prefer to use the Google Web Toolkit (GWT) to develop dynamic AJAX applications, Seam provides
    an integration layer that allows GWT widgets to interact directly with Seam components.
  </para>
  
  <para>
    To use GWT, we assume that you are already familiar with the GWT tools - more information can be found at
    <ulink url="http://code.google.com/webtoolkit/">http://code.google.com/webtoolkit/</ulink>.  This chapter 
    does not attempt to explain how GWT works or how to use it.
  </para>
  
  <section>
    <title>Configuration</title>
    
    <para>
      There is no special configuration required to use GWT in a Seam application, however the Seam resource servlet 
      must be installed.  See <xref linkend="configuration"/> for details.
    </para>
  
  </section>
  
  <section>
    <title>Preparing your component</title>
    
    <para>
      The first step in preparing a Seam component to be called via GWT, is to create both synchronous and
      asynchronous service interfaces for the methods you wish to call.  Both of these interfaces should extend the
      GWT interface <literal>com.google.gwt.user.client.rpc.RemoteService</literal>:
    </para> 
  
    <programlisting><![CDATA[  public interface MyService extends RemoteService
  {
    public String askIt(String question);      
  }]]></programlisting>
  
    <para>
      The asynchronous interface should be identical, except that it also contains an additional 
      <literal>AsyncCallback</literal> parameter for each of the methods it declares:    
    </para>
    
    <programlisting><![CDATA[  public interface MyServiceAsync extends RemoteService 
  {
    public void askIt(String question, AsyncCallback callback);
  }]]></programlisting>

    <para>
      The asynchronous interface, in this example <literal>MyServiceAsync</literal>, will be implemented by GWT and
      should never be implemented directly.
    </para>
    
    <para>
      The next step, is to create a Seam component that implements the synchronous interface:
    </para>
    
    <programlisting><![CDATA[  @Name("org.jboss.seam.example.remoting.gwt.client.MyService")
  public class ServiceImpl implements MyService
  {
    @WebRemote
    public String askIt(String question)
    {
      if (!validate(question)) 
      {
        throw new IllegalStateException("Hey, this shouldn't happen, I checked on the client, " +
               "but its always good to double check.");
      }
      return "42. Its the real question that you seek now.";
    }
   
    public boolean validate(String q) 
    {
      ValidationUtility util = new ValidationUtility();
      return util.isValid(q);
    }
  }]]></programlisting>

    <para>
      The methods that should be made accessible via GWT need to be annotated with the 
      <literal>@WebRemote</literal> annotation, which is required for all web-remoteable methods.
    </para>
  </section>
  
  <section>
    <title>Hooking up a GWT widget to the Seam component</title>
    
    <para>
      The next step, is to write a method that returns the asynchronous interface to the component.  This method
      can be located inside the widget class, and will be used by the widget to obtain a reference to the
      asynchronous client stub:
    </para>
    
    <programlisting><![CDATA[   private MyServiceAsync getService() 
   {       
      String endpointURL = GWT.getModuleBaseURL() + "seam/resource/gwt";      
      
      MyServiceAsync svc = (MyServiceAsync) GWT.create(MyService.class);
      ((ServiceDefTarget) svc).setServiceEntryPoint(endpointURL);
      return svc;     
   }]]></programlisting>
   
    <para>
       The final step is to write the widget code that invokes the method on the client stub.  The following example
       creates a simple user interface with a label, text input and a button:
    </para>
    
    <programlisting><![CDATA[
public class AskQuestionWidget extends Composite
{
   private AbsolutePanel panel = new AbsolutePanel();
   
   public AskQuestionWidget() 
   {      
      Label lbl = new Label("OK, what do you want to know?");
      panel.add(lbl);
      final TextBox box = new TextBox();
      box.setText("What is the meaning of life?");
      panel.add(box);
      Button ok = new Button("Ask");
      ok.addClickListener(new ClickListener() 
      {
         public void onClick(Widget w)
         {
            ValidationUtility valid = new ValidationUtility();
            if (!valid.isValid(box.getText())) 
            {
               Window.alert("A question has to end with a '?'");
            } 
            else 
            {
               askServer(box.getText());
            } 
         }
      });
      panel.add(ok);
      
      initWidget(panel);
   }

   private void askServer(String text)
   {
      getService().askIt(text, new AsyncCallback() 
      {
         public void onFailure(Throwable t)
         {
            Window.alert(t.getMessage());
         }

         public void onSuccess(Object data)
         {
            Window.alert((String) data);
         }         
      });      
   }
   
   ...    
    ]]></programlisting>
    
    
    <para>
      When clicked, the button invokes the <literal>askServer()</literal> method passing the contents of the input text (in this
      example, validation is also performed to ensure that the input is a valid question).  The <literal>askServer()</literal>
      method acquires a reference to the asynchronous client stub (returned by the <literal>getService()</literal> method)
      and invokes the <literal>askIt()</literal> method.  The result (or error message if the call fails) is shown in an alert window.      
    </para>
    
    <mediaobject>
      <imageobject role="fo">
        <imagedata fileref="images/gwt-helloworld.png" align="center"/>
      </imageobject>
      <imageobject role="html">
        <imagedata fileref="../shared/images/gwt-helloworld.png" align="center"/>
      </imageobject>
    </mediaobject>    
    
    
    <para>
      The complete code for this example can be found in the Seam distribution in the <literal>examples/remoting/gwt</literal>
      directory.
    </para>
  </section>
  
  <section>
    <title>GWT Ant Targets</title>
  
    <para>
      For deployment of GWT apps, there is a compile-to-Javascript step (which compacts and obfuscates the code).  There is an
      ant utility which can be used instead of the command line or GUI utility that GWT provides.  To use this, you will need
      to have the ant task jar in your ant classpath, as well as GWT downloaded (which you will need for hosted mode anyway).
    </para>
    
    <para>
      Then, in your ant file, place (near the top of your ant file):
    </para>
    
    <programlisting><![CDATA[  <taskdef uri="antlib:de.samaflost.gwttasks"
                resource="de/samaflost/gwttasks/antlib.xml"
                classpath="./lib/gwttasks.jar"/>
   
  <property file="build.properties"/>]]></programlisting>
  
    <para>
      Create a <literal>build.properties</literal> file, which has the contents:
    </para>
    
    <programlisting><![CDATA[gwt.home=/gwt_home_dir]]></programlisting>
    
    <para>
      This of course should point to the directory where GWT is installed.  Then to use it, create a target:
    </para>
    
    <programlisting><![CDATA[  <!-- the following are are handy utilities for doing GWT development.
      To use GWT, you will of course need to download GWT seperately -->
  <target name="gwt-compile">
      <!-- in this case, we are "re homing" the gwt generated stuff, so in this case
      we can only have one GWT module - we are doing this deliberately to keep the URL short -->
      <delete>
          <fileset dir="view"/>
      </delete>
      <gwt:compile outDir="build/gwt"
          gwtHome="${gwt.home}"
          classBase="${gwt.module.name}"
          sourceclasspath="src"/>
      <copy todir="view">
          <fileset dir="build/gwt/${gwt.module.name}"/>
      </copy>
  </target>]]></programlisting>
  
    <para>
      This target when called will compile the GWT application, and copy it to the specified directory (which would be
      in the <literal>webapp</literal> part of your war - remember GWT generates HTML and Javascript artifacts).  You
      never edit the resulting code that <literal>gwt-compile</literal> generates - you always edit in the GWT source
      directory.
    </para>
    
    <para>
      Remember that GWT comes with a hosted mode browser - you should be using that if you are developing with GWT.  If you
      aren't using that, and are just compiling it each time, you aren't getting the most out of the toolkit (in fact, if
      you can't or won't use the hosted mode browser, I would go far as to say you should NOT be using GWT at all - it's
      that valuable!).
    </para>
    
  </section>
  

</chapter>
    <chapter id="spring">

    <title>Spring Framework integration</title>

    <para>The Spring integration module allows easy migration of Spring-based projects to Seam and allows Spring
        applications to take advantage of key Seam features like conversations and Seam's more sophisticated persistence
        context management.</para>

    <para>Note! The Spring integration code is included in the jboss-seam-ioc library.  This dependency is required for
    all seam-spring integration techniques covered in this chapter.</para>

    <para>Seam's support for Spring provides the ability to: </para>

    <itemizedlist>
        <listitem>
            <para>inject Seam component instances into Spring beans</para>
        </listitem>
        <listitem>
            <para>inject Spring beans into Seam components</para>
        </listitem>
        <listitem>
            <para>turn Spring beans into Seam components</para>
        </listitem>
        <listitem>
            <para>allow Spring beans to live in any Seam context</para>
        </listitem>
        <listitem>
            <para>start a spring WebApplicationContext with a Seam component</para>
        </listitem>
        <listitem>
            <para>Support for Spring PlatformTransactionManagement</para>
        </listitem>
        <listitem>
            <para>provides a Seam managed replacement for Spring's <literal>OpenEntityManagerInViewFilter</literal> and <literal>OpenSessionInViewFilter</literal></para>
        </listitem>
        <listitem>
            <para>Support for Spring <literal>TaskExecutors</literal> to back <literal>@Asynchronous</literal> calls</para>
        </listitem>
    </itemizedlist>

    <section>
        <title>Injecting Seam components into Spring beans</title>

        <para> Injecting Seam component instances into Spring beans is accomplished using the
                <literal>&lt;seam:instance/&gt;</literal> namespace handler. To enable the Seam namespace
            handler, the Seam namespace must be added to the Spring beans definition file:</para>

        <programlisting><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:seam="http://jboss.com/products/seam/spring-seam"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                        http://jboss.com/products/seam/spring-seam
                        http://jboss.com/products/seam/spring-seam-2.1.xsd">]]></programlisting>

        <para> Now any Seam component may be injected into any Spring bean: </para>

        <programlisting><![CDATA[<bean id="someSpringBean" class="SomeSpringBeanClass" scope="prototype">
    <property name="someProperty">
        <seam:instance name="someComponent"/>
    </property>
</bean>]]></programlisting>

        <para> An EL expression may be used instead of a component name: </para>

        <programlisting><![CDATA[<bean id="someSpringBean" class="SomeSpringBeanClass" scope="prototype">
    <property name="someProperty">
        <seam:instance name="#{someExpression}"/>
    </property>
</bean>]]></programlisting>

        <para> Seam component instances may even be made available for injection into Spring beans by a Spring bean id. </para>

        <programlisting><![CDATA[<seam:instance name="someComponent" id="someSeamComponentInstance"/>

<bean id="someSpringBean" class="SomeSpringBeanClass" scope="prototype">
    <property name="someProperty" ref="someSeamComponentInstance">
</bean>
]]></programlisting>

        <para>Now for the caveat!</para>

        <para> Seam was designed from the ground up to support a stateful component model with multiple contexts. Spring
            was not. Unlike Seam bijection, Spring injection does not occur at method invocation time. Instead,
            injection happens only when the Spring bean is instantiated. So the instance available when the bean is
            instantiated will be the same instance that the bean uses for the entire life of the bean. For example, if a
            Seam <literal>CONVERSATION</literal>-scoped component instance is directly injected into a singleton Spring
            bean, that singleton will hold a reference to the same instance long after the conversation is over! We call
            this problem <emphasis>scope impedance</emphasis>. Seam bijection ensures that scope impedance is maintained
            naturally as an invocation flows through the system. In Spring, we need to inject a proxy of the Seam
            component, and resolve the reference when the proxy is invoked.</para>

        <para>The <literal>&lt;seam:instance/&gt;</literal> tag lets us automatically proxy the Seam component.</para>

        <programlisting><![CDATA[<seam:instance id="seamManagedEM" name="someManagedEMComponent" proxy="true"/>

<bean id="someSpringBean" class="SomeSpringBeanClass">
    <property name="entityManager" ref="seamManagedEM">
</bean>]]></programlisting>

        <para> This example shows one way to use a Seam-managed persistence context from a Spring bean. (For a more robust
            way to use Seam-managed persistence contexts as a replacement for the Spring
                <literal>OpenEntityManagerInView</literal> filter see section on
                <link linkend="spring-persistence">Using a Seam Managed Persistence Context in Spring</link>)</para>
    </section>

    <section>
        <title>Injecting Spring beans into Seam components</title>

        <para> It is even easier to inject Spring beans into Seam component instances. Actually, there are two possible
            approaches: </para>

        <itemizedlist>
            <listitem>
                <para> inject a Spring bean using an EL expression </para>
            </listitem>
            <listitem>
                <para> make the Spring bean a Seam component </para>
            </listitem>
        </itemizedlist>

        <para> We'll discuss the second option in the next section. The easiest approach is to access the Spring beans
            via EL. </para>

        <para> The Spring <literal>DelegatingVariableResolver</literal> is an integration point Spring provides for
            integrating Spring with JSF. This <literal>VariableResolver</literal> makes all Spring beans available in EL
            by their bean id. You'll need to add the <literal>DelegatingVariableResolver</literal> to
                <literal>faces-config.xml</literal>: </para>

        <programlisting><![CDATA[<application>
    <variable-resolver>
        org.springframework.web.jsf.DelegatingVariableResolver
    </variable-resolver>
</application>]]></programlisting>

        <para> Then you can inject Spring beans using <literal>@In</literal>: </para>

        <programlisting><![CDATA[@In("#{bookingService}")
private BookingService bookingService;]]></programlisting>

        <para>The use of Spring beans in EL is not limited to injection. Spring beans may be used anywhere that EL
            expressions are used in Seam: process and pageflow definitions, working memory assertions, etc... </para>

    </section>

    <section>
        <title>Making a Spring bean into a Seam component</title>

        <para> The <literal>&lt;seam:component/&gt;</literal> namespace handler can be used to make any Spring
            bean a Seam component. Just place the <literal>&lt;seam:component/&gt;</literal> tag within the
            declaration of the bean that you wish to be a Seam component: </para>

        <programlisting><![CDATA[<bean id="someSpringBean" class="SomeSpringBeanClass" scope="prototype">
    <seam:component/>
</bean>]]></programlisting>

        <para> By default, <literal>&lt;seam:component/&gt;</literal> will create a <literal>STATELESS</literal>
            Seam component with class and name provided in the bean definition. Occasionally, such as when a
                <literal>FactoryBean</literal> is used, the class of the Spring bean may not be the class appearing in
            the bean definition. In such cases the <literal>class</literal> should be explicitly specified. A Seam
            component name may be explicitly specified in cases where there is potential for a naming conflict. </para>

        <para> The <literal>scope</literal> attribute of <literal>&lt;seam:component/&gt;</literal> may be used
            if you wish the Spring bean to be managed in a particular Seam scope. The Spring bean must be scoped to
                <literal>prototype</literal> if the Seam scope specified is anything other than
            <literal>STATELESS</literal>. Pre-existing Spring beans usually have a fundamentally stateless character, so
            this attribute is not usually needed. </para>

    </section>

    <section>
        <title>Seam-scoped Spring beans</title>

        <para> The Seam integration package also lets you use Seam's contexts as Spring 2.0 style custom scopes. This
            lets you declare any Spring bean in any of Seam's contexts. However, note once again that Spring's component
            model was never architected to support statefulness, so please use this feature with great care. In
            particular, clustering of session or conversation scoped Spring beans is deeply problematic, and care must
            be taken when injecting a bean or component from a wider scope into a bean of a narrower scope.</para>

        <para> By specifying <literal>&lt;seam:configure-scopes/&gt;</literal> once in a Spring bean factory
            configuration, all of the Seam scopes will be available to Spring beans as custom scopes. To associate a
            Spring bean with a particular Seam scope, specify the Seam scope in the <literal>scope</literal> attribute
            of the bean definition. </para>

        <programlisting><![CDATA[<!-- Only needs to be specified once per bean factory-->
<seam:configure-scopes/>

...

<bean id="someSpringBean" class="SomeSpringBeanClass" scope="seam.CONVERSATION"/>]]></programlisting>

        <para> The prefix of the scope name may be changed by specifying the <literal>prefix</literal> attribute in the
                <literal>configure-scopes</literal> definition. (The default prefix is <literal>seam.</literal>) </para>

        <para> By default an instance of a Spring Component registered in this way is not automatically created when
		        referenced using <literal>@In</literal>.  To have an instance auto-created you must either specify <literal>@In(create=true)</literal>
		        at the injection point to identify a specific bean to be auto created or you can use the <literal>default-auto-create</literal>
		        attribute of <literal>configure-scopes</literal> to make all spring beans who use a seam scope auto created.</para>

        <para> Seam-scoped Spring beans defined this way can be injected into other Spring beans without the use of
                <literal>&lt;seam:instance/&gt;</literal>. However, care must be taken to ensure scope impedance
            is maintained. The normal approach used in Spring is to specify
            <literal>&lt;aop:scoped-proxy/&gt;</literal> in the bean definition. However, Seam-scoped Spring
            beans are <emphasis>not</emphasis> compatible with <literal>&lt;aop:scoped-proxy/&gt;</literal>. So
            if you need to inject a Seam-scoped Spring bean into a singleton,
            <literal>&lt;seam:instance/&gt;</literal> must be used: </para>

        <programlisting><![CDATA[<bean id="someSpringBean" class="SomeSpringBeanClass" scope="seam.CONVERSATION"/>

...

<bean id="someSingleton">
    <property name="someSeamScopedSpringBean">
        <seam:instance name="someSpringBean" proxy="true"/>
    </property>
</bean>]]></programlisting>

    </section>
    <section id="spring-transactions">
        <title>Using Spring PlatformTransactionManagement</title>

        <para>Spring provides an extensible transaction management abstraction with support for many
        transaction APIs (JPA, Hibernate, JDO, and JTA)  Spring also provides tight integrations with many application
        server TransactionManagers such as Websphere and Weblogic.  Spring
        transaction management exposes support for many advanced features such as nested
        transactions and supports full Java EE transaction propagation rules like REQUIRES_NEW and NOT_SUPPORTED.  For more
        information see the spring documentation
        <ulink url="http://static.springframework.org/spring/docs/2.0.x/reference/transaction.html">here</ulink>.</para>

        <para>To configure Seam to use Spring transactions enable the SpringTransaction component like so:</para>

        <programlisting>
			<![CDATA[<spring:spring-transaction platform-transaction-manager="#{transactionManager}"/>]]>
		</programlisting>

		<para>
			The <literal>spring:spring-transaction</literal> component will utilize Springs transaction synchronization
			capabilities for synchronization callbacks.
		</para>
    </section>
    <section id="spring-persistence">
        <title>Using a Seam Managed Persistence Context in Spring</title>

        <para>One of the most powerful features of Seam is its conversation scope and the ability to
        have an EntityManager open for the life of a conversation.  This eliminates many
        of the problems associated with the detachment and re-attachment of entities as well as mitigates occurrences
        of the dreaded <literal>LazyInitializationException</literal>.  Spring does not provide a way to manage
        an persistence context beyond the scope of a single web request
        (<literal>OpenEntityManagerInViewFilter</literal>).  So, it would be nice if Spring developers
        could have access to a Seam managed persistence context using all of the same tools Spring provides
        for integration with JPA(e.g. <literal>PersistenceAnnotationBeanPostProcessor</literal>,
        <literal>JpaTemplate</literal>, etc.)</para>

        <para>Seam provides a way for Spring to access a Seam managed persistence context with
        Spring's provided JPA tools bringing conversation scoped persistence context capabilities to
        Spring applications.</para>

        <para>This integration work provides the following functionality:</para>

        <itemizedlist>
            <listitem>
                <para>transparent access to a Seam managed persistence context using Spring provided tools</para>
            </listitem>
            <listitem>
                <para>access to Seam conversation scoped persistence contexts in a non web request
                (e.g. asynchronous quartz job)</para>
            </listitem>
            <listitem>
                <para>allows for using Seam managed persistence contexts with Spring managed transactions (will need to
                flush the persistence context manually)</para>
            </listitem>
        </itemizedlist>

        <para>Spring's persistence context propagation model allows only one open EntityManager per EntityManagerFactory
        so the Seam integration works by wrapping an EntityManagerFactory around a Seam managed persistence
        context.</para>

        <programlisting><![CDATA[<bean id="seamEntityManagerFactory" class="org.jboss.seam.ioc.spring.SeamManagedEntityManagerFactoryBean">
   	<property name="persistenceContextName" value="entityManager"/>
</bean>]]></programlisting>

		<para>Where 'persistenceContextName' is the name of the Seam managed persistence context component.  By default
		this EntityManagerFactory has a unitName equal to  the Seam component name or in this case 'entityManager'.
		If you wish to provide a different unitName you can do so by providing a persistenceUnitName like so:
		</para>

        <programlisting><![CDATA[<bean id="seamEntityManagerFactory" class="org.jboss.seam.ioc.spring.SeamManagedEntityManagerFactoryBean">
   	<property name="persistenceContextName" value="entityManager"/>
	<property name="persistenceUnitName" value="bookingDatabase:extended"/>
</bean>]]></programlisting>

		<para>This EntityManagerFactory can then be used in any Spring provided tools.  For example,
		 using Spring's <literal>PersistenceAnnotationBeanPostProcessor</literal> is the exact same as before.</para>

        <programlisting><![CDATA[<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>]]></programlisting>

		<para>If you define your real EntityManagerFactory in Spring but wish to use a Seam managed persistence context
		you can tell the <literal>PersistenceAnnotationBeanPostProcessor</literal> which persistenctUnitName you wish
		to use by default by specifying the <literal>defaultPersistenceUnitName</literal> property.
		</para>

		<para>The <literal>applicationContext.xml</literal> might look like:</para>
        <programlisting><![CDATA[<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
	<property name="persistenceUnitName" value="bookingDatabase"/>
</bean>
<bean id="seamEntityManagerFactory" class="org.jboss.seam.ioc.spring.SeamManagedEntityManagerFactoryBean">
   	<property name="persistenceContextName" value="entityManager"/>
	<property name="persistenceUnitName" value="bookingDatabase:extended"/>
</bean>
<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor">
	<property name="defaultPersistenceUnitName" value="bookingDatabase:extended"/>
</bean>]]></programlisting>

		<para>The <literal>component.xml</literal> might look like:</para>
		<programlisting><![CDATA[<persistence:managed-persistence-context name="entityManager"
	auto-create="true" entity-manager-factory="#{entityManagerFactory}"/>]]></programlisting>


		<para><literal>JpaTemplate</literal> and <literal>JpaDaoSupport</literal> are configured the same way for a
		Seam managed persistence context as they would be fore a Seam managed persistence context.</para>

        <programlisting><![CDATA[<bean id="bookingService" class="org.jboss.seam.example.spring.BookingService">
	<property name="entityManagerFactory" ref="seamEntityManagerFactory"/>
</bean>]]></programlisting>
    </section>
    <section id="spring-hibernate">
        <title>Using a Seam Managed Hibernate Session in Spring</title>

        <para>The Seam Spring integration also provides support for complete access to a Seam managed Hibernate session
        using spring's tools.  This integration is very similar to the <link linkend="spring-persistence">JPA integration</link>.</para>

        <para>Like Spring's JPA integration spring's propagation model allows only one open EntityManager per
        EntityManagerFactory per transaction??? to be available to spring tools.  So, the Seam Session integration works
        by wrapping a proxy SessionFactory around a Seam managed Hibernate session
        context.</para>

        <programlisting><![CDATA[<bean id="seamSessionFactory" class="org.jboss.seam.ioc.spring.SeamManagedSessionFactoryBean">
	<property name="sessionName" value="hibernateSession"/>
</bean>]]></programlisting>

		<para>Where 'sessionName' is the name of the <literal>persistence:managed-hibernate-session</literal> component.
		 This SessionFactory can then be used in any Spring provided tools.  The integration
		 also provides support for calls to <literal>SessionFactory.getCurrentInstance()</literal> as long as you call
		 getCurrentInstance() on the <literal>SeamManagedSessionFactory</literal>.</para>
    </section>
    <section>
        <title>Spring Application Context as a Seam Component</title>

        <para> Although it is possible to use the Spring <literal>ContextLoaderListener</literal> to start your
        	application's Spring ApplicationContext there are a couple of limitations.</para>

        <itemizedlist>
            <listitem>
                <para> the Spring ApplicationContext must be started <emphasis>after</emphasis> the
                	<literal>SeamListener</literal> </para>
            </listitem>
            <listitem>
                <para> it can be tricky starting a Spring ApplicationContext for use in Seam unit and integration
                	tests </para>
            </listitem>
        </itemizedlist>

        <para> To overcome these two limitations the Spring integration includes a Seam component that will start a
        	Spring ApplicationContext.  To use this Seam component place the
        	<literal>&lt;spring:context-loader/&gt;</literal> definition in the <literal>components.xml</literal>.
        	Specify your Spring context file location in the <literal>config-locations</literal> attribute.  If more
        	than one config file is needed you can place them in the nested
        	<literal>&lt;spring:config-locations/&gt;</literal> element following standard
        	<literal>components.xml</literal> multi value practices. </para>

        <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
            xmlns:spring="http://jboss.com/products/seam/spring"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://jboss.com/products/seam/components
                                http://jboss.com/products/seam/components-2.1.xsd
                                http://jboss.com/products/seam/spring
                                http://jboss.com/products/seam/spring-2.1.xsd">

	<spring:context-loader config-locations="/WEB-INF/applicationContext.xml"/>

</components>]]></programlisting>
    </section>
    <section>
        <title>Using a Spring TaskExecutor for @Asynchronous</title>

        <para>Spring provides an abstraction for executing code asynchronously called a <literal>TaskExecutor</literal>.
        The Spring Seam integration allows for the use of a Spring <literal>TaskExecutor</literal> for executing
        immediate <literal>@Asynchronous</literal> method calls.  To enable this functionality install the
        <literal>SpringTaskExecutorDispatchor</literal> and provide a spring bean defined taskExecutor like so:</para>

        <programlisting>
			<![CDATA[<spring:task-executor-dispatcher task-executor="#{springThreadPoolTaskExecutor}"/>]]>
		</programlisting>

        <para>Because a Spring <literal>TaskExecutor</literal> does not support scheduling of an asynchronous event
        a fallback Seam <literal>Dispatcher</literal> can be provided to handle scheduled asynchronous event like so:</para>

        <programlisting>
			<![CDATA[<!-- Install a ThreadPoolDispatcher to handle scheduled asynchronous event -->
<core:thread-pool-dispatcher name="threadPoolDispatcher"/>

<!-- Install the SpringDispatcher as default -->
<spring:task-executor-dispatcher task-executor="#{springThreadPoolTaskExecutor}" schedule-dispatcher="#{threadPoolDispatcher}"/>]]>
		</programlisting>
    </section>
</chapter>
    <chapter id="search">
  <title>Hibernate Search</title>

  <section>
    <title>Introduction</title>

	<para>Full text search engines like Apache Lucene™ are a very powerful
	technology that bring full text and efficient queries to applications.
	Hibernate Search, which uses Apache Lucene under the covers, indexes your
	domain model with the addition of a few annotations, takes care of the
	database / index synchronization and returns regular managed objects that
	are matched by full text queries. Keep in mind, thought, that there are
	mismatches that arise when dealing with an object domain model over a text
	index (keeping the index up to date, mismatch between the index structure
	and the domain model, and querying mismatch). But the benefits of speed
	and efficiency far outweigh these limitations.</para>

    <para>Hibernate Search has been designed to integrates nicely and as
    naturally as possible with JPA and Hibernate. As a natural extension,
    JBoss Seam provides an Hibernate Search integration.</para>

	<para>Please refer to the <ulink url="http://www.hibernate.org/hib_docs/search/reference/en/html_single/">Hibernate
	Search documentation</ulink> for information specific to the Hibernate
	Search project.</para>

  </section>

  <section>
    <title>Configuration</title>

    <para>Hibernate Search is configured either in the
    <filename>META-INF/persistence.xml</filename> or
    <filename>hibernate.cfg.xml</filename> file.</para>

	<para>Hibernate Search configuration has sensible defaults for most
	configuration parameters. Here is a minimal persistence unit configuration
	to get started.</para>

    <programlisting>   &lt;persistence-unit name="sample"&gt;
      &lt;jta-data-source&gt;java:/DefaultDS&lt;/jta-data-source&gt;
      &lt;properties&gt;
         [...]
         <emphasis role="bold">&lt;!-- use a file system based index --&gt;
         &lt;property name="hibernate.search.default.directory_provider" 
                   value="org.hibernate.search.store.FSDirectoryProvider"/&gt;
         &lt;!-- directory where the indexes will be stored --&gt;
         &lt;property name="hibernate.search.default.indexBase" 
                   value="/Users/prod/apps/dvdstore/dvdindexes"/&gt;</emphasis>
      &lt;/properties&gt;
   &lt;/persistence-unit&gt;</programlisting>

    <para>If you plan to target Hibernate Annotations or EntityManager 3.2.x
    (embedded into JBoss AS 4.2.GA), you also need to configure the
    appropriate event listeners.</para>

    <programlisting>   &lt;persistence-unit name="sample"&gt;
      &lt;jta-data-source&gt;java:/DefaultDS&lt;/jta-data-source&gt;
      &lt;properties&gt;
         [...]
         &lt;!-- use a file system based index --&gt;
         &lt;property name="hibernate.search.default.directory_provider" 
                   value="org.hibernate.search.store.FSDirectoryProvider"/&gt;
         &lt;!-- directory where the indexes will be stored --&gt;
         &lt;property name="hibernate.search.default.indexBase" 
                   value="/Users/prod/apps/dvdstore/dvdindexes"/&gt;

         <emphasis role="bold">&lt;property name="hibernate.ejb.event.post-insert" 
                   value="org.hibernate.search.event.FullTextIndexEventListener"/&gt;
         &lt;property name="hibernate.ejb.event.post-update" 
                   value="org.hibernate.search.event.FullTextIndexEventListener"/&gt;
         &lt;property name="hibernate.ejb.event.post-delete" 
                   value="org.hibernate.search.event.FullTextIndexEventListener"/&gt;</emphasis>

      &lt;/properties&gt;
   &lt;/persistence-unit&gt;</programlisting>

    <note>
      <para>This step is no longer useful if Hibernate Annotation or
      EntityManager 3.3.x are used.</para>
    </note>

    <para>In addition to the configuration file, the following jars have to be
    deployed:</para>

    <itemizedlist>
      <listitem>
        <para>hibernate-search.jar</para>
      </listitem>

      <listitem>
        <para>hibernate-commons-annotations.jar</para>
      </listitem>

      <listitem>
        <para>lucene-core.jar</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>If you deploy those in a EAR, don't forget to update
      <filename>application.xml</filename></para>
    </note>
  </section>

  <section>
    <title>Usage</title>

    <para>Hibernate Search uses annotations to map entities to a Lucene index,
    check the <ulink url="http://www.hibernate.org/hib_docs/search/reference/en/html_single/">reference
    documentation</ulink> for more informations.</para>

    <para>Hibernate Search is fully integrated with the API and semantic of
    JPA / Hibernate. Switching from a HQL or Criteria based query requires
    just a few lines of code. The main API the application interacts with is
    the <classname>FullTextSession</classname> API (subclass of Hibernate's
    <classname>Session</classname>).</para>

    <para>When Hibernate Search is present, JBoss Seam injects a
    <classname>FullTextSession</classname>.</para>

    <programlisting>@Stateful
@Name("search")
public class FullTextSearchAction implements FullTextSearch, Serializable
{   
   @In
   <emphasis role="bold">FullTextSession session;</emphasis>

   public void search(String searchString) {
      org.apache.lucene.query.Query luceneQuery = getLuceneQuery();
      org.hibernate.Query query session.createFullTextQuery(luceneQuery, Product.class);
      searchResults = query
            .setMaxResults(pageSize + 1)
            .setFirstResult(pageSize * currentPage)
            .list();
   }
   [...]
}  

</programlisting>

    <note>
      <para><classname>FullTextSession</classname> extends
      <classname>org.hibernate.Session</classname> so that it can be used as a
      regular Hibernate Session</para>
    </note>

    <para>If the Java Persistence API is used, a smoother integration is
    proposed.</para>

    <programlisting>@Stateful
@Name("search")
public class FullTextSearchAction implements FullTextSearch, Serializable
{   
   @In
   <emphasis role="bold">FullTextEntityManager em;</emphasis>

   public void search(String searchString) {
      org.apache.lucene.query.Query luceneQuery = getLuceneQuery();
      javax.persistence.Query query = em.createFullTextQuery(luceneQuery, Product.class);
      searchResults = query
            .setMaxResults(pageSize + 1)
            .setFirstResult(pageSize * currentPage)
            .getResultList();
   }
   [...]
}  </programlisting>

    <para>When Hibernate Search is present, a
    <classname>FulltextEntityManager</classname> is injected.
    <classname>FullTextEntityManager</classname> extends
    <classname>EntityManager</classname> with search specific methods, the
    same way <classname>FullTextSession</classname> extends
    <classname>Session</classname>.</para>

    <para>When an EJB 3.0 Session or Message Driven Bean injection is used (i.e.
    via the @PersistenceContext annotation), it is not possible to replace the
    <classname>EntityManager</classname> interface by the
    <classname>FullTextEntityManager</classname> interface in the declaration
    statement. However, the implementation injected will be a
    <classname>FullTextEntityManager</classname> implementation: downcasting
    is then possible.</para>

    <programlisting>@Stateful
@Name("search")
public class FullTextSearchAction implements FullTextSearch, Serializable
{   
   @PersistenceContext
   EntityManager em;

   public void search(String searchString) {
      org.apache.lucene.query.Query luceneQuery = getLuceneQuery();
      <emphasis role="bold">FullTextEntityManager ftEm = (FullTextEntityManager) em;</emphasis>
      javax.persistence.Query query = ftEm.createFullTextQuery(luceneQuery, Product.class);
      searchResults = query
            .setMaxResults(pageSize + 1)
            .setFirstResult(pageSize * currentPage)
            .getResultList();
   }
   [...]
}  </programlisting>

    <para/>

    <caution>
      <para>For people accustomed to Hibernate Search out of Seam, note that
      using <methodname>Search.createFullTextSession</methodname> is not
      necessary.</para>
    </caution>

    <para>Check the DVDStore or the blog examples of the JBoss Seam
    distribution for a concrete use of Hibernate Search.</para>
  </section>
</chapter>
    <chapter id="configuration">
    <title>Configuring Seam and packaging Seam applications</title>
    <para> Configuration is a very boring topic and an extremely tedious pastime. Unfortunately, several lines of XML
        are required to integrate Seam into your JSF implementation and servlet container. There's no need to be too put
        off by the following sections; you'll never need to type any of this stuff yourself, since you can just copy and
        paste from the example applications! </para>

    <sect1>
        <title>Basic Seam configuration</title>

        <para> First, let's look at the basic configuration that is needed whenever we use Seam with JSF. </para>

        <sect2>
            <title>Integrating Seam with JSF and your servlet container</title>

            <para> Of course, you need a faces servlet! </para>

            <programlisting><![CDATA[<servlet>
    <servlet-name>Faces Servlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>Faces Servlet</servlet-name>
    <url-pattern>*.seam</url-pattern>
</servlet-mapping>]]></programlisting>

            <para> (You can adjust the URL pattern to suit your taste.) </para>

            <para> In addition, Seam requires the following entry in your <literal>web.xml</literal> file: </para>

            <programlisting><![CDATA[<listener>
    <listener-class>org.jboss.seam.servlet.SeamListener</listener-class>
</listener>]]></programlisting>

            <para> This listener is responsible for bootstrapping Seam, and for destroying session and application
                contexts. </para>

            <para> Some JSF implementations have a broken implementation of server-side state saving that interferes
                with Seam's conversation propagation. If you have problems with conversation propagation during form
                submissions, try switching to client-side state saving. You'll need this in <literal>web.xml</literal>: </para>

            <programlisting><![CDATA[<context-param>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>client</param-value>
</context-param>]]></programlisting>

        </sect2>

        <sect2>
            <title>Using facelets</title>

            <para> If you want follow our advice and use facelets instead of JSP, add the following lines to
                    <literal>faces-config.xml</literal>: </para>

            <programlisting><![CDATA[<application>
    <view-handler>com.sun.facelets.FaceletViewHandler</view-handler>
</application>]]></programlisting>

            <para> And the following lines to <literal>web.xml</literal>: </para>

            <programlisting><![CDATA[<context-param>
    <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
    <param-value>.xhtml</param-value>
</context-param>]]></programlisting>

        </sect2>

        <sect2>
            <title>Seam Resource Servlet</title>

            <para> The Seam Resource Servlet provides resources used by Seam Remoting, captchas (see the security
                chapter) and some JSF UI controls. Configuring the Seam Resource Servlet requires the following entry in
                    <literal>web.xml</literal>: </para>

            <programlisting><![CDATA[<servlet>
  <servlet-name>Seam Resource Servlet</servlet-name>
  <servlet-class>org.jboss.seam.servlet.SeamResourceServlet</servlet-class>
</servlet>
    
<servlet-mapping>
  <servlet-name>Seam Resource Servlet</servlet-name>
  <url-pattern>/seam/resource/*</url-pattern>
</servlet-mapping>]]></programlisting>
        </sect2>

        <sect2>
            <title>Seam servlet filters</title>

            <para> Seam doesn't need any servlet filters for basic operation. However, there are several features which
                depend upon the use of filters. To make things easier, Seam lets you add and configure
                servlet filters just like you would configure other built-in Seam components. To take advantage of this
                feature, we must first install a master filter in <literal>web.xml</literal>: </para>

            <programlisting><![CDATA[<filter>
    <filter-name>Seam Filter</filter-name>
    <filter-class>org.jboss.seam.servlet.SeamFilter</filter-class>
</filter>

<filter-mapping>
    <filter-name>Seam Filter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>]]></programlisting>

            <para>The Seam master filter <emphasis>must</emphasis> be the first filter specified in
                <literal>web.xml</literal>. This ensures it is run first. </para>
            
            <para>
               The Seam filters share a number of common attributes, you can set these in 
               <literal>components.xml</literal> in addition to any parameters discussed
               below:
            </para>
            
            <itemizedlist>
               <listitem>
                  <para>
                     <literal>url-pattern</literal> — Used to specify which requests are filtered, the
                         default is all requests. <literal>url-pattern</literal> is a Tomcat style pattern
                         which allows a wildcard suffix.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <literal>regex-url-pattern</literal> — Used to specify which requests are filtered, the
                     default is all requests. <literal>regex-url-pattern</literal> is a true regular expression
                     match for request path. It's worth noting when composing the regular expression that the request path does not contain
                     the server or request context path. 
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <literal>disabled</literal> — Used to disable a built in filter.
                  </para>
               </listitem>
           </itemizedlist>

            <para> Adding the master filter enables the following built-in filters. </para>

            <sect3>
                <title>Exception handling</title>
                <para> This filter provides the exception mapping functionality in <literal>pages.xml</literal> (almost
                    all applications will need this). It also takes care of rolling back uncommitted transactions when
                    uncaught exceptions occur. (According to the Java EE specification, the web container should do this
                    automatically, but we've found that this behavior cannot be relied upon in all application servers.
                    And it is certainly not required of plain servlet engines like Tomcat.) </para>

                <para> By default, the exception handling filter will process all requests, however this behavior may be
                    adjusted by adding a <literal>&lt;web:exception-filter&gt;</literal> entry to
                        <literal>components.xml</literal>, as shown in this example: </para>

                <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
            xmlns:web="http://jboss.com/products/seam/web">

    <web:exception-filter url-pattern="*.seam"/>

</components>]]></programlisting>

                
            </sect3>

            <sect3>
                <title>Conversation propagation with redirects</title>
                <para> This filter allows Seam to propagate the conversation context across browser redirects. It
                    intercepts any browser redirects and adds a request parameter that specifies the Seam conversation
                    identifier. </para>

                <para> The redirect filter will process all requests by default, but this behavior can also be adjusted
                    in <literal>components.xml</literal>: </para>

                <programlisting><![CDATA[<web:redirect-filter url-pattern="*.seam"/>]]></programlisting>
            </sect3>

            <sect3>
                <title>Multipart form submissions</title>
                <para> This feature is necessary when using the Seam file upload JSF control. It detects multipart form
                    requests and processes them according to the multipart/form-data specification (RFC-2388). To
                    override the default settings, add the following entry to <literal>components.xml</literal>: </para>

                <programlisting><![CDATA[<web:multipart-filter create-temp-files="true" 
                      max-request-size="1000000" 
                      url-pattern="*.seam"/>]]></programlisting>

                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>create-temp-files</literal> — If set to <literal>true</literal>, uploaded
                            files are written to a temporary file (instead of held in memory). This may be an important
                            consideration if large file uploads are expected. The default setting is
                            <literal>false</literal>. </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>max-request-size</literal> — If the size of a file upload request
                            (determined by reading the <literal>Content-Length</literal> header in the request) exceeds
                            this value, the request will be aborted. The default setting is 0 (no size limit). </para>
                    </listitem>
                </itemizedlist>
            </sect3>

            <sect3>
                <title>Character encoding</title>
                <para> Sets the character encoding of submitted form data. </para>

                <para> This filter is not installed by default and requires an entry in
                    <literal>components.xml</literal> to enable it: </para>

                <programlisting><![CDATA[<web:character-encoding-filter encoding="UTF-16" 
                               override-client="true" 
                               url-pattern="*.seam"/>]]></programlisting>

                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>encoding</literal> — The encoding to use. </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>override-client</literal> — If this is set to <literal>true</literal>,
                            the request encoding will be set to whatever is specified by <literal>encoding</literal> no
                            matter whether the request already specifies an encoding or not. If set to
                            <literal>false</literal>, the request encoding will only be set if the request doesn't
                            already specify an encoding. The default setting is <literal>false</literal>. </para>
                    </listitem>
                </itemizedlist>
            </sect3>

            <sect3>
                <title>RichFaces</title>

                <para> 
                  If RichFaces is used in your project, Seam will install the
                  RichFaces Ajax filter for you, making sure to install it
                  before all other built-in filters. You don't need to install
                  the RichFaces Ajax filter in <literal>web.xml</literal>
                  yourself.
                </para>
                
                <para>
                  The RichFaces Ajax filter is only installed if the RichFaces
                  jars are present in your project.
                </para>

                <para> To override the default settings, add the following entry to <literal>components.xml</literal>.
                    The options are the same as those specified in the RichFaces Developer Guide: </para>

                <programlisting><![CDATA[<web:ajax4jsf-filter force-parser="true" 
                     enable-cache="true" 
                     log4j-init-file="custom-log4j.xml"
                     url-pattern="*.seam"/>]]></programlisting>
                <itemizedlist>
                    <listitem>
                        <para>
                            <literal>force-parser</literal> — forces all JSF pages to be validated by
                            Richfaces's XML syntax checker. If <literal>false</literal>, only AJAX responses are
                            validated and converted to well-formed XML. Setting <literal>force-parser</literal> to
                                <literal>false</literal> improves performance, but can provide visual artifacts on AJAX
                            updates. </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>enable-cache</literal> — enables caching of framework-generated resources
                            (e.g. javascript, CSS, images, etc). When developing custom javascript or CSS, setting to
                            true prevents the browser from caching the resource. </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>log4j-init-file</literal> — is used to setup per-application logging. A
                            path, relative to web application context, to the log4j.xml configuration file should be
                            provided. </para>
                    </listitem>
                </itemizedlist>

            </sect3>

             <sect3>
                <title>Identity Logging</title>

                <para> 
                    This filter adds the authenticated user name to the log4j mapped diagnostic context so that it 
                    can be included in formatted log output if desired, by adding %X{username} to the pattern.                       
                </para>

                 
                 <para> By default, the logging filter will process all requests, however this behavior may be
                     adjusted by adding a <literal>&lt;web:logging-filter&gt;</literal> entry to
                     <literal>components.xml</literal>, as shown in this example: </para>
                 
                <programlisting><![CDATA[<components xmlns="http://jboss.com/products/seam/components"
            xmlns:web="http://jboss.com/products/seam/web">
    <web:logging-filter url-pattern="*.seam"/>
</components>]]></programlisting>

            </sect3>
       
            <sect3>
                <title>Context management for custom servlets</title>
                <para> Requests sent direct to some servlet other than the JSF servlet are not processed through the JSF
                    lifecycle, so Seam provides a servlet filter that can be applied to any other servlet that needs
                    access to Seam components. </para>

                <para> This filter allows custom servlets to interact with the Seam contexts. It sets up the Seam
                    contexts at the beginning of each request, and tears them down at the end of the request. You should
                    make sure that this filter is <emphasis>never</emphasis> applied to the JSF
                    <literal>FacesServlet</literal>. Seam uses the phase listener for context management in a JSF
                    request. </para>

                <para> This filter is not installed by default and requires an entry in
                    <literal>components.xml</literal> to enable it: </para>

                <programlisting><![CDATA[<web:context-filter url-pattern="/media/*"/>]]></programlisting>

                <para> The context filter expects to find the conversation id of any conversation context in a request
                    parameter named <literal>conversationId</literal>. You are responsible for ensuring that it gets
                    sent in the request. </para>

                <para> You are also responsible for ensuring propagation of any new conversation id back to the client.
                    Seam exposes the conversation id as a property of the built in component
                    <literal>conversation</literal>. </para>

            </sect3>

            <sect3>
                <title>Adding custom filters</title>
                <para> Seam can install your filters for you, allowing you to specify <emphasis>where</emphasis> in the
                    chain your filter is placed (the servlet specification doesn't provide a well defined order if you
                    specify your filters in a <literal>web.xml</literal>). Just add the <literal>@Filter</literal>
                    annotation to your Seam component (which must implement <literal>javax.servlet.Filter</literal>): </para>

                <programlisting><![CDATA[@Startup
@Scope(APPLICATION)
@Name("org.jboss.seam.web.multipartFilter")
@BypassInterceptors
@Filter(within="org.jboss.seam.web.ajax4jsfFilter")
public class MultipartFilter extends AbstractFilter {]]></programlisting>

                <para> Adding the <literal>@Startup</literal> annotation means thar the component is available during
                    Seam startup; bijection isn't available here (<literal>@BypassInterceptors</literal>); and the filter
                    should be further down the chain than the RichFaces filter
                        (<literal>@Filter(within="org.jboss.seam.web.ajax4jsfFilter")</literal>). </para>

            </sect3>
        </sect2>

        <sect2>
            <title>Integrating Seam with your EJB container</title>

            <para> We need to apply the <literal>SeamInterceptor</literal> to our Seam components. The simplest way to
                do this across an entire application is to add the following interceptor configuration in
                    <literal>ejb-jar.xml</literal>: </para>

            <programlisting><![CDATA[<interceptors>
    <interceptor>
        <interceptor-class>org.jboss.seam.ejb.SeamInterceptor</interceptor-class>
    </interceptor>
</interceptors>
   
<assembly-descriptor>
    <interceptor-binding>
        <ejb-name>*</ejb-name>
        <interceptor-class>org.jboss.seam.ejb.SeamInterceptor</interceptor-class>
    </interceptor-binding>
</assembly-descriptor>
]]></programlisting>

            <para> Seam needs to know where to go to find session beans in JNDI. One way to do this is specify the
                    <literal>@JndiName</literal> annotation on every session bean Seam component. However, this is quite
                tedious. A better approach is to specify a pattern that Seam can use to calculate the JNDI name from the
                EJB name. Unfortunately, there is no standard mapping to global JNDI defined in the EJB3 specification,
                so this mapping is vendor-specific. We usually specify this option in <literal>components.xml</literal>. </para>

            <para> For JBoss AS, the following pattern is correct: </para>

            <programlisting><![CDATA[<core:init jndi-name="myEarName/#{ejbName}/local" />]]></programlisting>

            <para> Where <literal>myEarName</literal> is the name of the EAR in which the bean is deployed. </para>

            <para> Outside the context of an EAR (when using the JBoss Embeddable EJB3 container), the following pattern
                is the one to use: </para>

            <programlisting><![CDATA[<core:init jndi-name="#{ejbName}/local" />]]></programlisting>

            <para> You'll have to experiment to find the right setting for other application servers. Note that some
                servers (such as GlassFish) require you to specify JNDI names for all EJB components explicitly (and
                tediously). In this case, you can pick your own pattern ;-) </para>
                
            <para>
                In an EJB3 environment, we recommend the use of a special built-in component for transaction management,
                that is fully aware of container transactions, and can correctly process transaction success events
                registered with the <literal>Events</literal> component. If you don't add this line to your 
                <literal>components.xml</literal> file, Seam won't know when container-managed transactions end:
            </para>
            
            <programlisting><![CDATA[<transaction:ejb-transaction/>]]></programlisting>

        </sect2>

        <sect2>
            <title>Don't forget!</title>

            <para> There is one final item you need to know about. You must place a <literal>seam.properties</literal>,
                    <literal>META-INF/seam.properties</literal> or <literal>META-INF/components.xml</literal> file in
                any archive in which your Seam components are deployed (even an empty properties file will do). At
                startup, Seam will scan any archives with <literal>seam.properties</literal> files for seam components. </para>

            <para> In a web archive (WAR) file, you must place a <literal>seam.properties</literal> file in the
                    <literal>WEB-INF/classes</literal> directory if you have any Seam components included here. </para>

            <para> That's why all the Seam examples have an empty <literal>seam.properties</literal> file. You can't
                just delete this file and expect everything to still work! </para>

            <para> You might think this is silly and what kind of idiot framework designers would make an empty file
                affect the behavior of their software?? Well, this is a workaround for a limitation of the
                JVM—if we didn't use this mechanism, our next best option would be to force you to list every
                component explicitly in <literal>components.xml</literal>, just like some other competing frameworks do!
                I think you'll like our way better. </para>

        </sect2>

    </sect1>

    <sect1>
        <title>Configuring Seam in Java EE 5</title>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/ee5.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/ee5.png" align="center"/>
            </imageobject>
        </mediaobject>

        <para> If you're running in a Java EE 5 environment, this is all the configuration required to start using Seam! </para>

        <sect2>
            <title>Packaging</title>

            <para> Once you've packaged all this stuff together into an EAR, the archive structure will look something
                like this: </para>

            <programlisting><![CDATA[my-application.ear/
    jboss-seam.jar
    lib/
        jboss-el.jar
    META-INF/
        MANIFEST.MF
        application.xml
    my-application.war/
        META-INF/
            MANIFEST.MF
        WEB-INF/
            web.xml
            components.xml
            faces-config.xml
            lib/
                jsf-facelets.jar
                jboss-seam-ui.jar
        login.jsp
        register.jsp
        ...
    my-application.jar/
        META-INF/
            MANIFEST.MF
            persistence.xml
        seam.properties
        org/
            jboss/
                myapplication/
                    User.class
                    Login.class
                    LoginBean.class
                    Register.class
                    RegisterBean.class
                    ...]]></programlisting>

            <para>
                You should declare <literal>jboss-seam.jar</literal> as an ejb module in <literal>META-INF/application.xml</literal>; 
               <literal>jboss-el.jar</literal> should be placed in the EAR's lib directory (putting it in the EAR classpath.
            </para>

            <para> If you want to use jBPM or Drools, you must include the needed jars in the EAR's lib directory.</para>

            <para> If you want to use facelets (our recommendation), you must include
                <literal>jsf-facelets.jar</literal> in the <literal>WEB-INF/lib</literal> directory of the WAR. </para>

            <para> If you want to use the Seam tag library (most Seam applications do), you must include
                    <literal>jboss-seam-ui.jar</literal> in the <literal>WEB-INF/lib</literal> directory of the WAR. If
                you want to use the PDF or email tag libraries, you need to put <literal>jboss-seam-pdf.jar</literal> or
                    <literal>jboss-seam-mail.jar</literal> in <literal>WEB-INF/lib</literal>. </para>

            <para> If you want to use the Seam debug page (only works for applications using facelets), you must include
                    <literal>jboss-seam-debug.jar</literal> in the <literal>WEB-INF/lib</literal> directory of the WAR. </para>

            <para> Seam ships with several example applications that are deployable in any Java EE container that
                supports EJB 3.0. </para>

            <para> I really wish that was all there was to say on the topic of configuration but unfortunately we're
                only about a third of the way there. If you're too overwhelmed by all this tedious configuration stuff,
                feel free to skip over the rest of this section and come back to it later. </para>

        </sect2>

    </sect1>

    <sect1>
        <title>Configuring Seam in J2EE</title>

        <para> Seam is useful even if you're not yet ready to take the plunge into EJB 3.0. In this case you would use
            Hibernate3 or JPA instead of EJB 3.0 persistence, and plain JavaBeans instead of session beans. You'll miss
            out on some of the nice features of session beans but it will be very easy to migrate to EJB 3.0 when you're
            ready and, in the meantime, you'll be able to take advantage of Seam's unique declarative state management
            architecture. </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/hibernate-ee.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/hibernate-ee.png" align="center"/>
            </imageobject>
        </mediaobject>

        <para> Seam JavaBean components do not provide declarative transaction demarcation like session beans do. You
                <emphasis>could</emphasis> manage your transactions manually using the JTA
            <literal>UserTransaction</literal> or declaratively using Seam's <literal>@Transactional</literal>
            annotation. But most applications will just use Seam managed transactions when using Hibernate with
            JavaBeans. </para>

        <para> The Seam distribution includes a version of the booking example application that uses Hibernate3 and
            JavaBeans instead of EJB3, and another version that uses JPA and JavaBeans. These example applications are
            ready to deploy into any J2EE application server. </para>

        <sect2>
            <title>Boostrapping Hibernate in Seam</title>

            <para> Seam will bootstrap a Hibernate <literal>SessionFactory</literal> from your
                    <literal>hibernate.cfg.xml</literal> file if you install a built-in component: </para>

            <programlisting><![CDATA[<persistence:hibernate-session-factory name="hibernateSessionFactory"/>]]></programlisting>

            <para> You will also need to configure a <emphasis>managed session</emphasis> if you want a Seam managed
                Hibernate <literal>Session</literal> to be available via injection. </para>

            <programlisting><![CDATA[<persistence:managed-hibernate-session name="hibernateSessionFactory"
                            session-factory="#{hibernateSessionFactory}"/>]]></programlisting>

        </sect2>

        <sect2>
            <title>Boostrapping JPA in Seam</title>

            <para> Seam will bootstrap a JPA <literal>EntityManagerFactory</literal> from your
                <literal>persistence.xml</literal> file if you install this built-in component: </para>

            <programlisting><![CDATA[<persistence:entity-manager-factory name="entityManagerFactory"/>]]></programlisting>

            <para> You will also need to configure a <emphasis>managed persistence context</emphasis> if you want a
                Seam managed JPA <literal>EntityManager</literal> to be available via injection. </para>

            <programlisting><![CDATA[<persistence:managed-persistence-context name="entityManager"
                            entity-manager-factory="#{entityManagerFactory}"/>]]></programlisting>

        </sect2>

        <sect2>
            <title>Packaging</title>

            <para> We can package our application as a WAR, in the following structure: </para>

            <programlisting><![CDATA[my-application.war/
    META-INF/
        MANIFEST.MF
    WEB-INF/
        web.xml
        components.xml
        faces-config.xml
        lib/
            jboss-seam.jar
            jboss-seam-ui.jar
            jboss-el.jar
            jsf-facelets.jar
            hibernate3.jar
            hibernate-annotations.jar
            hibernate-validator.jar
            ...
            my-application.jar/
                META-INF/
                   MANIFEST.MF
                seam.properties
                hibernate.cfg.xml
                org/
                    jboss/
                        myapplication/
                            User.class
                            Login.class
                            Register.class
                            ...
    login.jsp
    register.jsp
    ...]]></programlisting>

            <para> If we want to deploy Hibernate in a non-EE environment like Tomcat or TestNG, we need to do a little
                bit more work. </para>

        </sect2>
    </sect1>

    <sect1>
        <title>Configuring Seam in Java SE, without JBoss Embedded</title>

        <para> It is possible to use Seam completely outside of an EE environment. In this case, you need to tell Seam
            how to manage transactions, since there will be no JTA available. If you're using JPA, you can tell
            Seam to use JPA resource-local transactions, ie. <literal>EntityTransaction</literal>, like so: </para>
            
        <programlisting><![CDATA[<transaction:entity-transaction entity-manager="#{entityManager}"/>]]></programlisting>
        
        <para> If you're using Hibernate, you can tell Seam to use the Hibernate transaction API like this: </para>
            
        <programlisting><![CDATA[<transaction:hibernate-transaction session="#{session}"/>]]></programlisting>
        
        <para> Of course, you'll also need to define a datasource.</para>
        
        <para> A better alternative is to use JBoss Embedded to get access to the EE APIs. </para>
                
    </sect1>

    <sect1>
        <title>Configuring Seam in Java SE, with JBoss Embedded</title>

        <para> JBoss Embedded lets you run EJB3 components outside the context of the Java EE 5 application server. This
            is especially, but not only, useful for testing. </para>

        <para> The Seam booking example application includes a TestNG integration test suite that runs on JBoss Embedded
            via <literal>SeamTest</literal>. </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/testng.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/testng.png" align="center"/>
            </imageobject>
        </mediaobject>

        <para> The booking example application may even be deployed to Tomcat. </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="/images/e-ejb3.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="/images/e-ejb3.png" align="center"/>
            </imageobject>
        </mediaobject>

        <sect2 id="config.install.embedded">
            <title>Installing Embedded JBoss</title>


            <para>
              Embedded JBoss must by installed into Tomcat for Seam applications
              to run correctly on it. Embedded JBoss only runs on JDK 1.5 (not JDK 1.6). 
              Embedded JBoss can be downloaded 
              <ulink url="http://sourceforge.net/project/showfiles.php?group_id=22866&amp;package_id=228977">here</ulink>.
              The process for installing Embedded JBoss into Tomcat 6 is quite 
              simple. First, you should copy the Embedded JBoss JARs and 
              configuration files into Tomcat. 
            </para>

            <itemizedlist>

                <listitem>
                    <para> Copy all files and directories under the Embedded JBoss <literal>bootstrap</literal> and
                            <literal>lib</literal> directories, except for the <literal>jndi.properties</literal> file,
                        into the Tomcat <literal>lib</literal> directory. </para>
                </listitem>


                <listitem>
                    <para>Remove the <literal>annotations-api.jar</literal> file from the Tomcat <literal>lib</literal>
                        directory. </para>
                </listitem>
            </itemizedlist>


            <para>Next, two configuration files need to be updated to add Embedded JBoss-specific functionality.</para>

            <itemizedlist>


                <listitem>
                    <para> Add the Embedded JBoss listener to <literal>conf/server.xml</literal>. It should appear after
                        all other listeners in the file.</para>

                    <programlisting>&lt;Listener className="org.jboss.embedded.tomcat.EmbeddedJBossBootstrapListener" /&gt;</programlisting>
                </listitem>

                <listitem>
                    <para>WAR file scanning should be enabled by adding a listener to
                            <literal>conf/context.xml</literal>. </para>

                    <programlisting>&lt;Listener className="org.jboss.embedded.tomcat.WebinfScanner" /&gt;</programlisting>
                </listitem>
            </itemizedlist>

            <para>For more configuration options, please see the Embedded JBoss Tomcat integration 
                <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=EmbeddedAndTomcat">wiki entry</ulink>.</para>

        </sect2>

        <sect2>
            <title>Packaging</title>

            <para> The archive structure of a WAR-based deployment on an servlet engine like Tomcat will look something
                like this: </para>

            <programlisting><![CDATA[my-application.war/
    META-INF/
        MANIFEST.MF
    WEB-INF/
        web.xml
        components.xml
        faces-config.xml
        lib/
            jboss-seam.jar
            jboss-seam-ui.jar
            jboss-el.jar
            jsf-facelets.jar
            jsf-api.jar
            jsf-impl.jar
            ...
            my-application.jar/
                META-INF/
                    MANIFEST.MF
                    persistence.xml
                seam.properties
                org/
                    jboss/
                        myapplication/
                            User.class
                            Login.class
                            LoginBean.class
                            Register.class
                            RegisterBean.class
                            ...
    login.jsp
    register.jsp
    ...]]></programlisting>

            <para> Most of the Seam example applications may be deployed to Tomcat by running <literal>ant
                deploy.tomcat</literal>. </para>

        </sect2>

    </sect1>

    <sect1>
        <title>Configuring jBPM in Seam</title>
        <para> Seam's jBPM integration is not installed by default, so you'll need to enable jBPM by installing a
            built-in component. You'll also need to explicitly list your process and pageflow definitions. In
                <literal>components.xml</literal>: </para>

        <programlisting><![CDATA[<bpm:jbpm>
    <bpm:pageflow-definitions>
        <value>createDocument.jpdl.xml</value>
        <value>editDocument.jpdl.xml</value>
        <value>approveDocument.jpdl.xml</value>
    </bpm:pageflow-definitions>
    <bpm:process-definitions>
        <value>documentLifecycle.jpdl.xml</value>
    </bpm:process-definitions>
</bpm:jbpm>]]></programlisting>

        <para> No further special configuration is needed if you only have pageflows. If you do have business process
            definitions, you need to provide a jBPM configuration, and a Hibernate configuration for jBPM. The Seam DVD
            Store demo includes example <literal>jbpm.cfg.xml</literal> and <literal>hibernate.cfg.xml</literal> files
            that will work with Seam: </para>

        <programlisting><![CDATA[<jbpm-configuration>

  <jbpm-context>
    <service name="persistence">
       <factory>
          <bean class="org.jbpm.persistence.db.DbPersistenceServiceFactory">
             <field name="isTransactionEnabled"><false/></field>
          </bean>
       </factory>
    </service>
    <service name="tx" factory="org.jbpm.tx.TxServiceFactory" />
    <service name="message" factory="org.jbpm.msg.db.DbMessageServiceFactory" />
    <service name="scheduler" factory="org.jbpm.scheduler.db.DbSchedulerServiceFactory" />
    <service name="logging" factory="org.jbpm.logging.db.DbLoggingServiceFactory" />
    <service name="authentication" 
             factory="org.jbpm.security.authentication.DefaultAuthenticationServiceFactory" />
  </jbpm-context>

</jbpm-configuration>]]></programlisting>

        <para> The most important thing to notice here is that jBPM transaction control is disabled. Seam or EJB3 should
            control the JTA transactions. </para>

        <sect2>
            <title>Packaging</title>

            <para> There is not yet any well-defined packaging format for jBPM configuration and process/pageflow
                definition files. In the Seam examples we've decided to simply package all these files into the root of
                the EAR. In future, we will probably design some other standard packaging format. So the EAR looks
                something like this: </para>

            <programlisting><![CDATA[my-application.ear/
    jboss-seam.jar
    lib/
       jboss-el.jar
       jbpm-3.1.jar
    META-INF/
        MANIFEST.MF
        application.xml
    my-application.war/
        META-INF/
            MANIFEST.MF
        WEB-INF/
            web.xml
            components.xml
            faces-config.xml
            lib/
                jsf-facelets.jar
                jboss-seam-ui.jar
        login.jsp
        register.jsp
        ...
    my-application.jar/
        META-INF/
            MANIFEST.MF
            persistence.xml
        seam.properties
        org/
            jboss/
                myapplication/
                    User.class
                    Login.class
                    LoginBean.class
                    Register.class
                    RegisterBean.class
                    ...
    jbpm.cfg.xml
    hibernate.cfg.xml
    createDocument.jpdl.xml
    editDocument.jpdl.xml
    approveDocument.jpdl.xml
    documentLifecycle.jpdl.xml]]></programlisting>

        </sect2>

    </sect1>

    <sect1>
        <title>Configuring Seam in a Portal</title>

        <para> To run a Seam application as a portlet, you'll need to provide certain portlet metadata
                (<literal>portlet.xml</literal>, etc) in addition to the usual Java EE metadata. See the
                <literal>examples/portal</literal> directory for an example of the booking demo preconfigured to run on
            JBoss Portal. </para>

    </sect1>

    <sect1>
        <title>Configuring SFSB and Session Timeouts in JBoss AS</title>

        <para> It is very important that the timeout for Stateful Session Beans is set higher than the timeout for HTTP
            Sessions, otherwise SFSB's may time out before the user's HTTP session has ended. JBoss Application Server
            has a default session bean timeout of 30 minutes, which is configured in
                <literal>server/default/conf/standardjboss.xml</literal> (replace <emphasis>default</emphasis> with your
            own configuration). </para>

        <para> The default SFSB timeout can be adjusted by modifying the value of <literal>max-bean-life</literal> in
            the <literal>LRUStatefulContextCachePolicy</literal> cache configuration: </para>

        <programlisting><![CDATA[<container-cache-conf>
    <cache-policy>org.jboss.ejb.plugins.LRUStatefulContextCachePolicy</cache-policy>
    <cache-policy-conf>
        <min-capacity>50</min-capacity>
        <max-capacity>1000000</max-capacity>
        <remover-period>1800</remover-period>

        <!-- SFSB timeout in seconds; 1800 seconds == 30 minutes -->
        <max-bean-life>1800</max-bean-life>  

        <overager-period>300</overager-period>
        <max-bean-age>600</max-bean-age>
        <resizer-period>400</resizer-period>
        <max-cache-miss-period>60</max-cache-miss-period>
        <min-cache-miss-period>1</min-cache-miss-period>
        <cache-load-factor>0.75</cache-load-factor>
    </cache-policy-conf>
</container-cache-conf>]]></programlisting>

        <para> The default HTTP session timeout can be modified in
                <literal>server/default/deploy/jbossweb-tomcat55.sar/conf/web.xml</literal> for JBoss 4.0.x, or in
                <literal>server/default/deploy/jboss-web.deployer/conf/web.xml</literal> for JBoss 4.2.x. The following
            entry in this file controls the default session timeout for all web applications: </para>

        <programlisting><![CDATA[<session-config>
    <!-- HTTP Session timeout, in minutes -->
    <session-timeout>30</session-timeout>
</session-config>]]></programlisting>

        <para> To override this value for your own application, simply include this entry in your application's own
                <literal>web.xml</literal>. </para>

    </sect1>

</chapter>
    <chapter id="annotations">
    <title>Seam annotations</title>

    <para> When you write a Seam application, you'll use a lot of annotations. Seam lets you use annotations to achieve
        a declarative style of programming. Most of the annotations you'll use are defined by the EJB 3.0 specification.
        The annotations for data validation are defined by the Hibernate Validator package. Finally, Seam defines its
        own set of annotations, which we'll describe in this chapter. </para>

    <para> All of these annotations are defined in the package <literal>org.jboss.seam.annotations</literal>. </para>

    <section>
        <title>Annotations for component definition</title>
        <para> The first group of annotations lets you define a Seam component. These annotations appear on the
            component class. </para>

        <variablelist>
            <varlistentry id="name-annotation">
                <term>
                    <literal>@Name</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Name("componentName")]]></programlisting>
                    <para> Defines the Seam component name for a class. This annotation is required for all Seam
                        components. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="scope-annotation">
                <term>
                    <literal>@Scope</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Scope(ScopeType.CONVERSATION)]]></programlisting>
                    <para> Defines the default context of the component. The possible values are defined by the
                            <literal>ScopeType</literal> enumeration: <literal>EVENT, PAGE, CONVERSATION, SESSION,
                            BUSINESS_PROCESS, APPLICATION, STATELESS</literal>. </para>
                    <para> When no scope is explicitly specified, the default depends upon the component type. For
                        stateless session beans, the default is <literal>STATELESS</literal>. For entity beans and
                        stateful session beans, the default is <literal>CONVERSATION</literal>. For JavaBeans, the
                        default is <literal>EVENT</literal>. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="role-annotation">
                <term>
                    <literal>@Role</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Role(name="roleName", scope=ScopeType.SESSION)]]></programlisting>
                    <para> Allows a Seam component to be bound to multiple contexts variables. The
                            <literal>@Name</literal>/<literal>@Scope</literal> annotations define a "default role". Each
                            <literal>@Role</literal> annotation defines an additional role. </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>name</literal> — the context variable name. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>scope</literal> — the context variable scope. When no scope is
                                explicitly specified, the default depends upon the component type, as above. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry id="roles-annotation">
                <term>
                    <literal>@Roles</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Roles({
        @Role(name="user", scope=ScopeType.CONVERSATION),
        @Role(name="currentUser", scope=ScopeType.SESSION)
    })]]></programlisting>
                    <para> Allows specification of multiple additional roles. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="intercept-annotation">
                <term>
                    <literal>@BypassInterceptors</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@BypassInterceptors]]></programlisting>
                    <para>Disables Seam all interceptors on a particular component
                    or method of a component.</para>
                </listitem>
            </varlistentry>
            <varlistentry id="jndiname-annotation">
                <term>
                    <literal>@JndiName</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@JndiName("my/jndi/name")]]></programlisting>
                    <para> Specifies the JNDI name that Seam will use to look up the EJB component. If no JNDI name is
                        explicitly specified, Seam will use the JNDI pattern specified by
                            <literal>org.jboss.seam.core.init.jndiPattern</literal>. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="conversational-annotation">
                <term>
                    <literal>@Conversational</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Conversational]]></programlisting>
                    <para> Specifies that a conversation scope component is conversational, meaning that no method of
                        the component may be called unless a long-running conversation is active. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="pernestedconversation-annotation">
                <term>
                    <literal>@PerNestedConversation</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@PerNestedConversation]]></programlisting>
                    <para>Limits the scope of a CONVERSATION-scoped component to just the parent conversation in which 
                        it was instantiated. The component instance will not be visible to nested child conversations, 
                        which will get their own instance.</para>
                    <para>Warning: this is ill-defined, since it implies that a component will be visible for some 
                        part of a request cycle, and invisible after that. It is not recommended that applications
                        use this feature!</para>
                </listitem>
            </varlistentry>
            <varlistentry id="startup-annotation">
                <term>
                    <literal>@Startup</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Scope(APPLICATION) @Startup(depends="org.jboss.seam.bpm.jbpm")]]></programlisting>
                    <para> Specifies that an application scope component is started immediately at initialization time.
                        This is mainly used for certain built-in components that bootstrap critical infrastructure such
                        as JNDI, datasources, etc. </para>
                    <programlisting><![CDATA[@Scope(SESSION) @Startup]]></programlisting>
                    <para> Specifies that a session scope component is started immediately at session creation time. </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>depends</literal> — specifies that the named components must be
                                started first, if they are installed. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry id="install-annotation">
                <term>
                    <literal>@Install</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Install(false)]]></programlisting>
                    <para>
                        Specifies whether or not a component should be installed by default. The lack of an @Install
                        annotation indicates a component should be installed.
                    </para>
                    <programlisting><![CDATA[@Install(dependencies="org.jboss.seam.bpm.jbpm")]]></programlisting>
                    <para>
                        Specifies that a component should only be stalled if the components listed as dependencies
                        are also installed.
                    </para>
                    <programlisting><![CDATA[@Install(genericDependencies=ManagedQueueSender.class)]]></programlisting>
                    <para>
                        Specifies that a component should only be installed if a component that is implemented by a
                        certain class is installed. This is useful when the dependency doesn't have a single well-known
                        name.
                    </para>
                    <programlisting><![CDATA[@Install(classDependencies="org.hibernate.Session")]]></programlisting>
                    <para>
                        Specifies that a component should only be installed if the named class is in the classpath.
                    </para>
                    <programlisting><![CDATA[@Install(precedence=BUILT_IN)]]></programlisting>
                    <para>
                        Specifies the precedence of the component. If multiple components with the same name exist,
                        the one with the higher precedence will be installed. The defined precendence values are
                        (in ascending order):
                    </para>
                    
                    <itemizedlist>
                        <listitem>
                            <para><literal>BUILT_IN</literal> — Precedence of all built-in Seam
                            components</para>
                        </listitem>
                        <listitem>
                            <para><literal>FRAMEWORK</literal> — Precedence to use for components of
                                frameworks which extend Seam</para>
                        </listitem>
                        <listitem>
                            <para><literal>APPLICATION</literal> — Predence of application components (the
                                default precedence)</para>
                        </listitem>
                        <listitem>
                            <para><literal>DEPLOYMENT</literal> — Precedence to use for components which
                                override application components in a particular deployment</para>
                        </listitem>
        	              <listitem>
                             <para><literal>MOCK</literal> — Precedence for mock objects used in testing</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>

            <varlistentry id="synchronized-annotation">
                <term>
                    <literal>@Synchronized</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Synchronized(timeout=1000)]]></programlisting>
                    <para> Specifies that a component is accessed concurrently by multiple clients, and that Seam should
                        serialize requests. If a request is not able to obtain its lock on the component in the given
                        timeout period, an exception will be raised. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="readonly-annotation">
                <term>
                    <literal>@ReadOnly</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@ReadOnly]]></programlisting>
                    <para> Specifies that a JavaBean component or component method does not require state replication at
                        the end of the invocation. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="autocreate-annotation">
                <term>
                    <literal>@AutoCreate</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@AutoCreate]]></programlisting>
                    <para> Specifies that a component will be automatically created, even if the client does not
                    specify <literal>create=true</literal>. </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>

    <section>
        <title>Annotations for bijection</title>
        <para> The next two annotations control bijection. These attributes occur on component instance variables or
            property accessor methods. </para>

        <variablelist>
            <varlistentry id="in-annotation">
                <term>
                    <literal>@In</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@In]]></programlisting>
                    <para> Specifies that a component attribute is to be injected from a context variable at the
                        beginning of each component invocation. If the context variable is null, an exception will be
                        thrown. </para>
                    <programlisting><![CDATA[@In(required=false)]]></programlisting>
                    <para> Specifies that a component attribute is to be injected from a context variable at the
                        beginning of each component invocation. The context variable may be null. </para>
                    <programlisting><![CDATA[@In(create=true)]]></programlisting>
                    <para> Specifies that a component attribute is to be injected from a context variable at the
                        beginning of each component invocation. If the context variable is null, an instance of the
                        component is instantiated by Seam. </para>
                    <programlisting><![CDATA[@In(value="contextVariableName")]]></programlisting>
                    <para> Specifies the name of the context variable explicitly, instead of using the annotated
                        instance variable name. </para>
                    <programlisting><![CDATA[@In(value="#{customer.addresses['shipping']}")]]></programlisting>
                    <para> Specifies that a component attribute is to be injected by evaluating a JSF EL expression at
                        the beginning of each component invocation. </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>value</literal> — specifies the name of the context variable. Default
                                to the name of the component attribute. Alternatively, specifies a JSF EL expression,
                                surrounded by <literal>#{...}</literal>. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>create</literal> — specifies that Seam should instantiate the
                                component with the same name as the context variable if the context variable is
                                undefined (null) in all contexts. Default to false. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>required</literal> — specifies Seam should throw an exception if the
                                context variable is undefined in all contexts. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry id="out-annotation">
                <term>
                    <literal>@Out</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Out]]></programlisting>
                    <para> Specifies that a component attribute that is a Seam component is to be outjected to its
                        context variable at the end of the invocation. If the attribute is null, an exception is thrown. </para>
                    <programlisting><![CDATA[@Out(required=false)]]></programlisting>
                    <para> Specifies that a component attribute that is a Seam component is to be outjected to its
                        context variable at the end of the invocation. The attribute may be null. </para>
                    <programlisting><![CDATA[@Out(scope=ScopeType.SESSION)]]></programlisting>
                    <para> Specifies that a component attribute that is <emphasis>not</emphasis> a Seam component type
                        is to be outjected to a specific scope at the end of the invocation. </para>
                    <para> Alternatively, if no scope is explicitly specified, the scope of the component with the
                            <literal>@Out</literal> attribute is used (or the <literal>EVENT</literal> scope if the
                        component is stateless). </para>
                    <programlisting><![CDATA[@Out(value="contextVariableName")]]></programlisting>
                    <para> Specifies the name of the context variable explicitly, instead of using the annotated
                        instance variable name. </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>value</literal> — specifies the name of the context variable. Default
                                to the name of the component attribute. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>required</literal> — specifies Seam should throw an exception if the
                                component attribute is null during outjection. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>

        <para> Note that it is quite common for these annotations to occur together, for example: </para>

        <programlisting><![CDATA[@In(create=true) @Out private User currentUser;]]></programlisting>

        <para> The next annotation supports the <emphasis>manager component</emphasis> pattern, where a Seam component
            that manages the lifecycle of an instance of some other class that is to be injected. It appears on a
            component getter method. </para>

        <variablelist>
            <varlistentry id="unwrap-annotation">
                <term>
                    <literal>@Unwrap</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Unwrap]]></programlisting>
                    <para> Specifies that the object returned by the annotated getter method is the thing that is
                        injected instead of the component instance itself. </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para> The next annotation supports the <emphasis>factory component</emphasis> pattern, where a Seam component
            is responsible for initializing the value of a context variable. This is especially useful for initializing
            any state needed for rendering the response to a non-faces request. It appears on a component method. </para>

        <variablelist>
            <varlistentry id="factory-annotation">
                <term>
                    <literal>@Factory</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Factory("processInstance") public void createProcessInstance() { ... }]]></programlisting>
                    <para> Specifies that the method of the component is used to initialize the value of the named
                        context variable, when the context variable has no value. This style is used with methods that
                        return <literal>void</literal>. </para>
                    <programlisting><![CDATA[@Factory("processInstance", scope=CONVERSATION) public ProcessInstance createProcessInstance() { ... }]]></programlisting>
                    <para> Specifies that the method returns a value that Seam should use to initialize the value of the
                        named context variable, when the context variable has no value. This style is used with methods
                        that return a value. If no scope is explicitly specified, the scope of the component with the
                            <literal>@Factory</literal> method is used (unless the component is stateless, in which case
                        the <literal>EVENT</literal> context is used). </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>value</literal> — specifies the name of the context variable. If the
                                method is a getter method, default to the JavaBeans property name. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>scope</literal> — specifies the scope that Seam should bind the
                                returned value to. Only meaningful for factory methods which return a value. </para>
                        </listitem>
                        <listitem>
                        	<para>
                        		<literal>autoCreate</literal> — specifies that this factory method should be 
                        		automatically called whenever the variable is asked for, even if @In does not specify 
                        		create=true. 
                        	</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>

        <para> This annotation lets you inject a <literal>Log</literal>: </para>

        <variablelist>
            <varlistentry id="logger-annotation">
                <term>
                    <literal>@Logger</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Logger("categoryName")]]></programlisting>
                    <para> Specifies that a component field is to be injected with an instance of
                            <literal>org.jboss.seam.log.Log</literal>. For entity beans, the 
                            field must be declared as static.</para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>value</literal> — specifies the name of the log category. Default to
                                the name of the component class. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>

        <para> The last annotation lets you inject a request parameter value: </para>

        <variablelist>
            <varlistentry id="requestparameter-annotation">
                <term>
                    <literal>@RequestParameter</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@RequestParameter("parameterName")]]></programlisting>
                    <para> Specifies that a component attribute is to be injected with the value of a request parameter.
                        Basic type conversions are performed automatically. </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>value</literal> — specifies the name of the request parameter.
                                Default to the name of the component attribute. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>

    </section>

    <section>
        <title>Annotations for component lifecycle methods</title>
        <para> These annotations allow a component to react to its own lifecycle events. They occur on methods of the
            component. There may be only one of each per component class. </para>

        <variablelist>
            <varlistentry id="create-annotation">
                <term>
                    <literal>@Create</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Create]]></programlisting>
                    <para> Specifies that the method should be called when an instance of the component is instantiated
                        by Seam. Note that create methods are only supported for JavaBeans and stateful session beans.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry id="destroy-annotation">
                <term>
                    <literal>@Destroy</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Destroy]]></programlisting>
                    <para> Specifies that the method should be called when the context ends and its context variables
                        are destroyed. Note that destroy methods are only supported for JavaBeans and stateful session
                        beans. </para>
                    <para> Destroy methods should be used only for cleanup. <emphasis>Seam catches, logs and swallows
                            any exception that propagates out of a destroy method.</emphasis>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry id="observer-annotation">
                <term>
                    <literal>@Observer</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Observer("somethingChanged")]]></programlisting>
                    <para> Specifies that the method should be called when a component-driven event of the specified
                        type occurs. </para>
                    <programlisting><![CDATA[@Observer(value="somethingChanged",create=false)]]></programlisting>
                    <para>Specifies that the method should be called when an event of the specified type occurs but
                        that an instance should not be created if one doesn't exist.  If an instance does not exist
                        and create is false, the event will not be observed.  The default value for create is true.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

    </section>

    <section>
        <title>Annotations for context demarcation</title>
        <para> These annotations provide declarative conversation demarcation. They appear on methods of Seam
            components, usually action listener methods. </para>

        <para> Every web request has a conversation context associated with it. Most of these conversations end at the
            end of the request. If you want a conversation that span multiple requests, you must "promote" the current
            conversation to a <emphasis>long-running conversation</emphasis> by calling a method marked with
                <literal>@Begin</literal>. </para>

<para>
        <orderedlist id="begin-annotation">
                <listitem>
                    <para><literal>@Begin</literal></para>
                <itemizedlist>
		     	<listitem>
			<para>
			<programlisting><![CDATA[@Begin]]></programlisting>
                     Specifies that a long-running conversation begins when this method returns a non-null outcome without exception.
	     		</para>
                	</listitem>
		
                	<listitem>
			<para>
                    	<programlisting><![CDATA[@Begin(join=true)]]></programlisting>
                      Specifies that if a long-running conversation is already in progress, the conversation context is simply propagated.
	      		</para>
                	</listitem>
                	<listitem>
<para><programlisting><![CDATA[@Begin(nested=true)]]></programlisting>
                     Specifies that if a long-running conversation is already in progress, a new
                        <emphasis>nested</emphasis> conversation context begins. The nested conversation will end when the next <literal>@End</literal> is encountered, and the outer conversation will resume. It is perfectly legal for multiple nested conversations to exist concurrently in the same outer conversation. </para>
                	</listitem>
                	<listitem>
<para><programlisting><![CDATA[@Begin(pageflow="process definition name")]]></programlisting>
                     Specifies a jBPM process definition name that defines the pageflow for this conversation.
                    	</para>
                	</listitem>
                	<listitem>
<para><programlisting><![CDATA[@Begin(flushMode=FlushModeType.MANUAL)]]></programlisting>
                     Specify the flush mode of any Seam-managed persistence contexts. <literal>flushMode=FlushModeType.MANUAL</literal> supports the use of <emphasis>atomic conversations</emphasis> where all write operations are queued in the conversation context until an explicit call to <literal>flush()</literal> (which usually occurs at the end of the
                        conversation).
			</para>
                	</listitem>
		</itemizedlist>
	</listitem>
</orderedlist>

                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>join</literal> — determines the behavior when a long-running
                                conversation is already in progress. If <literal>true</literal>, the context is
                                propagated. If <literal>false</literal>, an exception is thrown. Default to
                                    <literal>false</literal>. This setting is ignored when
                                <literal>nested=true</literal> is specified </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>nested</literal> — specifies that a nested conversation should be
                                started if a long-running conversation is already in progress. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>flushMode</literal> — set the flush mode of any Seam-managed
                                Hibernate sessions or JPA persistence contexts that are created during this
                                conversation. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>pageflow</literal> — a process definition name of a jBPM process
                                definition deployed via <literal>org.jboss.seam.bpm.jbpm.pageflowDefinitions.</literal>
                            </para>
                        </listitem>
                    </itemizedlist>
	    </para>
	    <para>
	   <variablelist> 
	    <varlistentry id="end-annotation">
                <term>
                    <literal>@End</literal>
                </term>
                <listitem>
                    <para>
<programlisting><![CDATA[@End]]></programlisting>
                     Specifies that a long-running conversation ends when this method returns a non-null outcome without exception.
		    </para>
        <itemizedlist>
		<listitem>
                            <para>
                                <literal>beforeRedirect</literal> — by default, the conversation will not
                                actually be destroyed until after any redirect has occurred. Setting
                                    <literal>beforeRedirect=true</literal> specifies that the conversation should be
                                destroyed at the end of the current request, and that the redirect will be processed in
                                a new temporary conversation context. </para>
                        </listitem>
		</itemizedlist>
	</listitem>	
               </varlistentry>
            <varlistentry id="starttask-annotation">
                <term>
                    <literal>@StartTask</literal>
                </term>
                <listitem>
                    <para>
			<programlisting><![CDATA[@StartTask]]></programlisting>
                     "Starts" a jBPM task. Specifies that a long-running conversation begins when this method
                        returns a non-null outcome without exception. This conversation is associated with the jBPM task
                        specified in the named request parameter. Within the context of this conversation, a business
                        process context is also defined, for the business process instance of the task instance. </para>
		<itemizedlist>
		<listitem>
		<para> The jBPM <literal>TaskInstance</literal> will be available in a request context variable
                        named <literal>taskInstance</literal>. The jPBM <literal>ProcessInstance</literal> will be
                        available in a request context variable named <literal>processInstance</literal>. (Of course,
                        these objects are available for injection via <literal>@In</literal>.) </para>
		</listitem>
                <listitem>
                            <para>
                                <literal>taskIdParameter</literal> — the name of a request parameter which
                                holds the id of the task. Default to <literal>"taskId"</literal>, which is also the
                                default used by the Seam <literal>taskList</literal> JSF component. </para>
                 </listitem>
                 <listitem>
                            <para>
                                <literal>flushMode</literal> — set the flush mode of any Seam-managed
                                Hibernate sessions or JPA persistence contexts that are created during this conversation.
			</para>
                </listitem>
	</itemizedlist>
	</listitem>
           </varlistentry>
            
	   <varlistentry id="begintask-annotation">
                <term>
                    <literal>@BeginTask</literal>
                </term>
                <listitem>
			<para>
		<programlisting><![CDATA[@BeginTask]]></programlisting>
                     Resumes work on an incomplete jBPM task. Specifies that a long-running conversation begins
                        when this method returns a non-null outcome without exception. This conversation is associated
                        with the jBPM task specified in the named request parameter. Within the context of this
                        conversation, a business process context is also defined, for the business process instance of
                        the task instance. </para>
	<itemizedlist>
	<listitem>
                    <para> The jBPM <literal>org.jbpm.taskmgmt.exe.TaskInstance</literal> will be available in a request 
                        context variable named <literal>taskInstance</literal>. The jPBM 
                        <literal>org.jbpm.graph.exe.ProcessInstance</literal> will be available in a request context 
                        variable named <literal>processInstance</literal>.
		</para>
	</listitem>
	<listitem>
                   <para>
                                <literal>taskIdParameter</literal> — the name of a request parameter which
                                holds the id of the task. Default to <literal>"taskId"</literal>, which is also the
                                default used by the Seam <literal>taskList</literal> JSF component. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>flushMode</literal> — set the flush mode of any Seam-managed
                                Hibernate sessions or JPA persistence contexts that are created during this
                                conversation. </para>
                        </listitem>
		</itemizedlist>
	</listitem>
                </varlistentry>
            <varlistentry id="endtask-annotation">
                <term>
                    <literal>@EndTask</literal>
                </term>
                <listitem>
<para> <programlisting><![CDATA[@EndTask]]></programlisting>
                     "Ends" a jBPM task. Specifies that a long-running conversation ends when this method returns
                        a non-null outcome, and that the current task is complete. Triggers a jBPM transition. The
                        actual transition triggered will be the default transition unless the application has called
                            <literal>Transition.setName()</literal> on the built-in component named
                        <literal>transition</literal>. </para>
                
                <itemizedlist>
		<listitem>
			<para>
<programlisting><![CDATA[@EndTask(transition="transitionName")]]></programlisting>
                    Triggers the given jBPM transition. </para>
                </listitem>
                <listitem>
                          <para>
                                <literal>transition</literal> — the name of the jBPM transition to be
                                triggered when ending the task. Defaults to the default transition. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>beforeRedirect</literal> — by default, the conversation will not
                                actually be destroyed until after any redirect has occurred. Setting
                                    <literal>beforeRedirect=true</literal> specifies that the conversation should be
                                destroyed at the end of the current request, and that the redirect will be processed in
                                a new temporary conversation context. </para>
                        </listitem>
		</itemizedlist>
	</listitem>
            </varlistentry>
            <varlistentry id="createprocess-annotation">
                <term>
                    <literal>@CreateProcess</literal>
                </term>
                <listitem>
<para><programlisting><![CDATA[@CreateProcess(definition="process definition name")]]></programlisting>
                     Creates a new jBPM process instance when the method returns a non-null outcome without
                        exception. The <literal>ProcessInstance</literal> object will be available in a context variable
                        named <literal>processInstance</literal>. </para>
	<itemizedlist>     
		<listitem>
                            <para>
                                <literal>definition</literal> — the name of the jBPM process definition
                                deployed via <literal>org.jboss.seam.bpm.jbpm.processDefinitions</literal>. </para>
                        </listitem>
		</itemizedlist>
	</listitem>
             </varlistentry>
            <varlistentry id="resumeprocess-annotation">
                <term>
                    <literal>@ResumeProcess</literal>
                </term>
                <listitem>
<para><programlisting><![CDATA[@ResumeProcess(processIdParameter="processId")]]></programlisting>
                     Re-enters the scope of an existing jBPM process instance when the method returns a non-null
                        outcome without exception. The <literal>ProcessInstance</literal> object will be available in a
                        context variable named <literal>processInstance</literal>. </para>
	<itemizedlist>
	<listitem>
		     <para>
                                <literal>processIdParameter</literal> — the name a request parameter holding
                                the process id. Default to <literal>"processId"</literal>. </para>
                        </listitem>
		</itemizedlist>
	</listitem>
            </varlistentry>
            
	    <varlistentry id="transition-annotation">
                <term><literal>@Transition</literal></term>
                <listitem>
                    <para><programlisting><![CDATA[@Transition("cancel")]]></programlisting>
                    
                        Marks a method as signalling a transition in the current jBPM process instance
                        whenever the method returns a non-null result.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
</para>
    </section>

    <section>
        <title>Annotations for use with Seam JavaBean components in a J2EE environment</title>
        <para> Seam provides an annotation that lets you force a rollback of the JTA transaction for certain action
            listener outcomes. </para>

        <variablelist>
            <varlistentry id="transactional-annotation">
                <term>
                    <literal>@Transactional</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Transactional]]></programlisting>
                    <para> Specifies that a JavaBean component should have a similar transactional behavior to the
                        default behavior of a session bean component. ie. method invocations should take place in a
                        transaction, and if no transaction exists when the method is called, a transaction will be
                        started just for that method. This annotation may be applied at either class or method level.
                    </para>
                    <para>
                       <emphasis>Do not use this annotation on EJB 3.0 components, use <literal>@TransactionAttribute</literal>!</emphasis>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <literal>@ApplicationException</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@ApplicationException]]></programlisting>
                    <para> 
                       Synonym for javax.ejb.ApplicationException, for use in a
                       pre Java EE 5 environment.  Applied to an exception to 
                       denote that it is an application exception and should be 
                       reported to the client directly(i.e., unwrapped).
                    </para>
                    <para>   
                       <emphasis>Do not use this 
                       annotation on EJB 3.0 components, use 
                      <literal>@javax.ejb.ApplicationException</literal> instead</emphasis>.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>rollback</literal> — by default 
                                <literal>false</literal>, if <literal>true</literal>
                                this exception should set the transaction to 
                                rollback only 
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>end</literal> — by default 
                                <literal>false</literal>, if <literal>true</literal>
                                this exception should end the current 
                                long-running conversation
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <literal>@Interceptors</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Interceptors({DVDInterceptor, CDInterceptor})]]></programlisting>
                    <para> 
                       Synonym for javax.interceptors.Interceptors, for use in 
                       a pre Java EE 5 environment. Note that this may only be 
                       used as a meta-annotation. Declares an ordered list of 
                       interceptors for a class or method.
                    </para>
                    <para>   
                       <emphasis>Do not use this 
                       annotations on EJB 3.0 components, use 
                      <literal>@javax.interceptor.Interceptors</literal> instead</emphasis>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para>
           These annotations are mostly useful for JavaBean Seam components. If you use EJB 3.0 components, you
           should use the standard Java EE5  annotation.
        </para>
    </section>

    <section>
        <title>Annotations for exceptions</title>
        
        <para> These annotations let you specify how Seam should handle an exception that propagates out of a Seam
            component. </para>

        <variablelist>
            <varlistentry id="redirect-annotation">
                <term>
                    <literal>@Redirect</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Redirect(viewId="error.jsp")]]></programlisting>
                    <para> Specifies that the annotated exception causes a browser redirect to a specified view id. </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>viewId</literal> — specifies the JSF view id to redirect to.  You can use
                                EL here. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>message</literal> — a message to be displayed, default to the
                                exception message. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>end</literal> — specifies that the long-running conversation should
                                end, default to <literal>false</literal>. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry id="httperror-annotation">
                <term>
                    <literal>@HttpError</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@HttpError(errorCode=404)]]></programlisting>
                    <para> Specifies that the annotated exception causes a HTTP error to be sent. </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>errorCode</literal> — the HTTP error code, default to
                                <literal>500</literal>. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>message</literal> — a message to be sent with the HTTP error, default
                                to the exception message. </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>end</literal> — specifies that the long-running conversation should
                                end, default to <literal>false</literal>. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>

    <section>
        <title>Annotations for Seam Remoting</title>
        <para> Seam Remoting requires that the local interface of a session bean be annotated with the following
            annotation: </para>

        <variablelist>
            <varlistentry id="webremote-annotation">
                <term>
                    <literal>@WebRemote</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@WebRemote(exclude="path.to.exclude")]]></programlisting>
                    <para> Indicates that the annotated method may be called from client-side JavaScript. The
                            <literal>exclude</literal> property is optional and allows objects to be excluded from the
                        result's object graph (see the Remoting chapter for more details). </para>
                </listitem>
            </varlistentry>
        </variablelist>

    </section>

    <section>
        <title>Annotations for Seam interceptors</title>
        <para> The following annotations appear on Seam interceptor classes. </para>
        <para> Please refer to the documentation for the EJB 3.0 specification for information about the annotations
            required for EJB interceptor definition. </para>

        <variablelist>
            <varlistentry id="interceptor-annotation">
                <term>
                    <literal>@Interceptor</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Interceptor(stateless=true)]]></programlisting>
                    <para> Specifies that this interceptor is stateless and Seam may optimize replication. </para>
                <itemizedlist>
		    <listitem>
                    <programlisting><![CDATA[@Interceptor(type=CLIENT)]]></programlisting>
                    <para> Specifies that this interceptor is a "client-side" interceptor that is called before the EJB
                        container. </para>
                </listitem>
                <listitem>
                    <programlisting><![CDATA[@Interceptor(around={SomeInterceptor.class, OtherInterceptor.class})]]></programlisting>
                    <para> Specifies that this interceptor is positioned higher in the stack than the given
                        interceptors. </para>
                </listitem>
                <listitem>
                    <programlisting><![CDATA[@Interceptor(within={SomeInterceptor.class, OtherInterceptor.class})]]></programlisting>
                    <para> Specifies that this interceptor is positioned deeper in the stack than the given
                        interceptors. </para>
                </listitem>
	</itemizedlist>
	</listitem>
            </varlistentry>
        </variablelist>

    </section>

    <section>
        <title>Annotations for asynchronicity</title>
        <para> The following annotations are used to declare an asynchronous method, for example: </para>

        <programlisting><![CDATA[@Asynchronous public void scheduleAlert(Alert alert, @Expiration Date date) { ... }]]></programlisting>
        <programlisting><![CDATA[@Asynchronous public Timer scheduleAlerts(Alert alert, 
                                          @Expiration Date date, 
                                          @IntervalDuration long interval) { ... }]]></programlisting>

        <variablelist>
            <varlistentry id="asynchronous-annotation">
                <term>
                    <literal>@Asynchronous</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Asynchronous]]></programlisting>
                    <para> Specifies that the method call is processed asynchronously. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="duration-annotation">
                <term>
                    <literal>@Duration</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Duration]]></programlisting>
                    <para> Specifies that a parameter of the asynchronous call is the duration before the call is
                        processed (or first processed for recurring calls). </para>
                </listitem>
            </varlistentry>
            <varlistentry id="expiration-annotation">
                <term>
                    <literal>@Expiration</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Expiration]]></programlisting>
                    <para> Specifies that a parameter of the asynchronous call is the datetime at which the call is
                        processed (or first processed for recurring calls). </para>
                </listitem>
            </varlistentry>
            <varlistentry id="intervalduration-annotation">
                <term>
                    <literal>@IntervalDuration</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@IntervalDuration]]></programlisting>
                    <para> Specifies that an asynchronous method call recurs, and that the annotationed parameter is
                        duration between recurrences. </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>

    <section>
    	<title>Annotations for use with JSF</title>
    		<para> 
    			The following annotations make working with JSF easier.
	        </para>
	        
	        <variablelist>
	            <varlistentry>
	                <term>
	                    <literal>@Converter</literal>
	                </term>
	                <listitem>
	                    <para>
	                    	Allows a Seam component to act as a JSF converter. The annotated class must be a Seam
	                    	component, and must implement <literal>javax.faces.convert.Converter</literal>.
	                    </para>
	                    <itemizedlist>
	                        <listitem>
	                            <para>
	                                <literal>id</literal> — the JSF converter id. Defaults to the component name.
	                            </para>
	                        </listitem>
	                        <listitem>
	                            <para>
	                                <literal>forClass</literal> — if specified, register this component as the default converter for a type.
	                            </para>
	                        </listitem>
	                    </itemizedlist>
	                </listitem>
	            </varlistentry>
	            <varlistentry>
	                <term>
	                    <literal>@Validator</literal>
	                </term>
	                <listitem>
	                    <para>
	                    	Allows a Seam component to act as a JSF validator. The annotated class must be a Seam 
	                    	component, and must implement <literal>javax.faces.validator.Validator</literal>.
	                    </para>
	                    <itemizedlist>
	                        <listitem>
	                            <para>
	                                <literal>id</literal> — the JSF validator id. Defaults to the component name.
	                            </para>
	                        </listitem>
	                    </itemizedlist>
	                </listitem>
	            </varlistentry>
	        </variablelist>
    	
    	<section>
	        <title>Annotations for use with <literal>dataTable</literal></title>
	        <para> The following annotations make it easy to implement clickable lists backed by a stateful session bean.
	            They appear on attributes. </para>
	
	        <variablelist>
	            <varlistentry id="datamodel-annotation">
	                <term>
	                    <literal>@DataModel</literal>
	                </term>
	                <listitem>
	                    <programlisting><![CDATA[@DataModel("variableName")]]></programlisting>
	                    <para> Outjects a property of type <literal>List</literal>, <literal>Map</literal>,
	                        <literal>Set</literal> or <literal>Object[]</literal> as a JSF <literal>DataModel</literal> into
	                        the scope of the owning component (or the <literal>EVENT</literal> scope if the owning component
	                        is <literal>STATELESS</literal>). In the case of <literal>Map</literal>, each row of the
	                            <literal>DataModel</literal> is a <literal>Map.Entry</literal>. </para>
	                    <itemizedlist>
	                        <listitem>
	                            <para>
	                                <literal>value</literal> — name of the conversation context variable. Default
	                                to the attribute name. </para>
	                        </listitem>
	                        <listitem>
	                            <para>
	                                <literal>scope</literal> — if <literal>scope=ScopeType.PAGE</literal> is
	                                explicitly specified, the <literal>DataModel</literal> will be kept in the
	                                <literal>PAGE</literal> context. </para>
	                        </listitem>
	                    </itemizedlist>
	                </listitem>
	            </varlistentry>
	            <varlistentry id="datamodelselection-annotation">
	                <term>
	                    <literal>@DataModelSelection</literal>
	                </term>
	                <listitem>
	                    <programlisting><![CDATA[@DataModelSelection]]></programlisting>
	                    <para> 
                          Injects the selected value from the JSF <literal>DataModel</literal> (this is the element of
	                      the underlying collection, or the map value). If only one <literal>@DataModel</literal> attribute
                          is defined for a component, the selected value from that <literal>DataModel</literal> will be 
                          injected. Otherwise, the component name of each <literal>@DataModel</literal> must be specified 
                          in the value attribute for each <literal>@DataModelSelection</literal>.
                        </para>
                        <para> If <literal>PAGE</literal> scope is specified on the associated <literal>@DataModel</literal>,
                            then, in addition to the DataModel Selection being injected, the associated DataModel will
                            also be injected.  In this case, if the property annotated with <literal>@DataModel</literal> is
                            a getter method, then a setter method for the property must also be part of the Business API of 
                            the containing Seam Component.</para> 
	                    <itemizedlist>
	                        <listitem>
	                            <para>
	                                <literal>value</literal> — name of the conversation context variable. Not
	                                needed if there is exactly one <literal>@DataModel</literal> in the component. </para>
	                        </listitem>
	                    </itemizedlist>
	                </listitem>
	            </varlistentry>
	            <varlistentry id="datamodelselectionindex-annotation">
	                <term>
	                    <literal>@DataModelSelectionIndex</literal>
	                </term>
	                <listitem>
	                    <programlisting><![CDATA[@DataModelSelectionIndex]]></programlisting>
	                    <para>
                          Exposes the selection index of the JSF <literal>DataModel</literal> as an attribute of the
	                      component (this is the row number of the underlying collection, or the map key). If only one 
                          <literal>@DataModel</literal> attribute is defined for a component, the selected value from 
                          that <literal>DataModel</literal> will be injected. Otherwise, the component name of each 
                          <literal>@DataModel</literal> must be specified in the value attribute for each 
                          <literal>@DataModelSelectionIndex</literal>.
                        </para>
	                    <itemizedlist>
	                        <listitem>
	                            <para>
	                                <literal>value</literal> — name of the conversation context variable. Not
	                                needed if there is exactly one <literal>@DataModel</literal> in the component. </para>
	                        </listitem>
	                    </itemizedlist>
	                </listitem>
	            </varlistentry>
	        </variablelist>
	
	    </section>
	</section>

    <section>
        <title>Meta-annotations for databinding</title>
        <para> These meta-annotations make it possible to implement similar functionality to
            <literal>@DataModel</literal> and <literal>@DataModelSelection</literal> for other datastructures apart from
            lists. </para>

        <variablelist>
            <varlistentry id="databinderclass-annotation">
                <term>
                    <literal>@DataBinderClass</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@DataBinderClass(DataModelBinder.class)]]></programlisting>
                    <para> Specifies that an annotation is a databinding annotation. </para>
                </listitem>
            </varlistentry>
            <varlistentry id="dataselectorclass-annotation">
                <term>
                    <literal>@DataSelectorClass</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@DataSelectorClass(DataModelSelector.class)]]></programlisting>
                    <para> Specifies that an annotation is a dataselection annotation. </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>

    <section>
        <title>Annotations for packaging</title>
        <para> This annotation provides a mechanism for declaring information about a set of components that are
            packaged together. It can be applied to any Java package.</para>


        <variablelist>
            <varlistentry id="namespace-annotation">
                <term>
                    <literal>@Namespace</literal>
                </term>
                <listitem>
                    <programlisting><![CDATA[@Namespace(value="http://jboss.com/products/seam/example/seampay")]]></programlisting>
                    <para> Specifies that components in the current package are associated with the given namespace. The
                        declared namespace can be used as an XML namespace in a <literal>components.xml</literal> file
                        to simplify application configuration.</para>
                    <programlisting><![CDATA[@Namespace(value="http://jboss.com/products/seam/core", prefix="org.jboss.seam.core")]]></programlisting>
                    <para>Specifies a namespace to associate with a given package. Additionally, it specifies a
                        component name prefix to be applied to component names specified in the XML file. For example,
                        an XML element named <literal>init</literal> that is associated with this namespace
                        would be understood to actually refere to a component named
                            <literal>org.jboss.seam.core.init</literal>. </para>
                </listitem>
            </varlistentry>

        </variablelist>

    </section>
    
    <section>
        <title>Annotations for integrating with the servlet container</title>
        <para>These annotations allow you to integrate your Seam components with the servlet container.</para>


        <variablelist>
            <varlistentry>
                <term>
                    <literal>@Filter</literal>
                </term>
                <listitem>
                	<para>
                		Use the Seam component (which implements <literal>javax.servlet.Filter</literal>) annotated with <literal>@Filter</literal> as a servlet filter.  It
                		will be executed by Seam's master filter.
                	</para>
                    <itemizedlist>
                        <listitem>
                    		<programlisting><![CDATA[@Filter(around={"seamComponent", "otherSeamComponent"})]]></programlisting>
                    		<para> Specifies that this filter is positioned higher in the stack than the given
                        filters. </para>
                </listitem>
                <listitem>
                    <programlisting><![CDATA[@Filter(within={"seamComponent", "otherSeamComponent"})]]></programlisting>
                    <para> Specifies that this filter is positioned deeper in the stack than the given
                        filters. </para>
                </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>

        </variablelist>

    </section>


</chapter>
    <chapter id="components">
    <title>Built-in Seam components</title>
    <para>
        This chapter describes Seam's built-in components, and their
        configuration properties. The built-in components will be created even if they
        are not listed in your <literal>components.xml</literal> file, but if you need to
        override default properties or specify more than one component of a certain type,
        <literal>components.xml</literal> is used.
    </para>
    
    <para>
        Note that you can replace any of the built in components with
        your own implementations simply by specifying the name of one 
        of the built in components on your own class using 
        <literal>@Name</literal>.
    </para>
    
    <para>
        Note also that even though all the built in components use a
        qualified name, most of them are aliased to unqualified names by
        default. These aliases specify <literal>auto-create="true"</literal>,
        so you do not need to use <literal>create=true</literal> when
        injecting built-in components by their unqualified name.
    </para>
    
    <section>
        <title>Context injection components</title>
        <para>
            The first set of built in components exist purely to support
            injection of various contextual objects. For example, the
            following component instance variable would have the Seam
            session context object injected:
        </para>
        
        <programlisting><![CDATA[@In private Context sessionContext;]]></programlisting>
    
    	<variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.core.contexts</literal></term>
                <listitem>
                    <para>
                        Component that provides access to Seam Context objects, for
                        example <literal>org.jboss.seam.core.contexts.sessionContext['user']</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.faces.facesContext</literal></term>
                <listitem>
                    <para>
                        Manager component for the <literal>FacesContext</literal> context 
                        object (not a true Seam context)
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            All of these components are always installed.
        </para>

    </section>
    
    <section>
        <title>Utility components</title>
        <para>
            These components are merely useful.
        </para>
        
         <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.faces.facesMessages</literal></term>
                <listitem>
                    <para>
                        Allows faces success messages to propagate across a browser redirect.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>add(FacesMessage facesMessage)</literal> — add 
                            a faces message, which will be displayed during the next render
                            response phase that occurs in the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>add(String messageTemplate)</literal> — add 
                            a faces message, rendered from the given message template
                            which may contain EL expressions.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>add(Severity severity, String messageTemplate)</literal> — 
                            add a faces message, rendered from the given message template
                            which may contain EL expressions.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>addFromResourceBundle(String key)</literal> — 
                            add a faces message, rendered from a message template defined
                            in the Seam resource bundle which may contain EL expressions.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>addFromResourceBundle(Severity severity, String key)</literal> — 
                            add a faces message, rendered from a message template defined
                            in the Seam resource bundle which may contain EL expressions.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>clear()</literal> — clear all messages.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.faces.redirect</literal></term>
                <listitem>
                    <para>
                        A convenient API for performing redirects with parameters (this
                        is especially useful for bookmarkable search results screens).
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>redirect.viewId</literal> — the JSF view id
                            to redirect to.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>redirect.conversationPropagationEnabled</literal> — 
                            determines whether the conversation will propagate across the 
                            redirect.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>redirect.parameters</literal> — a map of
                            request parameter name to value, to be passed in the redirect
                            request.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>execute()</literal> — perform the redirect
                            immediately.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>captureCurrentRequest()</literal> — stores 
                            the view id and request parameters of the current GET 
                            request (in the conversation context), for later use
                            by calling <literal>execute()</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.faces.httpError</literal></term>
                <listitem>
                    <para>
                        A convenient API for sending HTTP errors.
                    </para>
                </listitem>
             </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.events</literal></term>
                <listitem>
                    <para>
                        An API for raising events that can be observed via
                        <literal>@Observer</literal> methods, or method
                        bindings in <literal>components.xml</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>raiseEvent(String type)</literal> — raise
                            an event of a particular type and distribute to all
                            observers.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>raiseAsynchronousEvent(String type)</literal> — 
                            raise an event to be processed asynchronously by the EJB3
                            timer service.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>raiseTimedEvent(String type, ....)</literal> — 
                            schedule an event to be processed asynchronously by the EJB3
                            timer service.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>addListener(String type, String methodBinding)</literal> 
                            — add an observer for a particular event type.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
             </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.interpolator</literal></term>
                <listitem>
                    <para>
                        An API for interpolating the values of JSF EL expressions in
                        Strings.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>interpolate(String template)</literal> — scan
                            the template for JSF EL expressions of the form <literal>#{...}</literal>
                            and replace them with their evaluated values.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
             </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.expressions</literal></term>
                <listitem>
                    <para>
                        An API for creating value and method bindings.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>createValueBinding(String expression)</literal> — create
                            a value binding object.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>createMethodBinding(String expression)</literal> — create
                            a method binding object.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
             </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.pojoCache</literal></term>
                <listitem>
                    <para>
                        Manager component for a JBoss Cache <literal>PojoCache</literal> 
                        instance.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>pojoCache.cfgResourceName</literal> — the name of 
                            the configuration file. Default to <literal>treecache.xml</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            All of these components are always installed.
        </para>
    </section>
    
    <section>
        <title>Components for internationalization and themes</title>
        <para>
            The next group of components make it easy to build internationalized user interfaces
            using Seam.
        </para>
        
    	<variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.core.locale</literal></term>
                <listitem>
                    <para>
                        The Seam locale.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.international.timezone</literal></term>
                <listitem>
                    <para>
                        The Seam timezone. The timezone is session scoped.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.resourceBundle</literal></term>
                <listitem>
                    <para>
                        The Seam resource bundle. The resource bundle is stateless. The Seam
                        resource bundle performs a depth-first search for keys in a list of Java
                        resource bundles.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.resourceLoader</literal></term>
                <listitem>
                    <para>
                        The resource loader provides access to application resources and resource bundles.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>resourceLoader.bundleNames</literal> — the names of 
                            the Java resource bundles to search when the Seam resource bundle is
                            used. Default to <literal>messages</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.international.localeSelector</literal></term>
                <listitem>
                    <para>
                        Supports selection of the locale either at configuration time, 
                        or by the user at runtime.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>select()</literal> — select the specified locale.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>localeSelector.locale</literal> — the actual
                            <literal>java.util.Locale</literal>.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>localeSelector.localeString</literal> — the 
                            stringified representation of the locale.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>localeSelector.language</literal> — the language for
                            the specified locale.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>localeSelector.country</literal> — the country for
                            the specified locale.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>localeSelector.variant</literal> — the variant for
                            the specified locale.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>localeSelector.supportedLocales</literal> — a list
                            of <literal>SelectItem</literal>s representing the supported locales 
                            listed in <literal>jsf-config.xml</literal>.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>localeSelector.cookieEnabled</literal> — specifies
                            that the locale selection should be persisted via a cookie.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.international.timezoneSelector</literal></term>
                <listitem>
                    <para>
                        Supports selection of the timezone either at configuration time, 
                        or by the user at runtime.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>select()</literal> — select the specified locale.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>timezoneSelector.timezone</literal> — the actual
                            <literal>java.util.TimeZone</literal>.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>timezoneSelector.timeZoneId</literal> — the 
                            stringified representation of the timezone.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>timezoneSelector.cookieEnabled</literal> — specifies
                            that the timezone selection should be persisted via a cookie.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.international.messages</literal></term>
                <listitem>
                    <para>
                        A map containing internationalized messages rendered from message
                        templates defined in the Seam resource bundle.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.theme.themeSelector</literal></term>
                <listitem>
                    <para>
                        Supports selection of the theme either at configuration time, 
                        or by the user at runtime.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>select()</literal> — select the specified theme.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>theme.availableThemes</literal> — the list of
                            defined themes.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>themeSelector.theme</literal> — the selected
                            theme.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>themeSelector.themes</literal> — a list
                            of <literal>SelectItem</literal>s representing the defined
                            themes.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>themeSelector.cookieEnabled</literal> — specifies
                            that the theme selection should be persisted via a cookie.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.theme.theme</literal></term>
                <listitem>
                    <para>
                        A map containing theme entries.
                    </para>
                </listitem>
            </varlistentry>
         </variablelist>
         
        
        <para>
            All of these components are always installed.
        </para>
    </section>
    
    <section>
        <title>Components for controlling conversations</title>
        <para>
            The next group of components allow control of conversations by the application or 
            user interface.
        </para>
        
    	<variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.core.conversation</literal></term>
                <listitem>
                    <para>
                        API for application control of attributes of the current Seam conversation.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>getId()</literal> — returns the current conversation id
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>isNested()</literal> — is the current conversation a
                            nested conversation?
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>isLongRunning()</literal> — is the current conversation a
                            long-running conversation?
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>getId()</literal> — returns the current conversation id
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>getParentId()</literal> — returns the conversation id
                            of the parent conversation
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>getRootId()</literal> — returns the conversation id
                            of the root conversation
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>setTimeout(int timeout)</literal> — sets the timeout
                            for the current conversation
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>setViewId(String outcome)</literal> — sets the view id
                            to be used when switching back to the current conversation from the 
                            conversation switcher, conversation list, or breadcrumbs.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>setDescription(String description)</literal> — sets the 
                            description of the current conversation to be displayed in the 
                            conversation switcher, conversation list, or breadcrumbs.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>redirect()</literal> — redirect to the last well-defined
                            view id for this conversation (useful after login challenges).
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>leave()</literal> — exit the scope of this conversation,
                            without actually ending the conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>begin()</literal> — begin a long-running conversation
                            (equivalent to <literal>@Begin</literal>).
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>beginPageflow(String pageflowName)</literal> — begin a 
                            long-running conversation with a pageflow (equivalent to 
                            <literal>@Begin(pageflow="...")</literal>).
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>end()</literal> — end a long-running conversation
                            (equivalent to <literal>@End</literal>).
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>pop()</literal> — pop the conversation stack, returning
                            to the parent conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>root()</literal> — return to the root conversation of 
                            the conversation stack.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>changeFlushMode(FlushModeType flushMode)</literal> — change 
                            the flush mode of the conversation.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.conversationList</literal></term>
                <listitem>
                    <para>
                        Manager component for the conversation list.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.conversationStack</literal></term>
                <listitem>
                    <para>
                        Manager component for the conversation stack (breadcrumbs).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.faces.switcher</literal></term>
                <listitem>
                    <para>
                        The conversation switcher.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            All of these components are always installed.
        </para>

    </section>
    
    <section>
        <title>jBPM-related components</title>
        <para>
            These components are for use with jBPM.
        </para>
        
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.pageflow.pageflow</literal></term>
                <listitem>
                    <para>
                        API control of Seam pageflows.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>isInProcess()</literal> — returns <literal>true</literal>
                            if there is currently a pageflow in process
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>getProcessInstance()</literal> — returns jBPM
                            <literal>ProcessInstance</literal> for the current pageflow
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>begin(String pageflowName)</literal> — begin a pageflow
                            in the context of the current conversation
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>reposition(String nodeName)</literal> — reposition the
                            current pageflow to a particular node
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.actor</literal></term>
                <listitem>
                    <para>
                        API for application control of attributes of the jBPM actor associated
                        with the current session.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>setId(String actorId)</literal> — sets the jBPM
                            actor id of the current user.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>getGroupActorIds()</literal> — returns a 
                            <literal>Set</literal> to which jBPM actor ids for the
                            current users groups may be added.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.transition</literal></term>
                <listitem>
                    <para>
                        API for application control of the jBPM transition for the current
                        task.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>setName(String transitionName)</literal> — sets the 
                            jBPM transition name to be used when the current task is ended
                            via <literal>@EndTask</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.businessProcess</literal></term>
                <listitem>
                    <para>
                        API for programmatic control of the association between the
                        conversation and business process.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>businessProcess.taskId</literal> — the id of the task 
                            associated with the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>businessProcess.processId</literal> — the id of the process
                            associated with the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>businessProcess.hasCurrentTask()</literal> — is a task
                            instance associated with the current conversation?
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>businessProcess.hasCurrentProcess()</literal> — is a process
                            instance associated with the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>createProcess(String name)</literal> — create an
                            instance of the named process definition and associate it with
                            the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>startTask()</literal> — start the task 
                            associated with the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>endTask(String transitionName)</literal> — end the task 
                            associated with the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>resumeTask(Long id)</literal> — associate the task with
                            the given id with the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>resumeProcess(Long id)</literal> — associate the process 
                            with the given id with the current conversation.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>transition(String transitionName)</literal> — trigger
                            the transition.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.taskInstance</literal></term>
                <listitem>
                    <para>
                        Manager component for the jBPM <literal>TaskInstance</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.processInstance</literal></term>
                <listitem>
                    <para>
                        Manager component for the jBPM <literal>ProcessInstance</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.jbpmContext</literal></term>
                <listitem>
                    <para>
                        Manager component for an event-scoped <literal>JbpmContext</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.taskInstanceList</literal></term>
                <listitem>
                    <para>
                        Manager component for the jBPM task list.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.pooledTaskInstanceList</literal></term>
                <listitem>
                    <para>
                        Manager component for the jBPM pooled task list.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.taskInstanceListForType</literal></term>
                <listitem>
                    <para>
                        Manager component for the jBPM task lists.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.pooledTask</literal></term>
                <listitem>
                    <para>
                        Action handler for pooled task assignment.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.processInstanceFinder</literal></term>
                <listitem>
                    <para>
                        Manager for the process instance task list.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.processInstanceList</literal></term>
                <listitem>
                    <para>
                         The process instance task list.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            All of these components are installed whenever the component
            <literal>org.jboss.seam.bpm.jbpm</literal> is installed.
        </para>
        
    </section>
    
    <section>
        <title>Security-related components</title>
        <para>
            These components relate to web-tier security.
        </para>
        
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.web.userPrincipal</literal></term>
                <listitem>
                    <para>
                        Manager component for the current user <literal>Principal</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.web.isUserInRole</literal></term>
                <listitem>
                    <para>
                        Allows JSF pages to choose to render a control, depending upon
                        the roles available to the current principal.
                        <literal>&lt;h:commandButton value="edit" rendered="#{isUserInRole['admin']}"/&gt;</literal>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    
    <section>
        <title>JMS-related components</title>
        <para>
            These components are for use with managed <literal>TopicPublisher</literal>s
            and <literal>QueueSender</literal>s (see below).
        </para>
        
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.jms.queueSession</literal></term>
                <listitem>
                    <para>
                        Manager component for a JMS <literal>QueueSession</literal> .
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.jms.topicSession</literal></term>
                <listitem>
                    <para>
                        Manager component for a JMS <literal>TopicSession</literal> .
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>     
    
    <section id="components.mail">
        <title>Mail-related components</title>
        <para>
            These components are for use with Seam's Email support 
        </para>
        
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.mail.mailSession</literal></term>
                <listitem>
                    <para>
                        Manager component for a JavaMail <literal>Session</literal>. The
                        session can be either looked up in the JNDI context (by setting the
                        <literal>sessionJndiName</literal> property) or it can created from the
                        configuration options in which case the <literal>host</literal> is
                        mandatory. 
                    </para>
                     <itemizedlist>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.mail.mailSession.host</literal> — the hostname of the SMTP server to use
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.mail.mailSession.port</literal> — the port of the SMTP server to use
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.mail.mailSession.username</literal> —  the username to use to connect to the SMTP server.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.mail.mailSession.password</literal> — the password to use to connect to the SMTP server
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.mail.mailSession.debug</literal> — enable JavaMail debugging (very verbose)
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.mail.mailSession.ssl</literal> — enable SSL connection to SMTP (will default to port 465)
                        </para>
                         <para>
                            <literal>org.jboss.seam.mail.mailSession.tls</literal> — by default true, enable TLS support in the mail session
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.mail.mailSession.sessionJndiName</literal> — name under which a javax.mail.Session is bound to JNDI.
                            If supplied, all other properties will be ignored.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    
    <section>
        <title>Infrastructural components</title>
        <para>
            These components provide critical platform infrastructure. You can install a component
            which isn't installed by default by setting <literal>install="true"</literal> on the 
            component in <literal>components.xml</literal>.
        </para>
        
    	<variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.core.init</literal></term>
                <listitem>
                    <para>
                        Initialization settings for Seam. Always installed.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.init.jndiPattern</literal> — the JNDI
                            pattern used for looking up session beans
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.init.debug</literal> — enable Seam
                            debug mode
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.init.clientSideConversations</literal> — 
                            if set to <literal>true</literal>, Seam will save conversation context
                            variables in the client instead of in the <literal>HttpSession</literal>.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.init.userTransactionName</literal> — the JNDI
                            name to use when looking up the JTA <literal>UserTransaction</literal> object.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.manager</literal></term>
                <listitem>
                    <para>
                        Internal component for Seam page and conversation context management. 
                        Always installed.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.manager.conversationTimeout</literal> — 
                            the conversation context timeout in milliseconds.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.manager.concurrentRequestTimeout</literal> — 
                            maximum wait time for a thread attempting to gain a lock on the long-running 
                            conversation context.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.manager.conversationIdParameter</literal> — 
                            the request parameter used to propagate the conversation id, default
                            to <literal>conversationId</literal>.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.core.manager.conversationIsLongRunningParameter</literal> — 
                            the request parameter used to propagate information about whether the conversation
                            is long-running, default to <literal>conversationIsLongRunning</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.navigation.pages</literal></term>
                <listitem>
                    <para>
                        Internal component for Seam workspace management. Always installed.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.navigation.pages.noConversationViewId</literal> 
                            — global setting for the view id to redirect to when a 
                            conversation entry is not found on the server side.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.navigation.pages.loginViewId</literal> 
                            — global setting for the view id to redirect to when an 
                            unauthenticated user tries to access a protected view.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.navigation.pages.httpPort</literal> 
                            — global setting for the port to use when the http scheme 
                            is requested.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.navigation.pages.httpsPort</literal> 
                            — global setting for the port to use when the https scheme 
                            is requested.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.navigation.pages.resources</literal> 
                            — a list of resources to search for <literal>pages.xml</literal>
                            style resources.  Defaults to <literal>WEB-INF/pages.xml</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.bpm.jbpm</literal></term>
                <listitem>
                    <para>
                        Bootstraps a <literal>JbpmConfiguration</literal>. Install as class 
                        <literal>org.jboss.seam.bpm.Jbpm</literal>. 
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.bpm.jbpm.processDefinitions</literal> — 
                            a list of resource names of jPDL files to be used for orchestration
                            of business processes.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.bpm.jbpm.pageflowDefinitions</literal> — 
                            a list of resource names of jPDL files to be used for orchestration
                            of conversation page flows.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.conversationEntries</literal></term>
                <listitem>
                    <para>
                        Internal session-scoped component recording the active long-running conversations
                        between requests.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.faces.facesPage</literal></term>
                <listitem>
                    <para>
                        Internal page-scoped component recording the conversation context associated
                        with a page.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.persistence.persistenceContexts</literal></term>
                <listitem>
                    <para>
                        Internal component recording the persistence contexts which were used in
                        the current conversation.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.jms.queueConnection</literal></term>
                <listitem>
                    <para>
                        Manages a JMS <literal>QueueConnection</literal>. Installed whenever
                        managed managed <literal>QueueSender</literal> is installed.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.jms.queueConnection.queueConnectionFactoryJndiName</literal> 
                            — the JNDI name of a JMS <literal>QueueConnectionFactory</literal>. Default
                            to <literal>UIL2ConnectionFactory</literal>
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.jms.topicConnection</literal></term>
                <listitem>
                    <para>
                        Manages a JMS <literal>TopicConnection</literal>. Installed whenever
                        managed managed <literal>TopicPublisher</literal> is installed.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>org.jboss.seam.jms.topicConnection.topicConnectionFactoryJndiName</literal> 
                            — the JNDI name of a JMS <literal>TopicConnectionFactory</literal>. Default
                            to <literal>UIL2ConnectionFactory</literal>
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.persistence.persistenceProvider</literal></term>
                <listitem>
                    <para>
                        Abstraction layer for non-standardized features of JPA provider.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.core.validators</literal></term>
                <listitem>
                    <para>
                        Caches instances of Hibernate Validator <literal>ClassValidator</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.faces.validation</literal></term>
                <listitem>
                    <para>
                        Allows the application to determine whether validation
                        failed or was successful.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.debug.introspector</literal></term>
                <listitem>
                    <para>
                        Support for the Seam Debug Page.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.debug.contexts</literal></term>
                <listitem>
                    <para>
                        Support for the Seam Debug Page.
                    </para>
                </listitem>
            </varlistentry>    	    
            <varlistentry>
                <term><literal>org.jboss.seam.exception.exceptions</literal></term>
                <listitem>
                    <para>
                        Internal component for exception handling.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.jboss.seam.transaction.transaction</literal></term>
                <listitem>
                    <para>
                         API for controlling transactions and abstracting the underlying
                         transaction management implementation behind a JTA-compatible
                         interface.
                    </para>
                </listitem>
            </varlistentry>
             <varlistentry>
                <term><literal>org.jboss.seam.faces.safeActions</literal></term>
                <listitem>
                    <para>
                        Decides if an action expression in an incoming URL is safe.  This 
                        is done by checking that the action expression exists in the view.
                    </para>
                </listitem>
             </varlistentry>
    	</variablelist>
   </section>

     <section>
        <title>Miscellaneous components</title>
        <para>
            These components don't fit into 
        </para>
        
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.async.dispatcher</literal></term>
                <listitem>
                    <para>
                        Dispatcher stateless session bean for asynchronous methods.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
         
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.core.image</literal></term>
                <listitem>
                    <para>
                         Image manipulation and interrogation.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
         
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.core.pojoCache</literal></term>
                <listitem>
                    <para>
                        Manager component for a PojoCache instance.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
         
        <variablelist>
            <varlistentry>
                <term><literal>org.jboss.seam.core.uiComponent</literal></term>
                <listitem>
                    <para>
                        Manages a map of UIComponents keyed by component id.
                    </para>
                </listitem>
            </varlistentry>
         </variablelist>
         
         
         
    </section>
    
    <section>
        <title>Special components</title>
        <para>
            Certain special Seam component classes are installable multiple times under names
            specified in the Seam configuration. For example, the following lines in 
            <literal>components.xml</literal> install and configure two Seam components:
        </para>
        
        <programlisting><![CDATA[<component name="bookingDatabase"
          class="org.jboss.seam.persistence.ManagedPersistenceContext">
    <property name="persistenceUnitJndiName">java:/comp/emf/bookingPersistence</property>
</component>

<component name="userDatabase"
          class="org.jboss.seam.persistence.ManagedPersistenceContext">
    <property name="persistenceUnitJndiName">java:/comp/emf/userPersistence</property>
</component>]]></programlisting>
        
        <para>
            The Seam component names are <literal>bookingDatabase</literal> and 
            <literal>userDatabase</literal>.
        </para>
        
    	<variablelist>
            <varlistentry>
                <term><emphasis>&lt;entityManager&gt;</emphasis></term>
                <term><literal>org.jboss.seam.persistence.ManagedPersistenceContext</literal></term>
                <listitem>
                    <para>
                        Manager component for a conversation scoped managed <literal>EntityManager</literal>
                        with an extended persistence context.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                           <emphasis>&lt;entityManager&gt;</emphasis>.entityManagerFactory 
                            — a value binding expression that evaluates to an instance of 
                            <literal>EntityManagerFactory</literal>.
                        </para>
                        <para>
                           <emphasis>&lt;entityManager&gt;</emphasis>.persistenceUnitJndiName 
                            — the JNDI name of the entity manager factory, default to 
                            java:/<emphasis>&lt;managedPersistenceContext&gt;</emphasis>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;entityManagerFactory&gt;</emphasis></term>
                <term><literal>org.jboss.seam.persistence.EntityManagerFactory</literal></term>
                <listitem>
                    <para>
                        Manages a JPA <literal>EntityManagerFactory</literal>. This is most useful
                        when using JPA outside of an EJB 3.0 supporting environment.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>entityManagerFactory.persistenceUnitName</literal> — 
                            the name of the persistence unit.
                        </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        See the API JavaDoc for further configuration properties.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;session&gt;</emphasis></term>
                <term><literal>org.jboss.seam.persistence.ManagedSession</literal></term>
                <listitem>
                    <para>
                        Manager component for a conversation scoped managed Hibernate <literal>Session</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                           <emphasis>&lt;session&gt;</emphasis>.sessionFactory 
                            — a value binding expression that evaluates to an instance of 
                            <literal>SessionFactory</literal>.
                        </para>
                        <para>
                           <emphasis>&lt;session&gt;</emphasis>.sessionFactoryJndiName 
                            — the JNDI name of the session factory, default to 
                            java:/<emphasis>&lt;managedSession&gt;</emphasis>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;sessionFactory&gt;</emphasis></term>
                <term><literal>org.jboss.seam.persistence.HibernateSessionFactory</literal></term>
                <listitem>
                    <para>
                        Manages a Hibernate <literal>SessionFactory</literal>.  
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>&lt;sessionFactory&gt;.cfgResourceName</literal> — 
                            the path to the configuration file. Default to <literal>hibernate.cfg.xml</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        See the API JavaDoc for further configuration properties.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;managedQueueSender&gt;</emphasis></term>
                <term><literal>org.jboss.seam.jms.ManagedQueueSender</literal></term>
                <listitem>
                    <para>
                        Manager component for an event scoped managed JMS <literal>QueueSender</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                           <emphasis>&lt;managedQueueSender&gt;</emphasis>.queueJndiName 
                            — the JNDI name of the JMS queue.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;managedTopicPublisher&gt;</emphasis></term>
                <term><literal>org.jboss.seam.jms.ManagedTopicPublisher</literal></term>
                <listitem>
                    <para>
                        Manager component for an event scoped managed JMS <literal>TopicPublisher</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                           <emphasis>&lt;managedTopicPublisher&gt;</emphasis>.topicJndiName 
                            — the JNDI name of the JMS topic.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;managedWorkingMemory&gt;</emphasis></term>
                <term><literal>org.jboss.seam.drools.ManagedWorkingMemory</literal></term>
                <listitem>
                    <para>
                        Manager component for a conversation scoped managed Drools <literal>WorkingMemory</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                           <emphasis>&lt;managedWorkingMemory&gt;</emphasis>.ruleBase 
                            — a value expression that evaluates to an instance of <literal>RuleBase</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;ruleBase&gt;</emphasis></term>
                <term><literal>org.jboss.seam.drools.RuleBase</literal></term>
                <listitem>
                    <para>
                        Manager component for an application scoped Drools <literal>RuleBase</literal>.
                        <emphasis>Note that this is not really intended for production usage, since
                        it does not support dynamic installation of new rules.</emphasis>
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                           <emphasis>&lt;ruleBase&gt;</emphasis>.ruleFiles 
                            — a list of files containing Drools rules.
                        </para>
                        <para>
                           <emphasis>&lt;ruleBase&gt;</emphasis>.dslFile 
                            — a Drools DSL definition.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;entityHome&gt;</emphasis></term>
                <term><literal>org.jboss.seam.framework.EntityHome</literal></term>
                  <listitem>
			  <para/>
                     <!-- TODO: Document this -->
                  </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;hibernateEntityHome&gt;</emphasis></term>
                <term><literal>org.jboss.seam.framework.HibernateEntityHome</literal></term>
               <listitem>
		       <para/>
                  <!-- TODO: Document this -->
               </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;entityQuery&gt;</emphasis></term>
                <term><literal>org.jboss.seam.framework.EntityQuery</literal></term>
               <listitem>
		       <para/>
                  <!-- TODO: Document this -->
               </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>&lt;hibernateEntityQuery&gt;</emphasis></term>
                <term><literal>org.jboss.seam.framework.HibernateEntityQuery</literal></term>
               <listitem>
		       <para/>
                  <!-- TODO: Document this -->
               </listitem>
            </varlistentry>
        </variablelist>
    </section>
    
</chapter>
    <chapter id="controls">
  <title>Seam JSF controls</title>
  <para>
    Seam includes a number of JSF controls that are useful for working with
    Seam. These are intended to complement the built-in JSF controls, and
    controls from other third-party libraries. We recommend
    JBoss RichFaces, and Apache MyFaces Trinidad tag libraries for use with Seam.
    We do not recommend the use of the Tomahawk tag library.
  </para>

  <section id="controls.tags">
  	<title>Tags</title>

  <para>
    To use these tags, define the "<literal>s</literal>" namespace in your page 
    as follows (facelets only):
  </para>

  <programlisting><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:s="http://jboss.com/products/seam/taglib">]]></programlisting>

  <para>
    The ui example demonstrates the use of a number of these tags.
  </para>

  <table>
    <title>Seam JSF Control Reference</title>

    <tgroup cols="2">
      <colspec colnum="1" colwidth="1*"/>
      <colspec colnum="2" colwidth="3*"/>

      <tbody>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:button&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              A button that supports invocation of an action with control
              over conversation propagation. <emphasis>Does not submit the form.</emphasis>
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>value</literal> — the label.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>action</literal> — a method binding that specified
                  the action listener.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>view</literal> — the JSF view id to link to.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>fragment</literal> — the fragment identifier to link to.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>disabled</literal> — is the link disabled?
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>propagation</literal> — determines the conversation
                  propagation style: <literal>begin</literal>, <literal>join</literal>,
                  <literal>nest</literal>, <literal>none</literal> or <literal>end</literal>.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>pageflow</literal> — a pageflow definition to begin.
                  (This is only useful when <literal>propagation="begin"</literal> or
                  <literal>propagation="join"</literal>.)
                </para>
              </listitem>
            </itemizedlist>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:button id="cancel" value="Cancel" 
          action="#{hotelBooking.cancel}"/>]]></programlisting>
            <para>
               You can specify both <literal>view</literal> and <literal>action</literal>
               on <literal>&lt;s:link /&gt;</literal>. In this case, the action 
               will be called once the redirect to the specified view has
               occured.
            </para>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:cache&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Cache the rendered page fragment using JBoss Cache. Note that
              <literal>&lt;s:cache&gt;</literal> actually uses the instance
              of JBoss Cache managed by the built-in <literal>pojoCache</literal>
              component.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>key</literal> — the key to cache rendered content,
                  often a value expression. For example, if we were caching a page
                  fragment that displays a document, we might use
                  <literal>key="Document-#{document.id}"</literal>.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>enabled</literal> — a value expression that determines
                  if the cache should be used.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>region</literal> — a JBoss Cache node to use (different
                  nodes can have different expiry policies).
                </para>
              </listitem>
            </itemizedlist>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:cache key="entry-#{blogEntry.id}" region="pageFragments">
  <div class="blogEntry">
    <h3>#{blogEntry.title}</h3>
    <div>
      <s:formattedText value="#{blogEntry.body}"/>
    </div>
    <p>
      [Posted on&#160;
      <h:outputText value="#{blogEntry.date}">
        <f:convertDateTime timezone="#{blog.timeZone}" locale="#{blog.locale}" 
                           type="both"/>
      </h:outputText>]
    </p>
  </div>
</s:cache>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:conversationId&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Add the conversation id to JSF link or button (e.g. <literal>&lt;h:commandLink /&gt;</literal>, <literal>&lt;s:button /&gt;</literal>).
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:conversationPropagation&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
              <para><emphasis>Description</emphasis></para>
              <para>
                Customize the conversation propagation for a command link or button
                (or similar JSF control). <emphasis>Facelets only.</emphasis>
              </para>
              <para><emphasis>Attributes</emphasis></para>
              <itemizedlist>
                <listitem>
                  <para>
                     <literal>type</literal> — determines the conversation
                     propagation style: <literal>begin</literal>, <literal>join</literal>,
                     <literal>nest</literal>, <literal>none</literal> or <literal>end</literal>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <literal>pageflow</literal> — a pageflow definition to begin.
                    (This is only useful when <literal>propagation="begin"</literal> or
                    <literal>propagation="join"</literal>.)
                  </para>
                </listitem>
              </itemizedlist>
              <para><emphasis>Usage</emphasis></para>
              <programlisting><![CDATA[<h:commandButton value="Apply" action="#{personHome.update}">
  <s:conversationPropagation type="join" />
</h:commandButton>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para><literal>&lt;s:convertDateTime&gt;</literal></para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Perform date or time conversions in the Seam timezone.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<h:outputText value="#{item.orderDate}">
  <s:convertDateTime type="both" dateStyle="full"/>
</h:outputText>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para><literal>&lt;s:convertEntity&gt;</literal></para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
               Assigns an entity converter to the current component.  This is primarily
               useful for radio button and dropdown controls.
            </para>

            <para>
              The converter works with any managed entity which has an <literal>@Id</literal> annotation -
              either simple or composite.
            </para>

            <para><emphasis>Attributes</emphasis></para>

            <para>
              None.
            </para>

            <para><emphasis>Configuration</emphasis></para>

            <para>
              You must use <emphasis>Seam managed transactions</emphasis> (see <xref linkend="persistence.seam-managed-transactions"/>) with <literal>&lt;s:convertEntity /&gt;</literal>.
            </para>

            <para>
              If your <emphasis>Managed Persistence Context</emphasis> isn't called
              <literal>entityManager</literal>, then you need to set it in components.xml:
            </para>
            <programlisting><![CDATA[<component name="org.jboss.seam.ui.EntityConverter">
  <property name="entityManager">#{em}</property>
</component>]]></programlisting>

            <para>
              If you are using a <emphasis>Managed Hibernate Session</emphasis> 
              then you need to set it in components.xml:
            </para>
            <programlisting><![CDATA[<component name="org.jboss.seam.ui.EntityConverter">
  <property name="session">#{hibernateSession}</property>
</component>]]></programlisting>

            <para>
              If you want to use more than one entity manager with the entity 
              converter, you can create a copy of the entity converter for each
              entity manager in components.xml:
            </para>
            
            <programlisting><![CDATA[<component name="myEntityConverter" class="org.jboss.seam.ui.converter.EntityConverter">
  <property name="entityManager">#{em}</property>
</component>]]></programlisting>

            <programlisting><![CDATA[<h:selectOneMenu value="#{person.continent}">
  <s:selectItems value="#{continents.resultList}" var="continent" 
                 label="#{continent.name}" />
    <f:converter converterId="myEntityConverter" />
</h:selectOneMenu>]]></programlisting>

            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<h:selectOneMenu value="#{person.continent}" required="true">
  <s:selectItems value="#{continents.resultList}" var="continent" 
                 label="#{continent.name}" 
                 noSelectionLabel="Please Select..."/>
    <s:convertEntity />
</h:selectOneMenu>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para><literal>&lt;s:convertEnum&gt;</literal></para>
          </entry>

          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Assigns an enum converter to the current component.  This is primarily
              useful for radio button and dropdown controls.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<h:selectOneMenu value="#{person.honorific}">
  <s:selectItems value="#{honorifics}" var="honorific" 
                 label="#{honorific.label}"
                 noSelectionLabel="Please select" />
  <s:convertEnum />
</h:selectOneMenu>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:decorate&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              "Decorate" a JSF input field when validation fails or when
              <literal>required="true"</literal> is set.
            </para>
            
            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>template</literal> — the facelets template to use to decorate the component
                </para>
              </listitem>
            </itemizedlist>
            <para>
              <literal>#{invalid}</literal> and <literal>#{required}</literal> are 
              available inside <literal>s:decorate</literal>; <literal>#{required}</literal> 
              evaluates to <literal>true</literal> if you have set the input component 
              being decorated as required, and <literal>#{invalid}</literal> evaluates 
              to <literal>true</literal> if a validation error occurs.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:decorate template="edit.xhtml">
  <ui:define name="label">Country:</ui:define>
    <h:inputText value="#{location.country}" required="true"/>
  </s:decorate>]]></programlisting>
    <programlisting><![CDATA[<ui:composition xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:s="http://jboss.com/products/seam/taglib">
                  
  <div>   
   
    <s:label styleClass="#{invalid?'error':''}">
      <ui:insert name="label"/>
      <s:span styleClass="required" rendered="#{required}">*</s:span>
    </s:label>
        
    <span class="#{invalid?'error':''}">
      <s:validateAll>
        <ui:insert/>
      </s:validateAll>
    </span>
        
    <s:message styleClass="error"/>     
      
  </div>   
  
</ui:composition>]]></programlisting>
          </entry>
        </row>
        
        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:defaultAction&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Specify the default action to run when the form is submitted using
              the enter key.
            </para>
            <para>
              Currently you can only nest it inside buttons (e.g. 
              <literal>&lt;h:commandButton /&gt;</literal>,
              <literal>&lt;a:commandButton /&gt;</literal> or
              <literal>&lt;tr:commandButton /&gt;</literal>).
            </para>
            <para>
              You must specify an id on the action source. You can only have one
              default action per form.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<h:commandButton id="foo" value="Foo" action="#{manager.foo}">
   <s:defaultAction />
</h:commandButton>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:div&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
             <para>
               Render a HTML <literal>&lt;div&gt;</literal>.
             </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:div rendered="#{selectedMember == null}">
  Sorry, but this member does not exist.
</s:div>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:enumItem&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
              <para><emphasis>Description</emphasis></para>
              <para>
                Creates a <literal>SelectItem</literal> from an enum value.
              </para>
              <para><emphasis>Attributes</emphasis></para>
              <itemizedlist>
                <listitem>
                  <para>
                     <literal>enumValue</literal> — the string representation of the enum
                     value.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <literal>label</literal> — the label to be used when rendering the <literal>SelectItem</literal>.
                  </para>
                </listitem>
              </itemizedlist>
              <para><emphasis>Usage</emphasis></para>
              <programlisting><![CDATA[<h:selectOneRadio id="radioList"
                  layout="lineDirection"
                  value="#{newPayment.paymentFrequency}">
  <s:convertEnum />
  <s:enumItem enumValue="ONCE" label="Only Once" />
  <s:enumItem enumValue="EVERY_MINUTE" label="Every Minute" />
  <s:enumItem enumValue="HOURLY"       label="Every Hour" />
  <s:enumItem enumValue="DAILY"        label="Every Day" />
  <s:enumItem enumValue="WEEKLY"       label="Every Week" />
</h:selectOneRadio>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:fileUpload&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
               Renders a file upload control.  This control must be used within a form with
               an encoding type of <literal>multipart/form-data</literal>, i.e:
            </para>

            <programlisting><![CDATA[<h:form enctype="multipart/form-data">]]></programlisting>

            <para>
              For multipart requests, the Seam Multipart servlet filter must also be configured
              in <literal>web.xml</literal>:
            </para>

            <programlisting><![CDATA[<filter>
  <filter-name>Seam Filter</filter-name>
  <filter-class>org.jboss.seam.servlet.SeamFilter</filter-class>
</filter>

<filter-mapping>
  <filter-name>Seam Filter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>]]></programlisting>

            <para><emphasis>Configuration</emphasis></para>

            <para>
              The following configuration options for multipart requests may be configured in components.xml:
            </para>

            <itemizedlist>
              <listitem>
                <para>
                  <literal>createTempFiles</literal> — if this option is set to true, uploaded files are
                  streamed to a temporary file instead of in memory.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>maxRequestSize</literal> — the maximum size of a file upload request, in bytes.
                </para>
              </listitem>
            </itemizedlist>

            <para>
              Here's an example:
            </para>

            <programlisting><![CDATA[<component class="org.jboss.seam.web.MultipartFilter">
  <property name="createTempFiles">true</property>
  <property name="maxRequestSize">1000000</property>
</component>]]></programlisting>

            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>data</literal> — this value binding receives the binary file data.
                  The receiving field should be declared as a <literal>byte[]</literal> or <literal>InputStream</literal> (required).
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>contentType</literal> — this value binding receives the file's
                  content type (optional).
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>fileName</literal> — this value binding receives the filename (optional).
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>fileSize</literal> — this value binding receives the file size (optional).
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>accept</literal> — a comma-separated list of content types to accept,
                  may not be supported by the browser.  E.g. <literal>"images/png,images/jpg"</literal>,
                  <literal>"images/*"</literal>.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>style</literal> — The control's style
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>styleClass</literal> — The control's style class
                </para>
              </listitem>
            </itemizedlist>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:fileUpload id="picture" data="#{register.picture}" 
              accept="image/png"
              contentType="#{register.pictureContentType}" />]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para><literal>&lt;s:formattedText&gt;</literal></para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
               Outputs <emphasis>Seam Text</emphasis>, a rich text markup useful for blogs, wikis and
               other applications that might use rich text.  See the Seam Text chapter for full usage.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>value</literal> — an EL expression specifying the rich text markup to render.
                </para>
              </listitem>
            </itemizedlist>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:formattedText value="#{blog.text}"/>]]></programlisting>
            <para><emphasis>Example</emphasis></para>
            <mediaobject>
              <imageobject role="fo">
                <imagedata fileref="/images/controls-seamtext.png" align="center"/>
              </imageobject>
              <imageobject role="html">
                <imagedata fileref="/images/controls-seamtext.png" align="center"/>
              </imageobject>
            </mediaobject>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:fragment&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              A non-rendering component useful for enabling/disabling rendering of it's children.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:fragment rendered="#{auction.highBidder ne null}">
  Current bid:
</s:fragment>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:graphicImage&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              An extended <literal>&lt;h:graphicImage&gt;</literal> that allows the image to be created in a Seam Component; further transforms
              can be applied to the image.
            </para>
            <para>
              All attributes for <literal>&lt;h:graphicImage&gt;</literal> are supported, as well as:
            </para>
            <para><emphasis>Attributes</emphasis></para>
             <itemizedlist>
               <listitem>
               <para>
                 <literal>value</literal> — image to display.  Can be a path <literal>String</literal>
                 (loaded from the classpath), a <literal>byte[]</literal>, a <literal>java.io.File</literal>,
                 a <literal>java.io.InputStream</literal> or a <literal>java.net.URL</literal>.  Currently supported
                 image formats are <literal>image/png</literal>, <literal>image/jpeg</literal> and <literal>image/gif</literal>.
               </para>
               </listitem>
                <listitem>
               <para>
                 <literal>fileName</literal> — if not specified the served image will have a generated file name.
                 If you want to name your file, you should specify it here.  This name should be unique
               </para>
               </listitem>
             </itemizedlist>
             <para><emphasis>Transformations</emphasis></para>
             <para>
               To apply a transform to the image, you would nest a tag specifying the transform to apply.  Seam currently supports these
               transforms:
             </para>
             <variablelist>
              <varlistentry>
                <term><literal>&lt;s:transformImageSize&gt;</literal></term>
                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <literal>width</literal> — new width of the image
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <literal>height</literal> — new height of the image
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <literal>maintainRatio</literal> — if <literal>true</literal>, and <emphasis>one</emphasis> of
                        <literal>width</literal>/<literal>height</literal> are specified, the image will be resized with the
                        dimension not specified being calculated to maintain the aspect ratio.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <literal>factor</literal> — scale the image by the given factor
                      </para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>&lt;s:transformImageBlur&gt;</literal></term>
                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <literal>radius</literal> — perform a convolution blur with the given radius
                      </para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>&lt;s:transformImageType&gt;</literal></term>
                <listitem>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <literal>contentType</literal> — alter the type of the image to either <literal>image/jpeg</literal> or <literal>image/png</literal>
                      </para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
            </variablelist>

            <para>
              It's easy to create your own transform - create a <literal>UIComponent</literal> which <literal>implements</literal>
              <literal>org.jboss.seam.ui.graphicImage.ImageTransform</literal>.  Inside the <literal>applyTransform()</literal>method
              use <literal>image.getBufferedImage()</literal> to get the original image and <literal>image.setBufferedImage()</literal>
              to set your transformed image.  Transforms are applied in the order specified in the view.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:graphicImage rendered="#{auction.image ne null}"
                value="#{auction.image.data}">
  <s:transformImageSize width="200" maintainRatio="true"/>
</s:graphicImage>]]></programlisting>
          </entry>
        </row>
        
        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:label&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              "Decorate" a JSF input field with the label.  The label is placed inside 
              the HTML <literal>&lt;label&gt;</literal> tag, and is associated with the
              nearest JSF input component.  It is often used with <literal>&lt;s:decorate&gt;</literal>.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>style</literal> — The control's style
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>styleClass</literal> — The control's style class
                </para>
              </listitem>
            </itemizedlist>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:label styleClass="label">
  Country:
</s:label>
<h:inputText value="#{location.country}" required="true"/>]]></programlisting>
          </entry>
        </row>
        
        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:link&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              A link that supports invocation of an action with control over conversation
              propagation. <emphasis>Does not submit the form.</emphasis>
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>value</literal> — the label.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>action</literal> — a method binding that specified
                  the action listener.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>view</literal> — the JSF view id to link to.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>fragment</literal> — the fragment identifier to link to.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>disabled</literal> — is the link disabled?
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>propagation</literal> — determines the conversation
                  propagation style: <literal>begin</literal>, <literal>join</literal>,
                  <literal>nest</literal>, <literal>none</literal> or <literal>end</literal>.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>pageflow</literal> — a pageflow definition to begin.
                  (This is only useful when <literal>propagation="begin"</literal> or
                  <literal>propagation="join"</literal>.)
                </para>
              </listitem>
            </itemizedlist>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:link id="register" view="/register.xhtml" 
        value="Register New User"/>]]></programlisting>
            <para>
               You can specify both <literal>view</literal> and <literal>action</literal>
               on <literal>&lt;s:link /&gt;</literal>. In this case, the action 
               will be called once the redirect to the specified view has
               occured.
            </para>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:message&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              "Decorate" a JSF input field with the validation error message.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<f:facet name="afterInvalidField">
  <s:span>
    &#160;Error:&#160;
    <s:message/>
  </s:span>
</f:facet>]]></programlisting>
          </entry>
        </row>
        
        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:remote&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Generates the Javascript stubs required to use Seam Remoting.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>include</literal> — a comma-separated list of the component names (or fully qualified class names)
                  for which to generate Seam Remoting Javascript stubs.  See <xref linkend="remoting"/> for more details.
                </para>
              </listitem>
            </itemizedlist>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:remote include="customerAction,accountAction,com.acme.MyBean"/>]]></programlisting>
          </entry>
        </row>        

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:selectDate&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              <emphasis>Deprecated.  Use <literal>&lt;rich:calendar /&gt;</literal> instead.</emphasis>
            </para>
            <para>
               Displays a dynamic date picker component that selects a date for the specified input field.
               The body of the <literal>selectDate</literal> element should contain HTML elements, such as
               text or an image, that prompt the user to click to display the date picker.  The date picker
               <emphasis>must</emphasis> be styled using CSS.  An example CSS file can be found in the Seam
               booking demo as <literal>date.css</literal>, or can be generated using seam-gen.  The CSS
               styles used to control the appearance of the date picker are also described below.
            </para>

            <para><emphasis>Attributes</emphasis></para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>for</literal> — The id of the input field that the date picker will insert the
                  selected date into.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>dateFormat</literal> — The date format string.  This should match the date format of the
                  input field.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>startYear</literal> — The popup year selector range will start at this year.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>endYear</literal> — The popup year selector range will end at this year.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>firstDayOfWeek</literal> — Controls which day is the first day of the week 
                  (0 = Sunday, 6 = Saturday).  If this attribute is not set, then the first day of the week will
                  default based on the user's locale.
                </para>
              </listitem>
            </itemizedlist>

            <para><emphasis>Usage</emphasis></para>
            <para>
              <programlisting><![CDATA[<div class="row">
  <h:outputLabel for="dob">Date of birth<em>*</em></h:outputLabel>
  <h:inputText id="dob" value="#{user.dob}" required="true">
    <s:convertDateTime pattern="MM/dd/yyyy"/>
  </h:inputText>
  <s:selectDate for="dob" startYear="1910" endYear="2007">
    <img src="img/datepicker.png"/>
  </s:selectDate>
  <div class="validationError"><h:message for="dob"/></div>
</div>]]></programlisting>
            </para>

            <para><emphasis>Example</emphasis></para>
            <mediaobject>
              <imageobject role="fo">
                <imagedata fileref="/images/controls-selectdate.png" align="center"/>
              </imageobject>
              <imageobject role="html">
                <imagedata fileref="/images/controls-selectdate.png" align="center"/>
              </imageobject>
            </mediaobject>

            <para><emphasis>CSS Styling</emphasis></para>
            <para>
              The following list describes the CSS class names that are used to control the style of the selectDate control.
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>seam-date</literal> — This class is applied to the outer <literal>div</literal> containing the
                  popup calendar. (1) It is also applied to the <literal>table</literal> that controls the inner layout of the
                  calendar. (2)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-header</literal> — This class is applied to the calendar header table row (<literal>tr</literal>)
                  and header table cells (<literal>td</literal>). (3)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-header-prevMonth</literal> — This class is applied to the "previous month" table cell,
                  (<literal>td</literal>), which when clicked causes the calendar to display the month prior to the one currently
                  displayed.  (4)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-header-nextMonth</literal> — This class is applied to the "next month" table cell,
                  (<literal>td</literal>), which when clicked causes the calendar to display the month following the one currently
                  displayed.  (5)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-headerDays</literal> — This class is applied to the calendar days header row
                  (<literal>tr</literal>), which contains the names of the week days. (6)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-footer</literal> — This class is applied to the calendar footer row
                  (<literal>tr</literal>), which displays the current date. (7)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-inMonth</literal> — This class is applied to the table cell
                  (<literal>td</literal>) elements that contain a date within the month currently displayed. (8)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-outMonth</literal> — This class is applied to the table cell
                  (<literal>td</literal>) elements that contain a date outside of the month currently displayed. (9)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-selected</literal> — This class is applied to the table cell
                  (<literal>td</literal>) element that contains the currently selected date. (10)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-dayOff-inMonth</literal> — This class is applied to the table cell
                  (<literal>td</literal>) elements that contain a "day off" date (i.e. weekend days, Saturday and Sunday)
                  within the currently selected month. (11)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-dayOff-outMonth</literal> — This class is applied to the table cell
                  (<literal>td</literal>) elements that contain a "day off" date (i.e. weekend days, Saturday and Sunday)
                  outside of the currently selected month. (12)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-hover</literal> — This class is applied to the table cell
                  (<literal>td</literal>) element over which the cursor is hovering. (13)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-monthNames</literal> — This class is applied to the <literal>div</literal>
                  control that contains the popup month selector. (14)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-monthNameLink</literal> — This class is applied to the anchor (<literal>a</literal>)
                  controls that contain the popup month names. (15)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-years </literal> — This class is applied to the <literal>div</literal>
                  control that contains the popup year selector. (16)
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>seam-date-yearLink</literal> — This class is applied to the anchor (<literal>a</literal>)
                  controls that contain the popup years. (15)
                </para>
              </listitem>
            </itemizedlist>

            <mediaobject>
              <imageobject role="fo">
                <imagedata fileref="/images/controls-selectdatecss.png" align="center"/>
              </imageobject>
              <imageobject role="html">
                <imagedata fileref="/images/controls-selectdatecss.png" align="center"/>
              </imageobject>
            </mediaobject>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:selectItems&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
               <para>
                 Creates a <literal>List&lt;SelectItem&gt;</literal> from a List, Set, DataModel or Array.
               </para>
             <para><emphasis>Attributes</emphasis></para>
             <itemizedlist>
               <listitem>
                 <para>
                     <literal>value</literal> — an EL expression specifying the data that backs the <literal>List&lt;SelectItem&gt;</literal>
                 </para>
               </listitem>
                <listitem>
                 <para>
                     <literal>var</literal> — defines the name of the local variable that holds the current object during iteration
                 </para>
               </listitem>
               <listitem>
                 <para>
                     <literal>label</literal> — the label to be used when rendering the <literal>SelectItem</literal>.  Can reference
                     the <literal>var</literal> variable
                 </para>
               </listitem>
               <listitem>
                 <para>
                     <literal>itemValue</literal> — Value to return to the server if this option is selected. Optional, by default the <literal>var</literal> object is used. Can reference the <literal>var</literal> variable                     
                 </para>
               </listitem>
               
                <listitem>
                 <para>
                     <literal>disabled</literal> — if true the <literal>SelectItem</literal> will be rendered disabled.  Can reference
                     the <literal>var</literal> variable
                 </para>
               </listitem>
               <listitem>
                 <para>
                     <literal>noSelectionLabel</literal> — specifies the (optional) label to place at the top of list (if
                     <literal>required="true"</literal> is also specified then selecting this value will cause a validation error)
                 </para>
               </listitem>
               <listitem>
                 <para>
                    <literal>hideNoSelectionLabel</literal> — if true, the <literal>noSelectionLabel</literal> will be hidden
                    when a value is selected
                 </para>
               </listitem>
             </itemizedlist>
             <para><emphasis>Usage</emphasis></para>
             <programlisting><![CDATA[<h:selectOneMenu value="#{person.age}" 
                 converter="ageConverter">
  <s:selectItems value="#{ages}" var="age" label="#{age}" />
</h:selectOneMenu>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:span&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Render a HTML <literal>&lt;span&gt;</literal>.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:span styleClass="required" rendered="#{required}">*</s:span>]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:taskId&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
              <para>
                Add the task id to an output link (or similar JSF control), when the
                task is available via <literal>#{task}</literal>.
              </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
                None.
            </para>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:validate&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              A non-visual control, validates a JSF input field against the bound
              property using Hibernate Validator.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<h:inputText id="userName" required="true" 
             value="#{customer.userName}">
  <s:validate />
</h:inputText>
<h:message for="userName" styleClass="error" />]]></programlisting>
          </entry>
        </row>

        <row>
          <entry valign="top">
            <para><literal>&lt;s:validateAll&gt;</literal></para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              A non-visual control, validates all child JSF input fields against their bound
              properties using Hibernate Validator.
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
            <para><emphasis>Usage</emphasis></para>
            <programlisting><![CDATA[<s:validateAll>
  <div class="entry">
    <h:outputLabel for="username">Username:</h:outputLabel>
    <h:inputText id="username" value="#{user.username}" 
                 required="true"/>
    <h:message for="username" styleClass="error" />
  </div>
  <div class="entry">
    <h:outputLabel for="password">Password:</h:outputLabel>
    <h:inputSecret id="password" value="#{user.password}" 
                   required="true"/>
    <h:message for="password" styleClass="error" />
  </div>
  <div class="entry">
    <h:outputLabel for="verify">Verify Password:</h:outputLabel>
    <h:inputSecret id="verify" value="#{register.verify}" 
                   required="true"/>
    <h:message for="verify" styleClass="error" />
  </div>
</s:validateAll>]]></programlisting>
          </entry>
        </row>
        
        <row>
          <entry valign="top">
            <para>
              <literal>&lt;s:validateFormattedText&gt;</literal>
            </para>
          </entry>
          <entry valign="top">
            <para><emphasis>Description</emphasis></para>
            <para>
              Checks that the submitted value is valid Seam Text
            </para>
            <para><emphasis>Attributes</emphasis></para>
            <para>
              None.
            </para>
          </entry>
        </row>        

      </tbody>
    </tgroup>
  </table>
</section>
<section id="controls.annotations">
  <title>Annotations</title>
  
  <para>
    Seam also provides annotations to allow you to use Seam components as JSF
    converters and validators:
    
  </para>
  <variablelist spacing="compact">
    <varlistentry>
      <term>
        <literal>@Converter</literal>
      </term>
      <listitem>
        <programlisting><![CDATA[@Name("itemConverter") 
@BypassInterceptors 
@Converter
public class ItemConverter implements Converter {
   
  @Transactional
  public Object getAsObject(FacesContext context, UIComponent cmp, String value) {
    EntityManager entityManager = (EntityManager) Component.getInstance("entityManager");
    entityManager.joinTransaction();
    // Do the conversion
  }
  
  public String getAsString(FacesContext context, UIComponent cmp, Object value) {
    // Do the conversion
  }
  
}]]></programlisting>

          <programlisting><![CDATA[<h:inputText value="#{shop.item}" converter="itemConverter" />]]></programlisting>
            
          <para>
            Registers the Seam component as a JSF converter.  Shown here is a 
            converter which is able to access the JPA EntityManager inside a 
            JTA transaction, when converting the value back to it's object
            representation.
          </para>
        </listitem>
    </varlistentry>
    <varlistentry>
      <term>
        <literal>@Validator</literal>
      </term>
      <listitem>
        <programlisting><![CDATA[@Name("itemValidator") 
@BypassInterceptors 
@Validator
public class ItemValidator implements Validator {
   
  public void validate(FacesContext context, UIComponent cmp, Object value)
    throws ValidatorException {
    ItemController ItemController = (ItemController) Component.getInstance("itemController");
    return itemController.validate(value);
  }
  
  }]]></programlisting>
         
         <programlisting><![CDATA[<h:inputText value="#{shop.item}" validator="itemValidator" />]]></programlisting>
            <para>
              Registers the Seam component as a JSF validator.  Shown here is a 
              validator which injects another Seam component; the injected 
              component is used to validate the value.
            </para>
        </listitem>
    </varlistentry>
  </variablelist>
</section>


</chapter>
    <chapter id="elenhancements">
   <title>JBoss EL</title>
   
   <para>
      Seam uses JBoss EL which provides an extension to the standard Unified 
      Expression Language (EL). JBoss EL provides a number of enhancements that 
      increase the expressiveness and power of EL expressions. 
   </para>
   
   <section>
      <title>Parameterized Expressions</title>
   
      <para>
         Standard EL does not allow you to use a method with user defined 
         parameters — of course, JSF listener methods (e.g. a 
         <literal>valueChangeListener</literal>) take parameters provided by JSF. 
      </para>
      
      <para> 
         JBoss EL removes this restriction. For example: 
      </para>
      
      <programlisting><![CDATA[<h:commandButton action="#{hotelBooking.bookHotel(hotel)}" value="Book Hotel"/>]]></programlisting>
      
      <programlisting><![CDATA[@Name("hotelBooking")
public class HotelBooking {
   
   public String bookHotel(Hotel hotel) {
      // Book the hotel
   }
}]]></programlisting>
      
      <section>
         <title>Usage</title>
      
         <para>
            Just as in calls to method from Java, parameters are surrounded by 
            parentheses, and separated by commas: 
         </para>
         
         <programlisting><![CDATA[<h:commandButton action="#{hotelBooking.bookHotel(hotel, user)}" value="Book Hotel"/>]]></programlisting>
         
         <para> 
            The parameters <literal>hotel</literal> and <literal>user</literal> 
            will be evaluated as value expressions and passed to the 
            <literal>bookHotel()</literal> method of the component. 
         </para>
         <para>
            Any value expression may be used as a parameter: 
         </para>
         
         <programlisting><![CDATA[<h:commandButton 
   action="#{hotelBooking.bookHotel(hotel.id, user.username)}" 
   value="Book Hotel"/>]]></programlisting>
         
         <para>
            It's important to fully understand how this extension to EL works. 
            When the page is rendered, the parameter <emphasis>names</emphasis> 
            are stored (for example, <literal>hotel.id</literal> and 
            <literal>user.username</literal>), and evaluated (as value 
            expressions) when the page is submitted. You can't pass objects as
            parameters! 
         </para>
         
         <para>
            You must ensure that the parameters are available not only when the 
            page is rendered, but also when it is submittedIf the arguments can 
            not be resolved when the page is submitted the action method will be
            called with <literal>null</literal> arguments! 
         </para>
         
         <para>
            You can also pass literal strings using single quotes: 
         </para>
         
         <programlisting><![CDATA[<h:commandLink action="#{printer.println('Hello world!')}" value="Hello"/>]]></programlisting>
         
         <para> 
            Unified EL also supports value expressions, used to bind a field to 
            a backing bean. Value expressions use JavaBean naming conventions 
            and expect a getter/setter pair. Often JSF expects a value 
            expression where only retrieval (get) is needed (e.g. the 
            <literal>rendered</literal> attribute). Many objects, however, don't 
            have appropriately named property accessors or require parameters. 
         </para>
         
         <para>
            JBoss EL removes this restriction by allowing values to be retrieved
            using the method syntax. For example: 
         </para>
         
         <programlisting><![CDATA[<h:outputText value="#{person.name}" rendered="#{person.name.length() > 5}" />]]></programlisting>
         
         <para>
            You can access the size of a collection in a similar manner: 
         </para>
         
         <programlisting>#{searchResults.size()}</programlisting>
         
         <para>
            In general any expression of the form #{obj.property} would be 
            identical to the expression #{obj.getProperty()}. 
         </para>
         <para>
            Parameters are also allowed. The following example calls the
            <literal>productsByColorMethod</literal> with a literal string 
            argument: 
         </para>
         
         <programlisting>#{controller.productsByColor('blue')}</programlisting>
         
      </section>
      
      <section>
         <title>Limitations and Hints</title>
         
         <para> 
            When using JBoss EL you should keep the following points in mind: 
         </para>
         
         <itemizedlist>
            <listitem>
               <para>
                  <emphasis>Incompatibility with JSP 2.1</emphasis> — 
                  JBoss EL can't currently be used with JSP 2.1 as the compiler 
                  rejects expressions with parameters in. So, if you want to use
                  this extension with JSF 1.2, you will need to use Facelets. 
                  The extension works correctly with JSP 2.0. 
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>Use inside iterative components</emphasis> — 
                  Components like <literal>&lt;c:forEach /&gt;</literal> and 
                  <literal>&lt;ui:repeat /&gt;</literal>iterate over a List or 
                  array, exposing each item in the list to nested components. 
                  This works great if you are selecting a row using a 
                  <literal>&lt;h:commandButton /&gt;</literal> or 
                  <literal>&lt;h:commandLink /&gt;</literal>: 
               </para>
               <programlisting><![CDATA[@Factory("items")
public List<Item> getItems() {
   return entityManager.createQuery("select ...").getResultList();
}]]></programlisting>
               <programlisting><![CDATA[<h:dataTable value="#{items}" var="item">
   <h:column>
      <h:commandLink value="Select #{item.name}" action="#{itemSelector.select(item})" />
   </h:column>
</h:dataTable>]]></programlisting>
               <para>
                  However if you want to use <literal>&lt;s:link /&gt;</literal>
                  or <literal>&lt;s:button /&gt;</literal> you 
                  <emphasis>must</emphasis> expose the items as a 
                  <literal>DataModel</literal>, and use a 
                  <literal>&lt;dataTable /&gt;</literal> (or equivalent from a 
                  component set like <literal>&lt;rich:dataTable /&gt;</literal>
                  ). Neither <literal>&lt;s:link /&gt;</literal> or 
                  <literal>&lt;s:button /&gt;</literal> submit the form (and
                  therefore produce a bookmarkable link) so a "magic" parameter
                  is needed to recreate the item when the action method is 
                  called. This magic parameter can only be added when a 
                  data table backed by a <literal>DataModel</literal> is used.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>Calling a <literal>MethodExpression</literal> from 
                  Java code</emphasis> — Normally, when a 
                  <literal>MethodExpression</literal> is created, the parameter 
                  types are passed in by JSF. In the case of a method binding, 
                  JSF assumes that there are no parameters to pass. With this
                  extension, we can't know the parameter types until after the 
                  expression has been evaluated. This has two minor 
                  consequences: 
               </para>
               
               <itemizedlist>
                  <listitem>
                     <para> 
                        When you invoke a <literal>MethodExpression</literal> in
                        Java code, parameters you pass may be ignored. 
                        Parameters defined in the expression will take 
                        precedence. 
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        Ordinarily, it is safe to call 
                        <literal>methodExpression.getMethodInfo().getParamTypes()</literal>
                        at any time. For an expression with parameters, you must 
                        first invoke the <literal>MethodExpression</literal> 
                        before calling <literal>getParamTypes()</literal>. 
                     </para>
                  </listitem>
               </itemizedlist>
               
               <para>
                  Both of these cases are exceedingly rare and only apply when 
                  you want to invoke the <literal>MethodExpression</literal> by 
                  hand in Java code. 
               </para>
            </listitem>
         </itemizedlist>
      </section>
   </section>
   
   <section>
      <title>Projection</title>
   
      <para>
         JBoss EL supports a limited projection syntax. A projection expression 
         maps a sub-expression across a multi-valued (list, set, etc...) 
         expression. For instance, the expression: 
      </para>
      
      <programlisting>#{company.departments}</programlisting>
      
      <para>
         might return a list of departments. If you only need a list of 
         department names, your only option is to iterate over the list to 
         retrieve the values. JBoss EL allows this with a projection expression: 
      </para>
      
      <programlisting>#{company.departments.{d|d.name}}</programlisting>
      
      <para>
         The subexpression is enclosed in braces. In this example, the 
         expression <literal>d.name</literal> is evaluated for each department, 
         using <literal>d</literal> as an alias to the department object. The 
         result of this expression will be a list of String values. 
      </para>
      
      <para>
         Any valid expression can be used in an expression, so it would be 
         perfectly valid to write the following, assuming you had a use for the 
         lengths of all the department names in a company: 
      </para>
      
      <programlisting>#{company.departments.{d|d.size()}}</programlisting>
      
      <para>
         Projections can be nested. The following expression returns the last 
         names of every employee in every department: 
      </para>
      
      <programlisting>#{company.departments.{d|d.employees.{emp|emp.lastName}}}</programlisting>
      
      <para> 
         Nested projections can be slightly tricky, however. The following 
         expression looks like it returns a list of all the employees in all the 
         departments:
      </para>
      
      <programlisting>#{company.departments.{d|d.employees}}</programlisting>
      
      <para>
         However, it actually returns a list containing a list of the employees 
         for each individual department. To combine the values, it is necessary 
         to use a slightly longer expression: 
      </para>
      
      <programlisting>#{company.departments.{d|d.employees.{e|e}}}</programlisting>
      
      <para> 
         It is important to note that this syntax cannot be parsed by Facelets
         or JSP and thus cannot be used in xhtml or JSP files. We anticipate 
         that the projection syntax will change in future versions of JBoss EL. 
      </para>
      
   </section>
</chapter>
    <chapter id="testing">
	<title>Testing Seam applications</title>
	<para>
	    Most Seam applications will need at least two kinds of automated tests:
	    <emphasis>unit tests</emphasis>, which test a particular Seam component
	    in isolation, and scripted <emphasis>integration tests</emphasis> which
	    exercise all Java layers of the application (that is, everything except the
	    view pages).
	</para>
	<para>
	   Both kinds of tests are very easy to write.
	</para>
	
	<section>
		<title>Unit testing Seam components</title>
		<para>
		    All Seam components are POJOs. This is a great place to start if you
		    want easy unit testing. And since Seam emphasises the use of bijection 
            for inter-component interactions and access to contextual objects, it's 
            very easy to test a Seam component outside of its normal runtime 
            environment.
		</para>
		<para>
		    Consider the following Seam Component which creates a statement of
            account for a customer:
		</para>
		
        <programlisting><![CDATA[@Stateless
@Scope(EVENT)
@Name("statementOfAccount")
public class StatementOfAccount {
   
   @In(create=true) EntityManager entityManager
   
   private double statementTotal;
   
   @In
   private Customer customer;
   
   @Create
   public void create() {
      List<Invoice> invoices = entityManager
         .createQuery("select invoice from Invoice invoice where invoice.customer = :customer")
         .setParameter("customer", customer)
         .getResultList();
      statementTotal = calculateTotal(invoices);
   }
   
   public double calculateTotal(List<Invoice> invoices) {
      double total = 0.0;
      for (Invoice invoice: invoices)
      {
         double += invoice.getTotal();
      }
      return total;
   }
   
   // getter and setter for statementTotal
   
}]]></programlisting>

        <para>
            We could write a unit test for the calculateTotal method (which tests
            the business logic of the component) as follows:
        </para>

        <programlisting><![CDATA[public class StatementOfAccountTest {
    
    @Test
    public testCalculateTotal {
       List<Invoice> invoices = generateTestInvoices(); // A test data generator
       double statementTotal = new StatementOfAccount().calculateTotal(invoices);
       assert statementTotal = 123.45;
    }   
}
]]></programlisting>

        <para>
            You'll notice we aren't testing retrieving data from or persisting
            data to the database; nor are we testing any functionality 
            provided by Seam. We are just testing the logic of our POJOs. Seam
            components don't usually depend directly upon container infrastructure,
            so most unit testing as as easy as that!
       </para>
       <para>    
            However, if you want to test the entire application, read on.
       </para>
        
    </section>
    
    <section>
        <title>Integration testing Seam components</title>
        
        <para>
            Integration testing is slightly more difficult. In this case, we can't eliminate
            the container infrastructure; indeed, that is part of what is being tested! At
            the same time, we don't want to be forced to deploy our application to an
            application server to run the automated tests. We need to be able to reproduce
            just enough of the container infrastructure inside our testing environment to be 
            able to exercise the whole application, without hurting performance too much.
        </para>
        
        <para>
            The approach taken by Seam is to let you write tests that exercise your
            components while running inside a pruned down container environment (Seam,
            together with the JBoss Embedded container; n.b. JBoss Embedded requires
            JDK 1.5 and does not work with JDK 1.6).
        </para>
        
<programlisting><![CDATA[public class RegisterTest extends SeamTest
{
   
   @Test
   public void testRegisterComponent() throws Exception
   {
            
      new ComponentTest() {

         protected void testComponents() throws Exception
         {
            setValue("#{user.username}", "1ovthafew");
            setValue("#{user.name}", "Gavin King");
            setValue("#{user.password}", "secret");
            assert invokeMethod("#{register.register}").equals("success");
            assert getValue("#{user.username}").equals("1ovthafew");
            assert getValue("#{user.name}").equals("Gavin King");
            assert getValue("#{user.password}").equals("secret");
         }
         
      }.run();
      
   }

   ...
   
}]]></programlisting>

        
        <section>
            <title>Using mocks in integration tests</title>
            
            <para>
                Occasionally, we need to be able to replace the implementation of some
                Seam component that depends upon resources which are not available in 
                the integration test environment. For example, suppose we have some
                Seam component which is a facade to some payment processing system:
            </para>
            
            <programlisting><![CDATA[@Name("paymentProcessor")
public class PaymentProcessor {
    public boolean processPayment(Payment payment) { .... }
}]]></programlisting>
            
            <para>
                For integration tests, we can mock out this component as follows:
            </para>
            
            <programlisting><![CDATA[@Name("paymentProcessor")
@Install(precedence=MOCK)
public class MockPaymentProcessor extends PaymentProcessor {
    public boolean processPayment(Payment payment) {
        return true;
    }
}]]></programlisting>
            
            <para>
                Since the <literal>MOCK</literal> precedence is higher than the default
                precedence of application components, Seam will install the mock 
                implementation whenever it is in the classpath. When deployed into 
                production, the mock implementation is absent, so the real component
                will be installed.
            </para>
            
        </section>
        
    </section>
    
    <section>
        <title>Integration testing Seam application user interactions</title>
        
        <para>
            An even harder problem is emulating user interactions. A third problem is where 
            to put our assertions. Some test frameworks let us test the whole application
            by reproducing user interactions with the web browser. These frameworks have
            their place, but they are not appropriate for use at development time.
        </para>
        
        <para>
            <literal>SeamTest</literal> lets you write <emphasis>scripted</emphasis> tests,
            in a simulated JSF environment. The role of a scripted test is to reproduce 
            the interaction between the view and the Seam components. In other words, you 
            get to pretend you are the JSF implementation!
        </para>
        
        <para>
            This approach tests everything except the view.
        </para>
        
        <para>
            Let's consider a JSP view for the component we unit tested above:
        </para>
        
        <programlisting><![CDATA[<html>
 <head>
  <title>Register New User</title>
 </head>
 <body>
  <f:view>
   <h:form>
     <table border="0">
       <tr>
         <td>Username</td>
         <td><h:inputText value="#{user.username}"/></td>
       </tr>
       <tr>
         <td>Real Name</td>
         <td><h:inputText value="#{user.name}"/></td>
       </tr>
       <tr>
         <td>Password</td>
         <td><h:inputSecret value="#{user.password}"/></td>
       </tr>
     </table>
     <h:messages/>
     <h:commandButton type="submit" value="Register" action="#{register.register}"/>
   </h:form>
  </f:view>
 </body>
</html>]]></programlisting>

        <para>
            We want to test the registration functionality of our application (the stuff
            that happens when the user clicks the Register button). We'll reproduce the JSF 
            request lifecycle in an automated TestNG test:
        </para>

<programlisting><![CDATA[public class RegisterTest extends SeamTest
{
   
   @Test
   public void testRegister() throws Exception
   {
            
      new FacesRequest() {

         @Override
         protected void processValidations() throws Exception
         {
            validateValue("#{user.username}", "1ovthafew");
            validateValue("#{user.name}", "Gavin King");
            validateValue("#{user.password}", "secret");
            assert !isValidationFailure();
         }
         
         @Override
         protected void updateModelValues() throws Exception
         {
            setValue("#{user.username}", "1ovthafew");
            setValue("#{user.name}", "Gavin King");
            setValue("#{user.password}", "secret");
         }

         @Override
         protected void invokeApplication()
         {
            assert invokeMethod("#{register.register}").equals("success");
         }

         @Override
         protected void renderResponse()
         {
            assert getValue("#{user.username}").equals("1ovthafew");
            assert getValue("#{user.name}").equals("Gavin King");
            assert getValue("#{user.password}").equals("secret");
         }
         
      }.run();
      
   }

   ...
   
}]]></programlisting>

        <para>
            Notice that we've extended <literal>SeamTest</literal>, which provides a 
            Seam environment for our components, and written our test script as an 
            anonymous class that extends <literal>SeamTest.FacesRequest</literal>, 
            which provides an emulated JSF request lifecycle. (There is also a
            <literal>SeamTest.NonFacesRequest</literal> for testing GET requests.)
            We've written our code in methods which are named for the various JSF 
            phases, to emulate the calls that JSF would make to our components. Then 
            we've thrown in various assertions.
        </para>
        
        <para>
            You'll find plenty of integration tests for the Seam example applications
            which demonstrate more complex cases. There are instructions for running
            these tests using Ant, or using the TestNG plugin for eclipse:
        </para>

        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/plugin-testng.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="/images/plugin-testng.png" align="center"/>
          </imageobject>
        </mediaobject>
       
        <section>
           <title>Configuration</title>
           
           <para>
              If you used seam-gen to create your project you are ready to start
              writing tests. Otherwise you'll need to setup the testing
              environment in your favorite build tool (e.g. ant, maven, 
              eclipse).
           </para>
           
           <para>
              First, lets look at the dependencies you need at a minimum:
           </para>
           
           <table>
              <title/>
              <tgroup cols="3">
                 <thead>
                    <row>
                       <entry>
                          Group Id
                       </entry>
                       <entry>
                          Artifact Id
                       </entry>
                       <entry>
                          Location in Seam
                       </entry>
                    </row>
                 </thead>
                 <tbody>
                    <row>
                       <entry>
                          <literal>org.jboss.seam.embedded</literal>
                       </entry>
                       <entry>
                          <literal>hibernate-all</literal>
                       </entry>
                       <entry>
                          <literal>lib/test/hibernate-all.jar</literal>
                       </entry>
                    </row>
                    <row>
                       <entry>
                          <literal>org.jboss.seam.embedded</literal>
                       </entry>
                       <entry>
                          <literal>jboss-embedded-all</literal>
                       </entry>
                       <entry>
                          <literal>lib/test/jboss-embedded-all.jar</literal>
                       </entry>
                    </row>
                    <row>
                       <entry>
                          <literal>org.jboss.seam.embedded</literal>
                       </entry>
                       <entry>
                          <literal>thirdparty-all</literal>
                       </entry>
                       <entry>
                          <literal>lib/test/thirdparty-all.jar</literal>
                       </entry>
                    </row>
                    <row>
                       <entry>
                          <literal>org.jboss.seam.embedded</literal>
                       </entry>
                       <entry>
                          <literal>jboss-embedded-api</literal>
                       </entry>
                       <entry>
                          <literal>lib/jboss-embedded-api.jar</literal>
                       </entry>
                    </row>
                    <row>
                       <entry>
                          <literal>org.jboss.seam</literal>
                       </entry>
                       <entry>
                          <literal>jboss-seam</literal>
                       </entry>
                       <entry>
                          <literal>lib/jboss-seam.jar</literal>
                       </entry>
                    </row>
                    <row>
                       <entry>
                          <literal>org.jboss.el</literal>
                       </entry>
                       <entry>
                          <literal>jboss-el</literal>
                       </entry>
                       <entry>
                          <literal>lib/jboss-el.jar</literal>
                       </entry>
                    </row>
                    <row>
                       <entry>
                          <literal>javax.faces</literal>
                       </entry>
                       <entry>
                          <literal>jsf-api</literal>
                       </entry>
                       <entry>
                          <literal>lib/jsf-api.jar</literal>
                       </entry>
                    </row>
                    <row>
                       <entry>
                          <literal>javax.activation</literal>
                       </entry>
                       <entry>
                          <literal>javax.activation</literal>
                       </entry>
                       <entry>
                          <literal>lib/activation.jar</literal>
                       </entry>
                    </row>
                 </tbody>
              </tgroup>
           </table>
           
           <para>
              It's very important you don't put the compile time JBoss AS 
              dependencies from <literal>lib/</literal> (e.g. 
              <literal>jboss-system.jar</literal>) on the classpath, these
              will cause Embedded JBoss to not boot. So, just add the 
              dependencies (e.g. Drools, jBPM)you need as you go.
           </para>
           
           <para>
              You also need to include the <literal>bootstrap/</literal> 
              directory on the classpath; <literal>bootstrap/</literal> contains
              the configuration for Embedded JBoss.
           </para>
           
           <para>
              And, of course you need to put your built project and tests onto
              the classpath. Don't forget to put all the correct configuration
              files for JPA and Seam onto the classpath as well.Seam asks 
              Embedded JBoss to deploy any resource (jar or directory)
              which has <literal>seam.properties</literal> in it's root.
              Therefore, if you don't assemble a directory structure that 
              resembles a deployable archive containing your built project, you
              must put a <literal>seam.properties</literal> in each resource.
           </para>
           
         </section>
         
        <section>
           <title>Using SeamTest with another test framework</title>
         
           <para>
              Seam provides TestNG support out of the box, but you can also use
              another test framework, such as JUnit, if you want.
           </para>
           
           <para>
              You'll need to provide an implementation of 
              <literal>AbstractSeamTest</literal> which does the following:
           </para>
           
           <itemizedlist>
              <listitem>
                 <para>
                    Calls <literal>super.begin()</literal> before every test
                    method.
                 </para>
              </listitem>
              <listitem>
                 <para>
                    Calls <literal>super.end()</literal> after every test
                    method.
                 </para>
              </listitem>
              <listitem>
                 <para>
                    Calls <literal>super.setupClass()</literal> to setup 
                    integration test environment. This should be called before
                    any test methods are called.
                 </para>
              </listitem>
              <listitem>
                 <para>
                    Calls <literal>super.cleanupClass()</literal> to clean up
                    the integration test environment.
                 </para>
              </listitem>
              <listitem>
                 <para>
                    Calls <literal>super.startSeam()</literal> to start Seam at
                    the start of integration testing.
                 </para>
              </listitem>
              <listitem>
                 <para>
                    Calls <literal>super.stopSeam()</literal> to cleanly shut
                    down Seam at the end of integration testing.
                 </para>
              </listitem>
           </itemizedlist>
        </section>
        
        <section>
          <title>Integration Testing with Mock Data</title>
          
          <para>
            If you need to insert or clean data in your database before each 
            test you can use Seam's integration with DBUnit.  To do this, extend 
            DBUnitSeamTest rather than SeamTest.
         </para>
         
         <para>
            You need to provide a dataset for DBUnit:
         </para>
          
          <programlisting><![CDATA[<dataset>
   
   <ARTIST 
      id="1"
      dtype="Band"
      name="Pink Floyd" />
      
   <DISC
      id="1"
      name="Dark Side of the Moon"
      artist_id="1" />
      
</dataset>]]></programlisting>

         <para>
            and tell Seam about it by overriding <literal>prepareDBUnitOperations()</literal>:
         </para>
      
         <programlisting><![CDATA[protected void prepareDBUnitOperations() {
    beforeTestOperations.add(
       new DataSetOperation("my/datasets/BaseData.xml")
    );
 }]]></programlisting>
 
         <para>
           <literal>DataSetOperation</literal> defaults to <literal>DatabaseOperation.CLEAN_INSERT</literal>
           if no other operation is specified as a constructor argument. The 
           above example cleans all tables defined <literal>BaseData.xml</literal>, 
           then inserts all rows declared in <literal>BaseData.xml</literal> 
           before each <literal>@Test</literal> method is invoked.
         </para>
         
         <para>
           If you require extra cleanup after a test method executes, add 
           operations to <literal>afterTestOperations</literal> list.
         </para>
         
         <para>
           You need to tell DBUnit about the datasource you are using by 
           setting a TestNG test parameter named <literal>datasourceJndiName</literal>:
         </para>
         
         <programlisting>
   <![CDATA[<parameter name="datasourceJndiName" value="java:/seamdiscsDatasource"/>]]>
         </programlisting> 
          
        </section>
        
        <section id="testing.mail">
          <title>Integration Testing Seam Mail</title>
          
          <para>
            Warning! This feature is still under development.
          </para>
          
          <para>
            It's very easy to integration test your Seam Mail:
          </para>
          
          <programlisting><![CDATA[public class MailTest extends SeamTest {
    
   @Test
   public void testSimpleMessage() throws Exception {
        
      new FacesRequest() {

         @Override
         protected void updateModelValues() throws Exception {
            setValue("#{person.firstname}", "Pete");
            setValue("#{person.lastname}", "Muir");
            setValue("#{person.address}", "test@example.com");
         }
            
         @Override
         protected void invokeApplication() throws Exception {
            MimeMessage renderedMessage = getRenderedMailMessage("/simple.xhtml");
            assert renderedMessage.getAllRecipients().length == 1;
            InternetAddress to = (InternetAddress) renderedMessage.getAllRecipients()[0];
            assert to.getAddress().equals("test@example.com");
         }
            
      }.run();       
   }
}]]></programlisting>

          <para>
            We create a new <literal>FacesRequest</literal> as normal.  Inside 
            the invokeApplication hook we render the message using 
            <literal>getRenderedMailMessage(viewId);</literal>, passing the 
            viewId of the message to render.  The method returns the rendered
            message on which you can do your tests. You can of course also use
            any of the standard JSF lifecycle methods.
          </para>
          
          <para>
            There is no support for rendering standard JSF components so you 
            can't test the content body of the mail message easily.
          </para>
        </section> 
        
    </section>
	
</chapter>
    <chapter id="tools">
  <title>Seam tools</title>
  
  <section>
    <title>jBPM designer and viewer</title>
  
     <para>
       The jBPM designer and viewer will let you design and view in a nice way your business processes and your pageflows.
       This convenient tool is part of JBoss Eclipse IDE and more details can be found in the jBPM's documentation (http://docs.jboss.com/jbpm/v3/gpd/)         
     </para> 
     
     <section>
       <title>Business process designer</title>
       
       <para>
         This tool lets you design your own business process in a graphical way.
       </para>
       
       <screenshot>
         <screeninfo>Business process designer</screeninfo>
         <mediaobject>
           <imageobject role="fo">
             <imagedata fileref="/images/bpmd.png" align="center"/>
           </imageobject>
           <imageobject role="html">
             <imagedata fileref="/images/bpmd.png" align="center"/>
           </imageobject>
         </mediaobject>
       </screenshot>
       
     </section>
     
     <section>
       <title>Pageflow viewer</title>
       
       <para>
         This tool let you design to some extend your pageflows and let you build graphical views of them so you can
         easily share and compare ideas on how it should be designed.
       </para>
       
       <screenshot>
         <screeninfo>Business process designer</screeninfo>
         <mediaobject>
           <imageobject role="fo">
             <imagedata fileref="/images/bpmpfv.png" align="center"/>
           </imageobject>
           <imageobject role="html">
             <imagedata fileref="/shared/images/bpmpfv.png" align="center"/>
           </imageobject>
         </mediaobject>
       </screenshot>

      </section>

    </section>
    
    <!--
  <section>
    <title>CRUD-application generator</title>
    
    <para>
      This chapter, will give you a short overview of the support for Seam that is available in the Hibernate Tools.
      Hibernate Tools is a set of tools for working with Hibernate and related technologies, such as JBoss Seam and EJB3.
      The tools are available as a set of eclipse plugins and Ant tasks. You can download the Hibernate Tools from the JBoss Eclipse IDE or Hibernate Tools websites.
    </para>
    
    <para>
      The specific support for Seam that is currently available is generation of a fully functional Seam based CRUD-application.
      The CRUD-application can be generated based on your existing Hibernate mapping files or EJB3 annotated POJO's or even fully
      reverse engineered from your existing database schema.
    </para>
    
    <para>
      The following sections is focused on the features required to understand for usage with Seam. The content is derived from the the Hibernate Tools reference documentation. Thus if you
      need more detailed information please refer to the Hibernate Tools documentation.
    </para>
    
    <section>
      <title>Creating a Hibernate configuration file</title>

      <para>
        To be able to reverse engineer and generate code a hibernate.properties 
        or hibernate.cfg.xml file is needed. The Hibernate Tools provide a wizard for generating the
        hibernate.cfg.xml file if you do not already have such file.
      </para>

      <para>
        Start the wizard by clicking "New Wizard" (Ctrl+N), select the
        Hibernate/Hibernate Configuration file (cfg.xml) wizard and press "Next".
        After selecting the wanted location for the hibernate.cfg.xml file, you
        will see the following page:
      </para>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="/images/hibernatecfgwizard.gif" format="gif" contentwidth="5cm" />
        </imageobject>

        <imageobject role="html">
          <imagedata align="center"
                     fileref="/images/hibernatecfgwizard.gif"
                     format="gif" />
        </imageobject>
      </mediaobject>

      <para>
        Tip: The contents in the combo boxes for the JDBC driver class and
        JDBC URL change automatically, depending on the Dialect and actual driver
        you have chosen.
      </para>

      <para>
        Enter your configuration information in this dialog. Details about
        the configuration options can be found in Hibernate reference
        documentation.
      </para>

      <para>
        Press "Finish" to create the configuration file, after optionally
        creating a Console onfiguration, the hibernate.cfg.xml will be
        automatically opened in an editor. The last option "Create Console
        Configuration" is enabled by default and when enabled i will automatically
        use the hibernate.cfg.xml for the basis of a "Console
        Configuration"
      </para>
    </section>

    <section>
      <title>Creating a Hibernate Console configuration</title>

      <para>
        A Console Configuration describes to the Hibernate plugin which configuration files
        should be used to configure hibernate, including which classpath is needed to load the POJO's,
        JDBC drivers etc. It is required to make usage of query prototyping, reverse engineering and
        code generation. You can have multiple named console configurations. Normally you would just
        need one per project, but more (or less) is definitly possible.
      </para>  

      <para>
        You create a console configuration by running the Console
        Configuration wizard, shown in the following screenshot. The same wizard
        will also be used if you are coming from the hibernate.cfg.xml wizard and
        had enabled "Create Console Configuration".
      </para>

      <mediaobject>
        <title>Creating a Hibernate Console configuration</title>

        <imageobject role="fo">
          <imagedata fileref="/images/consolecfgwizard.gif" format="GIF" />
        </imageobject>

        <imageobject role="html">
          <imagedata align="center"
                     fileref="/images/consolecfgwizard.gif"
                     format="gif" />
        </imageobject>
      </mediaobject>

      <para>
        The following table describes the relevant settings. The wizard can
        automatically detect default values for most of these if you started the
        Wizard with the relevant java project selected
      </para>

      <table>
        <title>Hibernate Console Configuration Parameters</title>
  
        <tgroup cols="3">
          <colspec colnum="1" colwidth="1*" />

          <colspec colnum="2" colwidth="3*" />

          <colspec colnum="3" colwidth="1*" />

          <thead>
            <row>
              <entry align="center">
                <para>Parameter</para>
              </entry>

              <entry align="center">
                <para>Description</para>
              </entry>

              <entry align="center">
                <para>Auto detected value</para>
              </entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>
                <para>Name</para>
              </entry>

              <entry>
                <para>The unique name of the configuration</para>
              </entry>

              <entry>
                <para>Name of the selected project</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>Property file</para>
              </entry>
  
              <entry>
                <para>Path to a hibernate.properties file</para>
              </entry>

              <entry>
                <para>First hibernate.properties file found in the selected
                project</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>Configuration file</para>
              </entry>

              <entry>
                <para>Path to a hibernate.cfg.xml file</para>
              </entry>

              <entry>
                <para>First hibernate.cfg.xml file found in the selected
                project</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>Enable Hibernate ejb3/annotations</para>
              </entry>

              <entry>
                <para>Selecting this option enables usage of annotated classes.
                hbm.xml files are of course still possible to use too. This
                feature requires running the Eclipse IDE with a JDK 5 runtime,
                otherwise you will get classloading and/or version
                errors.</para>
              </entry>

              <entry>
                <para>Not enabled</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>Mapping files</para>
              </entry>

              <entry>
                <para>List of additional mapping files that should be loaded.
                Note: A hibernate.cfg.xml can also contain mappings. Thus if
                these a duplicated here, you will get "Duplicate mapping" errors
                when using the console configuration.</para>
              </entry>

              <entry>
                <para>If no hibernate.cfg.xml file is found, all hbm.xml files
                found in the selected project</para>
              </entry>
            </row>

            <row>
              <entry>
                <para>Classpath</para>
              </entry>

              <entry>
                <para>The classpath for loading POJO and JDBC drivers. Do not
                add Hibernate core libraries or dependencies, they are already
                included. If you get ClassNotFound errors then check this list
                for possible missing or redundant directories/jars.</para>
              </entry>

              <entry>
                <para>The default build output directory and any JARs with a
                class implementing java.sql.Driver in the selected
                project</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Clicking "Finish" creates the configuration and shows it in the
      "Hibernate Configurations" view</para>

      <mediaobject>
        <title>Console overview</title>

        <imageobject role="fo">
          <imagedata align="center" 
                     fileref="/images/consoleoutline-before-reveng.gif"
                     format="GIF" />
        </imageobject>

        <imageobject role="html">
          <imagedata align="center"
                     fileref="/images/consoleoutline-before-reveng.gif"
                     format="gif" />
        </imageobject>
      </mediaobject>

    </section>

    <section>
      <title>Reverse engineering and code generation</title>

      <para>
        A very simple "click-and-generate" reverse engineering and code
        generation facility is available. It is this facility that allows you to
        generate the skeleton for a full Seam CRUD application.
      </para>

      <para>
        To start working with this process, start the "Hibernate Code
        Generation" which is available in the toolbar via the Hibernate icon or
        via the "Run/Hibernate Code Generation" menu item.
      </para>

      <section>
        <title>Code Generation Launcher</title>

        <para>When you click on "Hibernate Code Generation" the standard Eclipse
        launcher dialog will appear. In this dialog you can create, edit and
        delete named Hibernate code generation "launchers".</para>

        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/codegendropdown.gif" format="GIF" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center"
                       fileref="/images/codegendropdown.gif"
                       format="gif" />
          </imageobject>
        </mediaobject>

        <para>The dialog has the standard tabs "Refresh" and "Common" that can
        be used to configure which directories should be automatically refreshed
        and various general settings launchers, such as saving them in a project
        for sharing the launcher within a team.</para>

        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="/images/codegenmaintab.gif" format="GIF" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center"
                       fileref="/images/codegenmaintab.gif"
                       format="gif" />
          </imageobject>
        </mediaobject>

        <para>The first time you create a code generation launcher you should
        give it a meaningfull name, otherwise the default prefix
        "New_Generation" will be used.</para>

        <para>Note: The "At least one exporter option must be selected" is just
        a warning stating that for this launch to work you need to select an
        exporter on the Exporter tab. When an exporter has been selected the
        warning will disappear.</para>

        <para>On the "Main" tab you the following fields:</para>

        <table>
          <title>Code generation "Main" tab fields</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="3*" />

            <colspec colnum="3" colwidth="0.5*" />

            <thead>
              <row>
                <entry align="center"><para>Field</para></entry>

                <entry align="center"><para>Description</para></entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><para>Console Configuration</para></entry>

                <entry><para>The name of the console configuration which should
                be used when code generating.</para></entry>
              </row>

              <row>
                <entry><para>Output directory</para></entry>

                <entry><para>Path to a directory into where all output will be
                written by default. Be aware that existing files will be
                overwritten, so be sure to specify the correct
                directory.</para></entry>
              </row>
	
	            <row>
	              <entry><para>Reverse engineer from JDBC
	              Connection</para></entry>
	
	              <entry><para>If enabled the tools will reverse engineer the
	              database available via the connection information in the
	              selected Hibernate Console Configuration and generate code based
	              on the database schema. If not enabled the code generation will
	              just be based on the mappings already specified in the Hibernate
	              Console configuration.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Package</para></entry>
	
	              <entry><para>The package name here is used as the default
	              package name for any entities found when reverse
	              engineering.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>reveng.xml</para></entry>
	
	              <entry><para>Path to a reveng.xml file. A reveng.xml file allows
	              you to control certain aspects of the reverse engineering. e.g.
	              how jdbc types are mapped to hibernate types and especially
	              important which tables are included/excluded from the process.
	              Clicking "setup" allows you to select an existing reveng.xml
	              file or create a new one..</para></entry>
	            </row>
	
	            <row>
	              <entry><para>reveng. strategy</para></entry>
	
	              <entry><para>If reveng.xml does not provide enough customization
	              you can provide your own implementation of an
	              ReverseEngineeringStrategy. The class need to be in the claspath
	              of the Console Configuration, otherwise you will get class not
	              found exceptions.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Generate basic typed composite ids</para></entry>
	
	              <entry><para>This field should always be enabled when generating the Seam CRUD application.
	              A table that has a multi-colum primary key a
	              &lt;composite-id&gt; mapping will always be created. If this
	              option is enabled and there are matching foreign-keys each key
	              column is still considered a 'basic' scalar (string, long, etc.)
	              instead of a reference to an entity. If you disable this option
	              a &lt;key-many-to-one&gt; instead. Note: a &lt;many-to-one&gt;
	              property is still created, but is simply marked as non-updatable
	              and non-insertable.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Use custom templates</para></entry>
	
	              <entry><para>If enabled, the Template directory will be searched
	              first when looking up the velocity templates, allowing you to
	              redefine how the individual templates process the hibernate
	              mapping model.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Template directory</para></entry>
	
	              <entry><para>A path to a directory with custom velocity
	              templates.</para></entry>
	            </row>
	          </tbody>
	        </tgroup>
	      </table>
	    </section>
	
	    <section>
	      <title>Exporters</title>
	
	      <para>The exporters tab is used to specify which type of code that
	      should be generated. Each selection represents an "Exporter" that are
	      responsible for generating the code, hence the name.</para>
	
	      <mediaobject>
	        <imageobject role="fo">
	          <imagedata fileref="/images/codegenselectseam.gif" format="GIF" />
	        </imageobject>
	
	        <imageobject role="html">
	          <imagedata align="center"
	                     fileref="/images/codegenselectseam.gif"
	                     format="gif" />
	        </imageobject>
	      </mediaobject>
	
	      <para>
	        The following table describes in short the various
	        exporters. The most relevant for Seam is of course the "JBoss Seam Skeleton app".
	      </para>
	
	      <table>
	        <title>Code generation "Exporter" tab fields</title>
	
	        <tgroup cols="2">
	          <colspec colnum="1" colwidth="1*" />
	
	          <colspec colnum="2" colwidth="3*" />
	
	          <colspec colnum="3" colwidth="0.5*" />
	
	          <thead>
	            <row>
	              <entry align="center"><para>Field</para></entry>
	
	              <entry align="center"><para>Description</para></entry>
	            </row>
	          </thead>
	
	          <tbody>
	            <row>
	              <entry><para>Generate domain code</para></entry>
	
	              <entry><para>Generates POJO's for all the persistent classes and
	              components found in the given Hibernate
	              configuration.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>JDK 1.5 constructs</para></entry>
	
	              <entry><para>When enabled the POJO's will use JDK 1.5
	              constructs.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>EJB3/JSR-220 annotations</para></entry>
	
	              <entry><para>When enabled the POJO's will be annotated according
	              to the EJB3/JSR-220 persistency specification.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Generate DAO code</para></entry>
	
	              <entry><para>Generates a set of DAO's for each entity
	              found.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Generate Mappings</para></entry>
	
	              <entry><para>Generate mapping (hbm.xml) files for each
	              entity</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Generate hibernate configuration
	              file</para></entry>
	
	              <entry><para>Generate a hibernate.cfg.xml file. Used to keep the
	              hibernate.cfg.xml uptodate with any new found mapping
	              files.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Generate schema html-documentation</para></entry>
	
	              <entry><para>Generates set of html pages that documents the
	              database schema and some of the mappings.</para></entry>
	            </row>
	
	            <row>
	              <entry><para>Generate JBoss Seam skeleton app
	              (beta)</para></entry>
	
	              <entry><para>Generates a complete JBoss Seam skeleton app. The
	              generation will include annotated POJO's, Seam controller beans
	              and a JSP for the presentation layer. See the generated
	              readme.txt for how to use it. </para><para>Note: this exporter
	              generates a full application, including a build.xml thus you
	              will get the best results if you use an output directory which
	              is the root of your project.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      
      </section>
    
      <section>
        <title>Generating and using the code</title>
      
        <para>
          When you have finished filling out the settings, simply press "Run" to start the generation of code.
          This might take a little while if you are reverse engineering from a database.
        </para>
      
        <para>
	      When the generation have finished you should now have a complete skeleton Seam application in the output directory.
	      In the output directory there is a <literal>readme.txt</literal> file describing the steps needed to deploy and run the example.
        </para>
      
        <para>
          If you want to regenerate/update the skeleton code then simply run the code generation again by selecting the "Hibernate Code Generation" in the toolbar or "Run" menu. Enjoy.
        </para>
      </section>
    
    </section>
    
  </section>  
  -->
</chapter>
    <chapter id="oc4j">
   <title>Seam on OC4J</title>
   
   <para> OC4J (Oracle Containers for Java) 11g (currently a "Technology
      Preview" release) is Oracle's JEE5 application server. Seam application
      can be deployed to OC4J, but require some additional configuration
      changes, and dependencies. This chapter will show you exactly what must be
      done. We will start by looking at the building and deploying the JEE5 Hotel
      Booking example application which comes with Seam. Then we will deploy a
      project generated by <literal>seam-gen</literal> . First a basic
      <literal>seam-gen</literal> application with RichFaces ajax
      components, and facelets. Then expand that application to include Seam
      security with Drools, JPA provided with hibernate, and automatic CRUD
      reverse engineering of a MySQL database. </para>
   
   <section id="oc4j-install-operation">
      <title>Installation and operation of OC4J</title>
      <para> First we need to install the target container - OC4j. This chapter
         requires you to use OC4J 11g Technology Preview (not OC4J 10g). You can
         download OC4J 11g from <ulink url="http://www.oracle.com/technology/tech/java/oc4j/11/">
         http://www.oracle.com/technology/tech/java/oc4j/11/ </ulink>
         Below are instructions to install. launch, access, and shutdown the 11g
         release. For further information on installing OC4J, consult the
         <literal>readme.txt</literal> distributed with OC4J, or the OC4J
         installation guide and release notes.
         <orderedlist>
            <listitem>
               <para>Download and unzip OC4J</para>
            </listitem>
            <listitem>
               <para> Make sure you have <literal>$JAVA_HOME</literal> and
                  <literal>$ORACLE_HOME</literal> set as environment
                  variables ( <literal>$ORACLE_HOME</literal> is the
                  directory to which you unzip OC4J). For further information
                  on installing OC4J, consult the
                  <literal>readme.txt</literal> distributed with OC4J
                  </para>
            </listitem>
            <listitem>
               <para> Applications (ear/war) are deployed to the
                  <literal>$ORACLE_HOME/j2ee/home/applications</literal>
                  directory. </para>
               <para> Note that OC4J does not support hot deployment by default.
                  This means every time you deploy the application you must
                  restart the server. </para>
            </listitem>
            <listitem>
               <para> Start OC4J: <literal> $ORACLE_HOME/j2ee/home/java
                  -jar -XX:MaxPermSize=256M oc4j.jar </literal> </para>
               <para> You must override the default PermGen memory settings
                  using above command. See <ulink url="http://www.oracle.com/technology/tech/java/oc4j/11/oc4j-relnotes.html">
                  OC4J release notes </ulink> for details. </para>
               <para> You will be asked to set the admin password if this is the
                  first time you have started OC4J </para>
            </listitem>
            <listitem>
               <para> Once deployed you can check out your applications at
                  <literal>http://localhost:8888/&lt;your-app-path&gt;</literal>
                  </para>
            </listitem>
            <listitem>
               <para> You can stop the server by pressing
                  <literal>CTRL-C</literal> in the console on which the
                  server is running. </para>
            </listitem>
         </orderedlist> </para>
   </section>
   
   <section>
      <title> The <literal>jee5/booking</literal> example </title>
      
      <para> The <literal>jee5/booking</literal> example is based on the Hotel
         Booking example (which runs on JBoss AS). Out of the box it is designed to
         run on Glassfish, but it's easy to build it for OC4J. It is located in the
         <literal>$SEAM_DIST/examples/jee5/booking</literal> directory.
         </para>
      
      <section>
         <title>Booking Example Dependencies</title>
         
         <para> First, lets look at the basic dependencies of the booking
            example. Armed with this knowledge we can look at the extra
            dependencies requirements that OC4J adds. </para>
         
         <para> We will show you how to get these dependencies into the
            application in <xref linkend="oc4j-build-jee5"/> below. </para>
         <section>
            <title>Core Seam dependencies</title>
            <itemizedlist>
               <listitem>
                  <simpara><literal>jboss-seam.jar</literal> — We
                     declare this as an EJB3 module (why? well Seam needs to be
                     able to interact with container managed transactions;
                     this is implemented as an EJB3 Stateful Session Bean)
                     </simpara>
               </listitem>
               <listitem>
                  <simpara> <literal>jboss-el.jar</literal> </simpara>
               </listitem>
               <listitem>
                  <simpara><literal>jboss-seam-ui.jar</literal> —
                     Seam's JSF controls depend on Apache's
                     commons-beanutils</simpara>
               </listitem>
               <listitem>
                  <simpara> <literal>jboss-seam-debug.jar</literal>
                     </simpara>
               </listitem>
               <listitem>
                  <simpara> <literal>jsf-facelets.jar</literal>
                     </simpara>
               </listitem>
               <listitem>
                  <simpara> <literal>richfaces-api.jar</literal> ,
                     <literal>richfaces-impl.jar</literal> and
                     <literal>richfaces-ui.jar</literal> — which
                     requires Apache commons-digester and
                     commons-beanutils </simpara>
               </listitem>
            </itemizedlist>
         </section>
         
         <section>
            <title>Extra dependencies</title>
            <itemizedlist>
               <listitem>
                  <para> Hibernate — of course, we decided to use
                     Hibernate as the JPA provider (rather than TopLink
                     Essentials which ships with OC4J). </para>
                  <para> To use Hibernate as your JPA provider you need the
                     following jars:
                     <itemizedlist>
                        <listitem>
                           <simpara> <literal>hibernate.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>hibernate-annotations.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>hibernate-entitymanager.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>hibernate-validator.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>jboss-common-core.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>commons-logging.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>commons-collections.jar</literal>
                              </simpara>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>
               <listitem>
                  <para> Third party jars — various jars needed for seam
                     and this example to run.
                     <itemizedlist>
                        <listitem>
                           <simpara> <literal>javaasist.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>dom4j.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>cglib.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>asm.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>commons-beanutils.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>commons-digester.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara><literal>log4j.jar</literal>
                              — This can be left out if you are not going
                              to configure log4j. If it is packaged but not
                              configured logging will be hidden in oc4j.
                              </simpara>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>
               <listitem>
                  <para> Extra OC4J jars — Running Seam on most
                     application servers (such as JBoss AS or Glassfish) you
                     only need to include the dependencies for those bits of
                     Seam you actually use (e.g. if you use Seam Text you need to
                     include ANTLR); but, on OC4J, due to its "interesting"
                     classloading you must always include them:
                     <itemizedlist>
                        <listitem>
                           <simpara>
                              <literal>hibernate-search.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>hibernate-common-annotations.jar</literal>
                              — needed for hibernate search
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>lucene-core.jar</literal>
                              — needed for hibernate search
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>antlr.jar</literal>
                              — needed for Seam Text </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>jbpm-jpdl.jar</literal>
                              — needed for Seam's JBPM </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>quartz.jar</literal>
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara> <literal>dbunit.jar</literal>
                              — needed for some testing classes
                              </simpara>
                        </listitem>
                        <listitem>
                           <simpara>
                              <literal>jboss-embedded-api.jar</literal>
                              — needed for some testing classes
                              </simpara>
                        </listitem>
                        <listitem>
                           <para> Drools — needed for Seam Security. We
                              aren't using Seam security with Drools, but
                              have to include it. Drools consists of 6 jars:
                              <itemizedlist>
                                 <listitem>
                                    <simpara>
                                       <literal>drools-core.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>drools-compiler.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>janino.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>mvel141.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>core.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>antlr-runtime.jar</literal>
                                       </simpara>
                                 </listitem>
                              </itemizedlist> Drools integration is not
                              used in the example. </para>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
      
      <section>
         <title>Configuration file changes</title>
         
         <para>There are just a few changes to be made:</para>
         <variablelist>
            <varlistentry>
               <term> <literal>web.xml</literal>
               </term>
               <listitem>
                  <para> You need to declare all your ejb's in the
                     <literal>web.xml</literal> . This is a silly
                     requirement of a number of JEE5 application servers - for
                     example OC4J and Glassfish. </para>
                  <para> This is already done in the example's web.xml file,
                     below is an example. </para>
                  
                  
                  <programlisting><![CDATA[<ejb-local-ref>
   <ejb-ref-name>
      jboss-seam-jee5/AuthenticatorAction/local
   </ejb-ref-name>
   <ejb-ref-type>Session</ejb-ref-type>
   <local>
      org.jboss.seam.example.booking.Authenticator
   </local>
   <ejb-link>AuthenticatorAction</ejb-link>
</ejb-local-ref>]]></programlisting>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term> <literal>persistence.xml</literal>
               </term>
               <listitem>
                  <para> You need to provide the correct configuration for your
                     JPA implementation. We are using Hibernate and due to OC4J
                     bundling an old ANTLR, we need to use an alternative query
                     factory, we also want to use the OC4J transaction manager:
                     </para>
                  <para> For our example modify the
                     <literal>resources/META-INF/persistence.xml</literal>
                     file. Comment out the Glassfish properties and
                     un-comment the OC4J properties. </para>
                  
                  
                  <programlisting><![CDATA[<property name="hibernate.dialect" 
   value="org.hibernate.dialect.HSQLDialect"/>
<property name="hibernate.query.factory_class" 
   value="org.hibernate.hql.classic.ClassicQueryTranslatorFactory"/>
<property name="hibernate.transaction.manager_lookup_class" 
   value="org.hibernate.transaction.OrionTransactionManagerLookup"/>]]></programlisting>
               </listitem>
            </varlistentry>
         </variablelist>
         
      </section>
      
      <section id="oc4j-build-jee5">
         <title> Building the <literal>jee5/booking</literal> example
            </title>
         
         <orderedlist>
            <listitem>
               <para> Modify the <literal>build.xml</literal> file in the
                  example: </para>
               <itemizedlist>
                  <listitem>
                     <para> Un-comment the labeled OC4J-related library
                        properties. This will include all the extra
                        dependencies discussed above. </para>
                     <para>It should look like the following:</para>
                     
                     
                     <programlisting><![CDATA[<!-- add libs for oc4j (eager classloading) -->
<property name="jbpm.lib" value="true"/>
<property name="drools.lib" value="true"/>
<property name="quartz.lib" value="true" />
<property name="search.lib" value="true" />
<property name="dbunit.lib" value="true" />
<property name="jboss-embedded-api.lib" value="true" />
    ]]></programlisting>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para> Build the demo app by running <literal>ant</literal> in
                  the <literal>examples/jee5/booking</literal>
                  directory. The build target is
                  <literal>dist/jboss-seam-jee5.ear</literal> </para>
            </listitem>
            <listitem>
               <para> Copy <literal>dist/jboss-seam-jee5.ear</literal>
                  following the instructions below. </para>
            </listitem>
         </orderedlist>
      </section>
   </section>
   
   <section id="oc4j-app-deploy">
      <title>Deploying the Seam application to OC4J</title>
      <para> This mini-tutorial describes the (fairly tedious) steps required
         to deploy a JEE 5 application to OC4J. It assumes you have already
         downloaded and installed it following the instructions in <xref linkend="oc4j-install-operation"/>. It also assumes you are
         deploying the <literal>jee5/booking</literal> example, using the
         embedded hsqldb database. To deploy another application you would need
         to alter the datasource and application name. </para>
      <orderedlist>
         <listitem>
            <para> Copy <literal>hsqldb.jar</literal> to OC4J shared library
               directory: <literal> cp ../../seam-gen/lib/hsqldb.jar
               $ORACLE_HOME/j2ee/home/applib/ </literal> (OC4J doesn't
               come with an embedded database so we decided to use HSQLDB)
               </para>
         </listitem>
         <listitem>
            <para> Edit the OC4J datasource file
               <literal>$ORACLE_HOME/j2ee/home/config/data-sources.xml</literal>
               and, inside <literal>&lt;data-sources&gt;</literal> , add
               </para>
            
            
            <programlisting><![CDATA[<managed-data-source
   connection-pool-name="jee5-connection-pool"
   jndi-name="jdbc/__default"
   name="jee5-managed-data-source" />
<connection-pool name="jee5-connection-pool">
   <connection-factory
      factory-class="org.hsqldb.jdbcDriver" 
      user="sa"
      password="" 
      url="jdbc:hsqldb:." />
</connection-pool>]]></programlisting>
            
            <para> The <literal>jndi-name</literal> is used as the
               <literal>jta-data-source</literal> in
               <literal>persistence.xml</literal> . </para>
         </listitem>
         <listitem>
            <para> Edit
               <literal>$ORACLE_HOME/j2ee/home/config/server.xml</literal>
               and, inside <literal>&lt;application-server&gt;</literal>
               , add </para>
            
            
            <programlisting><![CDATA[<application name="jboss-seam-jee5"
 path="../../home/applications/jboss-seam-jee5.ear"
 parent="default" 
 start="true" />]]></programlisting>
            <para> To keep things simple use the same names as you used for
               project. </para>
         </listitem>
         <listitem>
            <para> Edit <literal>
               $ORACLE_HOME/j2ee/home/config/default-web-site.xml
               </literal> , and, inside
               <literal>&lt;web-site&gt;</literal> , add </para>
            
            
            <programlisting><![CDATA[<web-app application="jboss-seam-jee5"
 name="jboss-seam-jee5" 
 load-on-startup="true"
 root="/seam-jee5" />]]></programlisting>
            <para> The <literal>root</literal> is the context path you will put
               into your web browser to access the application. </para>
         </listitem>
         <listitem>
            <para> Copy the application to OC4J: <literal> cp
               dist/jboss-seam-jee5.ear
               $ORACLE_HOME/j2ee/home/applications/ </literal> </para>
         </listitem>
         <listitem>
            <para> Start/stop OC4J following instructions in <xref linkend="oc4j-install-operation"/> above. </para>
         </listitem>
         <listitem>
            <para> Checkout the app at:
               <literal>http://localhost:8888/seam-jee5</literal>
               </para>
         </listitem>
      </orderedlist>
   </section>
   
   <section>
      <title> Deploying an application created using
         <literal>seam-gen</literal> to OC4J </title>
      
      <para> <literal>seam-gen</literal> is a great tool for developers that
         can quickly get you up and running with a full Seam application. However
         the project that it created is configured to run on JBoss AS. This means
         there are some extra steps needed to have it execute on OC4j. The
         following explanation assumes you are using the command line and a
         simple text editor, but of course you can use your favorite IDE.
         <literal>seam-gen</literal> projects come with support for Eclipse
         and Netbeans. </para>
      
      <para> We will start by creating and deploying a pretty simple application
         using <literal>seam-gen</literal> . Then we'll show you how easy it is
         to use <literal>seam-gen</literal> and Hibernate Tools to reverse
         engineer a database schema into a functional CRUD application.
         <literal>seam-gen</literal> will create JPA entity beans, Seam
         Application Framework components and JSF views for you. We will also add
         Seam security using Drools. </para>
      
      <para> This tutorial uses MySQL (but of course you could use any database,
         altering the SQL and datasources as appropriate); install, configure
         and run MySQL, then create a database with some sample data. Don't forget
         to also download the
         <literal>mysql-connector-java-X.jar</literal> for jdbc support.
         When setting up Seam security this tutorial will assume there is a table
         named <literal>User</literal> with columns
         <literal>username</literal> and <literal>password</literal> with
         at least one entry. Beyond that you can set up any type of sample data and
         tables you would like. </para>
      
      <section>
         <title> Generating a basic <literal>seam-gen</literal> application
            </title>
         <para> First we need to tell the <literal>seam-gen</literal> what we
            want, run <literal>./seam setup</literal> in the seam
            distribution directory. Follow the settings example below based on
            your system and setup (ex. use your database name instead of
            <literal>oc4jexample</literal> ). </para>
         
         
         <programlisting><![CDATA[> ./seam setup
Buildfile: build.xml

init:

setup:
     [echo] Welcome to seam-gen :-)
    [input] Enter your Java project workspace (the directory that contains your Seam projects) [C:/Projects] [C:/Projects]
/home/jbalunas/workspace
    [input] Enter your JBoss home directory [C:/Program Files/jboss-4.2.2.GA] [C:/Program Files/jboss-4.2.2.GA]
/home/jbalunas/jboss/jboss-4.2.2.GA
    [input] Enter the project name [myproject] [myproject]
oc4j_example
     [echo] Accepted project name as: oc4j_example
    [input] Select a RichFaces skin (not applicable if using ICEFaces) [blueSky] ([blueSky], classic, ruby, wine, deepMarine, emeraldTown, sakura, DEFAULT)

    [input] Is this project deployed as an EAR (with EJB components) or a WAR (with no EJB support) [ear]  ([ear], war, )

    [input] Enter the Java package name for your session beans [com.mydomain.oc4j_example] [com.mydomain.oc4j_example]
org.jboss.seam.tutorial.oc4j.action
    [input] Enter the Java package name for your entity beans [org.jboss.seam.tutorial.oc4j.action] [org.jboss.seam.tutorial.oc4j.action]
org.jboss.seam.tutorial.oc4j.model
    [input] Enter the Java package name for your test cases [org.jboss.seam.tutorial.oc4j.action.test] [org.jboss.seam.tutorial.oc4j.action.test]
org.jboss.seam.tutorial.oc4j.test
    [input] What kind of database are you using? [hsql]  ([hsql], mysql, oracle, postgres, mssql, db2, sybase, enterprisedb, h2)
mysql
    [input] Enter the Hibernate dialect for your database [org.hibernate.dialect.MySQLDialect] [org.hibernate.dialect.MySQLDialect]

    [input] Enter the filesystem path to the JDBC driver jar [lib/hsqldb.jar] [lib/hsqldb.jar]
lib/mysql-connector.jar
    [input] Enter JDBC driver class for your database [com.mysql.jdbc.Driver] [com.mysql.jdbc.Driver]

    [input] Enter the JDBC URL for your database [jdbc:mysql:///test] [jdbc:mysql:///test]
jdbc:mysql:///oc4jexample
    [input] Enter database username [sa] [sa]
username
    [input] Enter database password [] []
password
    [input] skipping input as property hibernate.default_schema.new has already been set.
    [input] Enter the database catalog name (it is OK to leave this blank) [] []

    [input] Are you working with tables that already exist in the database? [n]  (y, [n], )
y
    [input] Do you want to drop and recreate the database tables and data in import.sql each time you deploy? [n]  (y, [n], )
n
    [input] Enter your ICEfaces home directory (leave blank to omit ICEfaces) [] []

[propertyfile] Creating new property file: /home/jbalunas/workspace/jboss-seam/seam-gen/build.properties
     [echo] Installing JDBC driver jar to JBoss server
     [copy] Copying 1 file to /home/jbalunas/jboss/jboss-4.2.2.GA/server/default/lib
     [echo] Type 'seam create-project' to create the new project

BUILD SUCCESSFUL]]></programlisting>
         
         <para> Type <literal>./seam new-project</literal> to create your
            project and <literal>cd
            /home/jbalunas/workspace/oc4j_example</literal> to the newly
            created project. </para>
         
      </section>
      <section>
         <title>Changes needed for deployment to OC4J</title>
         <para>We now need to make some changes to the generated project.</para>
         <section>
            <title>Configuration file changes</title>
            <para>Let's start with the configuration files:</para>
            <variablelist>
               <varlistentry>
                  <term> <literal>build.xml</literal>
                  </term>
                  <listitem>
                     <itemizedlist>
                        <listitem>
                           <para>Change the default target to archive (we
                              aren't going to cover automatic deployment to
                              OC4J).
                              
                              
                              <programlisting><![CDATA[<project name="oc4j_example" default="archive" basedir=".">]]></programlisting>
                              </para>
                        </listitem>
                        <listitem>
                           <para>OC4J looks for the drools file
                              <literal>/security.drl</literal> file in
                              the root of the <literal>war</literal> file
                              instead of the root of the
                              <literal>ear</literal> file so we need to have
                              the <literal>build.xml</literal> move it to
                              the correct location at build time. The
                              following must be added at the top of the
                              <literal> &lt;target name="war"
                              depends="compile" description="Build the
                              distribution .war file"&gt; </literal>
                              target.
                              
                              
                              <programlisting><![CDATA[<copy todir="${war.dir}">
 <fileset dir="${basedir}/resources" >
    <include name="*.drl" />
 </fileset>
 </copy>]]></programlisting></para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <literal>resources/META-INF/persistence-dev.xml</literal>
                  </term>
                  <listitem>
                     <itemizedlist>
                        <listitem>
                           <para> Alter the
                              <literal>jta-data-source</literal> to be
                              <literal>jdbc/__oc4jexample</literal>
                              (and use this as the
                              <literal>jndi-name</literal> when creating
                              the data source in
                              <literal>data-sources.xml</literal> later
                              during deployment). </para>
                        </listitem>
                        <listitem>
                           <para> Add the properties (described in
                              <literal>jee5/booking</literal> example):
                              </para>
                           
                           
                           <programlisting><![CDATA[<property name="hibernate.query.factory_class"
   value="org.hibernate.hql.classic.ClassicQueryTranslatorFactory" />
<property name="hibernate.transaction.manager_lookup_class"
   value="org.hibernate.transaction.OrionTransactionManagerLookup" />
<property name="hibernate.transaction.flush_before_completion" 
   value="true"/>
<property name="hibernate.cache.provider_class" 
   value="org.hibernate.cache.HashtableCacheProvider"/>]]></programlisting>
                        </listitem>
                        <listitem>
                           <para> Remove the JBoss AS specific method of
                              exposing the EntityManagerFactory: </para>
                           
                           
                           <programlisting><![CDATA[<property 
 name="jboss.entity.manager.factory.jndi.name" 
 value="java:/oc4j_exampleEntityManagerFactory">]]></programlisting>
                        </listitem>
                        <listitem>
                           <para> You'll need to alter
                              <literal>persistence-prod.xml</literal>
                              as well if you want to deploy to OC4J using the
                              prod profile. </para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <literal>resources/META-INF/jboss-app.xml</literal>
                  </term>
                  <listitem>
                     <para> You can delete this file as we aren't deploying to
                        JBoss AS ( <literal>jboss-app.xml</literal> is used
                        to enable classloading isolation in JBoss AS) </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term> <literal>resources/*-ds.xml</literal>
                  </term>
                  <listitem>
                     <para> You can delete these file as we aren't deploying to
                        JBoss AS (these files define datasources in JBoss AS,
                        in OC4J you have to edit the master
                        <literal>data-sources.xml</literal> file)
                        </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <literal>resources/WEB-INF/components.xml</literal>
                  </term>
                  <listitem>
                     <itemizedlist>
                        <listitem>
                           <para> Enable container managed transaction
                              integration - add the <literal>
                              &lt;transaction:ejb-transaction /&gt;
                              </literal> component, and it's namespace
                              declaration <literal>
                              xmlns:transaction="http://jboss.com/products/seam/transaction"
                              </literal> </para>
                        </listitem>
                        <listitem>
                           <para> Alter the
                              <literal>jndi-pattern</literal> to
                              <literal>
                              java:comp/env/oc4j_example/#{ejbName}/local
                              </literal> </para>
                        </listitem>
                        <listitem>
                           <para> We want to use a Seam Managed Persistence
                              Context in our application. Unfortunately
                              OC4J doesn't expose the EntityManagerFactory
                              in JNDI, but Seam provides a built-in manager
                              component. To activate add the following
                              entry: </para>
                           
                           
                           <programlisting><![CDATA[<persistence:entity-manager-factory
 auto-create="true" 
 name="oc4jEntityManagerFactory"
 persistence-unit-name="oc4j_example" />]]></programlisting>
                           <para> We then need to tell Seam to use it, so we alter
                              the
                              <literal>managed-persistence-context</literal>
                              injecting the Entity Manager Factory into the
                              existing element: </para>
                           
                           
                           <programlisting><![CDATA[<persistence:managed-persistence-context
 name="entityManager"
 auto-create="true"
 entity-manager-factory="#{oc4jEntityManagerFactory}" />]]>
                           </programlisting>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term> <literal>resources/WEB-INF/web.xml</literal>
                  </term>
                  <listitem>
                     <para> You must add the Seam container managed
                        transaction integration EJB entry below. Remember
                        for OC4j you need to declare all your EJBs here if you
                        modify the application further. </para>
                     
                     
                     <programlisting><![CDATA[<ejb-local-ref>
   <ejb-ref-name>
      oc4j_example/EjbSynchronizations/local
   </ejb-ref-name>
   <ejb-ref-type>Session</ejb-ref-type>
   <local>
      org.jboss.seam.transaction.LocalEjbSynchronizations
   </local>
   <ejb-link>EjbSynchronizations</ejb-link>
</ejb-local-ref>]]></programlisting>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term>
                     <literal>resources/META-INF/orion-application.xml</literal>
                  </term>
                  <listitem>
                     <itemizedlist>
                        <listitem>
                           <para> This is a file that you must create so that
                              RichFaces and Ajax4Jsf stylesheets will work
                              with OC4J. This file basically tells OC4J not
                              force its own inherited URL settings. </para>
                           
                           
                           <programlisting><![CDATA[<?xml version = '1.0' encoding = 'utf-8'?>
<orion-application
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://xmlns.oracle.com/oracleas/schema/
                                                            orion-application-10_0.xsd"
        schema-major-version="10"
        schema-minor-version="0"
        component-classification="internal">

    <imported-shared-libraries>
       <remove-inherited name="oracle.xml"/>
    </imported-shared-libraries>
</orion-application>]]></programlisting>
                        </listitem>
                        <listitem>
                           <para> Now you need to tell the
                              <literal>build.xml</literal> file that it
                              needs to copy this file to the
                              <literal>ear</literal> archive. Find the
                              <literal> &lt;target name="ear"
                              description="Build the EAR"&gt; </literal>
                              target and modify the <literal>
                              &lt;copy todir="${ear.dir}/META-INF"&gt;
                              </literal> section to look like the following:
                              </para>
                           
                           
                           <programlisting><![CDATA[<copy todir="${ear.dir}/META-INF">
    <fileset dir="${basedir}/resources/META-INF">
       <include name="application.xml" />
       <include name="orion-application.xml"/>
       <include name="jboss-app.xml" />
    </fileset>
 </copy>]]></programlisting>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </varlistentry>
            </variablelist>
         </section>
         <section>
            <title>Extra jar dependencies</title>
            <para> This application has similar requirements as the
               <literal>jee5/booking</literal> example above. </para>
            <para> The <literal>build.xml</literal> must be modified to add
               the jars listed below to the generated archive files. Look for the
               <literal>&lt;fileset dir="${basedir}"&gt;</literal>
               section below and add the imports underneath the other libraries
               being imported. </para>
            
            
            <programlisting><![CDATA[<target name="ear" description="Build the EAR">
       <copy todir="${ear.dir}">
               <fileset dir="${basedir}/resources">
                       <include name="*jpdl.xml" />
                       <include name="*hibernate.cfg.xml" />
                       <include name="jbpm.cfg.xml" />
                       <include name="*.drl" />
               </fileset>
            <fileset dir="${lib.dir}">
                  <include name="jboss-seam.jar" />
            </fileset>
               <fileset dir="${basedir}">
                       <include name="lib/jbpm*.jar" />
                       <include name="lib/jboss-el.jar" />
                       <include name="lib/drools-*.jar"/>
                       <include name="lib/janino*.jar"/>
                       <include name="lib/antlr-*.jar"/>
                       <include name="lib/mvel*.jar"/>
                     <include name="lib/richfaces-api*.jar" />
               </fileset>
       </copy>
       <copy todir="${ear.dir}/META-INF">
               <fileset dir="${basedir}/resources/META-INF">
                       <include name="application.xml" />
                       <include name="jboss-app.xml" />
               </fileset>
       </copy>
</target>]]></programlisting>
            <itemizedlist>
               <listitem>
                  <para>Hibernate:</para>
                  
                  
                  <programlisting><![CDATA[<include name="lib/hibernate.jar"/>
<include name="lib/hibernate-annotations.jar"/>
<include name="lib/hibernate-commons-annotations.jar"/>
<include name="lib/hibernate-entitymanager.jar"/>
<include name="lib/hibernate-search.jar"/>
<include name="lib/hibernate-validator.jar"/>
<include name="lib/commons-logging.jar"/>
<include name="lib/commons-collections.jar"/>
<include name="lib/jboss-common-core.jar"/>]]></programlisting>
               </listitem>
               <listitem>
                  <para> Drools — because we are using Drools to provide
                     Seam Security rules, we need to add in Eclipse JDT compiler
                     (you don't need this on JBoss AS; again this is due to OC4J's
                     classloading): </para>
                  
                  
                  <programlisting><![CDATA[<include name="lib/core.jar"/>]]></programlisting>
               </listitem>
               <listitem>
                  <para> Third party jars — most of these are only needed
                     because of OC4J's classloading: </para>
                  
                  
                  <programlisting><![CDATA[<include name="lib/javassist.jar"/>
<include name="lib/quartz.jar"/>
<include name="lib/dbunit.jar"/>
<include name="lib/jboss-embedded-api.jar"/>
<include name="lib/dom4j.jar"/>                             
<include name="lib/lucene-core.jar"/>
<include name="lib/cglib.jar"/>
<include name="lib/asm.jar"/>
<include name="lib/commons-beanutils.jar"/>
<include name="lib/commons-digester.jar"/>
<include name="lib/antlr.jar"/>]]></programlisting>
               </listitem>
            </itemizedlist>
            
            <para>You should end up with something like:</para>
            
            
            <programlisting><![CDATA[<fileset dir="${basedir}">
      <include name="lib/jbpm*.jar" />
      <include name="lib/jboss-el.jar" />
      <include name="lib/drools-*.jar"/>
      <include name="lib/janino*.jar"/>
      <include name="lib/antlr-*.jar"/>
      <include name="lib/mvel*.jar"/>
      <include name="lib/richfaces-api*.jar" />
      <include name="lib/hibernate.jar"/>
      <include name="lib/hibernate-annotations.jar"/>
      <include name="lib/hibernate-commons-annotations.jar"/>
      <include name="lib/hibernate-entitymanager.jar"/>
      <include name="lib/hibernate-search.jar"/>
      <include name="lib/hibernate-validator.jar"/>
      <include name="lib/commons-logging.jar"/>
      <include name="lib/commons-collections.jar"/>
      <include name="lib/jboss-common-core.jar"/>
      <include name="lib/core.jar"/>
      <include name="lib/javassist.jar"/>
      <include name="lib/quartz.jar"/>
      <include name="lib/dbunit.jar"/>
      <include name="lib/jboss-embedded-api.jar"/>
      <include name="lib/dom4j.jar"/>                             
      <include name="lib/lucene-core.jar"/>
      <include name="lib/cglib.jar"/>
      <include name="lib/asm.jar"/>
      <include name="lib/commons-beanutils.jar"/>
      <include name="lib/commons-digester.jar"/>
      <include name="lib/antlr.jar"/>
</fileset>]]></programlisting>
         </section>
         
      </section>
      <section>
         <title> Building and deploying the seam-gen'd application to OC4J
            </title>
         <para> These instructions are very similar to the ones in <xref linkend="oc4j-app-deploy"/> but with the correct references
            for the <literal>oc4j_example</literal> application. </para>
         
         <itemizedlist>
            <listitem>
               <para> Build your application by calling
                  <literal>ant</literal> in the base directory of your
                  project (ex.
                  <literal>/home/jbalunas/workspace/oc4j_example</literal>
                  ). The target of the build will be
                  <literal>dist/oc4j_example.ear</literal> . </para>
            </listitem>
            <listitem>
               <para> Copy the <literal>mysql-connector.jar</literal> file
                  to the
                  <literal>$ORACLE_HOME/j2ee/home/applib</literal>
                  directory so that jdbc drivers are available. </para>
            </listitem>
            
            <listitem>
               <para> <literal>
                  $ORACLE_HOME/j2ee/home/config/data-sources.xml
                  </literal> </para>
               
               
               <programlisting><![CDATA[<managed-data-source
   connection-pool-name="oc4j-example-connection-pool"
   jndi-name="jdbc/__oc4jexample"
   name="oc4j-example-managed-data-source" />
<connection-pool
   name="oc4j-example-connection-pool">
   <connection-factory
      factory-class="com.mysql.jdbc.Driver"
      user="username" 
      password="password"
      url="jdbc:mysql:///oc4j" />
</connection-pool>]]></programlisting>
            </listitem>
            <listitem>
               <para>
                  <literal>$ORACLE_HOME/j2ee/home/config/server.xml</literal>
                  </para>
               
               
               <programlisting><![CDATA[<application name="oc4j_example"
 path="../../home/applications/oc4j_example.ear"
 parent="default"
 start="true" />]]></programlisting>
            </listitem>
            <listitem>
               <para> <literal>
                  $ORACLE_HOME/j2ee/home/config/default-web-site.xml
                  </literal> </para>
               
               
               <programlisting><![CDATA[<web-app application="oc4j_example"
 name="oc4j_example" 
 load-on-startup="true"
 root="/oc4j_example" />]]></programlisting>
            </listitem>
            
            <listitem>
               <para> Start/stop OC4J following instructions in the
                  <literal>Installation and operation of OC4J</literal>
                  section above. </para>
            </listitem>
            <listitem>
               <para> Checkout the app at:
                  <literal>http://localhost:8888/oc4j_example</literal>
                  </para>
            </listitem>
         </itemizedlist>
         
      </section>
      
      <section>
         <title> Extending example with reverse engineered CRUD and Drools
            </title>
         <para> In this section we extend the basic
            <literal>seam-gen</literal> application into a full blown CRUD
            application based on an existing database. Plus we will add
            <literal>Drools</literal> based security as well. </para>
         <section>
            <title> Have <literal>seam-gen</literal> generate your CRUD
               applications </title>
            <para> Type <literal>./seam generate-entities</literal> in the
               base directory of your seam distribution. This will create the
               entities, the Seam Application Framework classes and the
               relevant views for the CRUD application. </para>
            
            <para> That's it...no really...that's it. Build and deploy as
               before and see for yourself. </para>
            
         </section>
         <section>
            <title> Hook up drools authentication using your new CRUD
               application </title>
            <para> As stated above this section assumes your database had a
               <literal>User</literal> table with
               <literal>username</literal> and
               <literal>password</literal> columns with at least one entry.
               If you don't have this you may need to modify the
               <literal>authenticate</literal> method below. </para>
            <para> Lets link our <literal>User</literal> entity into Seam
               Security by making our authenticator class a Stateless Session
               Bean (OC4J is a EJB3 container after all!): </para>
            
            <orderedlist>
               <listitem>
                  <itemizedlist>
                     <listitem>
                        <para> Add the <literal>@Stateless</literal>
                           annotation to the
                           <literal>Authenticator</literal> class.
                           </para>
                     </listitem>
                     <listitem>
                        <para> Rename the class to
                           <literal>AuthenticatorAction</literal>
                           </para>
                     </listitem>
                     <listitem>
                        <para> Create an interface called
                           <literal>Authenticator</literal> which
                           <literal>AuthenticatorAction</literal>
                           implements (EJB3 requires session beans to have a
                           local interface). Annotate the interface with
                           <literal>@Local</literal> , and add a single
                           method with same signature as the
                           <literal>authenticate</literal> in
                           <literal>AuthenticatorAction</literal> .
                           </para>
                     </listitem>
                  </itemizedlist>
                  
                  
                  <programlisting><![CDATA[@Name("authenticator") @Stateless public class
            AuthenticatorAction implements Authenticator {]]></programlisting>
                  
                  
                  <programlisting><![CDATA[@Local public interface Authenticator { 
  public boolean authenticate(); 
}]]></programlisting>
               </listitem>
               <listitem>
                  <para> Use <literal>@PersistenceContext</literal> to
                     inject an EntityManager by adding this line the
                     <literal>AuthenticatorAction</literal> class:
                     </para>
                  
                  
                  <programlisting><![CDATA[@PersistenceContext private EntityManager entityManager;]]></programlisting>
               </listitem>
               <listitem>
                  <para>Implement authenticate:</para>
                  
                  
                  <programlisting><![CDATA[public boolean authenticate() {
   List <User> users = entityManager .createQuery("select u from User u where 
   u.username = #{identity.username} and 
   u.password = #{identity.password}") .getResultList();
   if (users.size() == 1) {
      identity.addRole("admin"); 
      return true; 
   } else {
      return false; 
   } 
}]]></programlisting>
               </listitem>
               <listitem>
                  <para> And then add the EJB3 reference to
                     <literal>web.xml</literal> : </para>
                  
                  
                  <programlisting><![CDATA[<ejb-local-ref>
   <ejb-ref-name>
      oc4j_example/AuthenticatorAction/local
   </ejb-ref-name>
   <ejb-ref-type>Session</ejb-ref-type>
   <local>
      org.jboss.seam.tutorial.oc4j.action.Authenticator
   </local>
   <ejb-link>AuthenticatorAction</ejb-link>
</ejb-local-ref>]]></programlisting>
               </listitem>
            </orderedlist>
            
            <para> Build and deploy as before and notice that now only actual
               username and passwords are accepted. </para>
         </section>
         
      </section>
      
   </section>
   <section>
      <title>Finishing up</title>
      <para> That's it, we're through. You now have a great starting point for any
         Seam based application deployed to OC4J. </para>
   </section>
</chapter>
    <chapter id="weblogic">
   <title>Seam on BEA's Weblogic</title>
   
   <para> Weblogic 10.X is BEA's JEE5 server offering, currently 10.0.MP1 is
      their stable release, and 10.3.TP is their latest tech preview release.
      Seam applications can be deployed and developed on Weblogic servers, and
      this chapter will show you how. There are some known issues with the Weblogic
      servers that will need to be worked around, and configuration changes that
      are needed. </para>
   
   <para> First step is to get Weblogic downloaded, installed and running (no
      small feat). Then we'll talk about Seam's JEE5 example and the hurdles to
      getting it running, and what blockers exist. After that the JPA example will
      be modified and deployed to the server. Then finally we will create
      <literal>seam-gen</literal> application and get it up and running to
      provide a jump start to your application. </para>
   
   <section>
      <title>Installation and operation of Weblogic</title>
      <para> First things first we need to get the server installed - and there is a
         choice to be made. Weblogic 10.0.MP1 is the most recent stable release,
         while 10.3.TP is a technical preview version that fixes some things and
         breaks others. </para>
      <itemizedlist>
         <listitem>
            <para><literal>Weblogic 10.0.MP1</literal>
               — <ulink url="http://commerce.bea.com/showproduct.jsp?family=WLS&amp;major=10&amp;minor=1">
               Download page </ulink></para>
            <para> 10.0.MP1 has a known issue with EJBs that use
               <literal>varargs</literal> in their methods (it confuses them
               as <literal>transient</literal> ). This causes exceptions
               when Weblogic attempts to compile the Seam EJBs as
               <literal>varargs</literal> are used. There seems to be no work
               around to this issue in 10.0.MP1. Because of this only the
               <literal>jpa</literal> and WAR based
               <literal>seam-gen</literal> examples work with this version.
               See the <literal>jee5/booking</literal> example for more
               details. </para>
         </listitem>
         <listitem>
            <para><literal>Weblogic 10.3.TP</literal>
               — <ulink url="http://commerce.bea.com/showproduct.jsp?family=WLS&amp;major=10.3Tech&amp;minor=-1&amp;DL=www_WLS_10-3TechPreview_icon&amp;WT.ac=DL_www_WLS_10.3_TechPreviewicon">
               Download page </ulink></para>
            <para> This version still has not fixed the
               <literal>varargs</literal> bug, and there is a new issue with
               EJBs that do not use <literal>kodo</literal> (BEA's
               implementation of JPA). See the
               <literal>jee5/booking</literal> example for more details.
               However if the <literal>varargs</literal> issue is going to get
               fixed it will most likely be an update to this version. </para>
         </listitem>
      </itemizedlist>
      
      <para> For the reasons listed above, and the fact that 10.3.TP gets us closer
         to the goal of Seam EJB3 support on Weblogic, 10.3.TP will be used for the
         examples below. </para>
      
      <section>
         <title>Installing 10.3.TP</title>
         
         <para> Here are the quick steps to installing Weblogic 10.3.TP. For more
            details or if you are having any issues please check with the BEA docs
            at the <ulink url="http://edocs.bea.com/wls/essex/TechPreview/"> Tech
            Preview Doc Center </ulink> . Here we install the RHEL 5 version using
            the graphical installer: </para>
         
         <orderedlist>
            <listitem>
               <para> Follow the link given above for 10.3.TP and download the
                  correct version for your environment. You will need to sign up
                  for an account with BEA in order to do this. </para>
            </listitem>
            <listitem>
               <para> You may need to change the the
                  <literal>server103tp_XX.bin</literal> file to be
                  executable: </para>
               <programlisting>chmod a+x server103tp_XX.bin</programlisting>
            </listitem>
            <listitem>
               <para> Execute the install: </para>
               <programlisting>./server103tp_XX.bin</programlisting>
            </listitem>
            <listitem>
               <para> When the graphical install loads, you need to set the BEA
                  home location. This is where all BEA applications are
                  installed. This location will be known as
                  <literal>$BEA_HOME</literal> in this document e.g.:
                  </para>
               <programlisting>/home/jbalunas/bea</programlisting>
            </listitem>
            <listitem>
               <para> Select <literal>Complete</literal> as the
                  installation type. You do not need all the extras of the
                  complete install (such as struts and beehive libraries), but
                  it will not hurt. </para>
            </listitem>
            <listitem>
               <para> Then you need to tell it where to install the server
                  components: </para>
               <programlisting>$BEA_HOME/wlserver_10.3tp</programlisting>
            </listitem>
         </orderedlist>
      </section>
      <section id="weblogic-domain">
         <title>Creating your Weblogic domain</title>
         <para> A Weblogic domain is similar to a JBoss server configuration - it
            is a self contained server instance. The Weblogic server you just
            installed has some example domains, but we are going to create one
            just for the seam examples. You can use the existing domains if you
            wish (modify the instructions as needed). </para>
         
         <orderedlist>
            <listitem>
               <para> Start up the Weblogic configuration wizard:</para>
               <programlisting>$BEA_HOME/wlserver_10.3tp/common/bin/config.sh</programlisting>
            </listitem>
            <listitem>
               <para> Choose to create a new domain, configured to support
                  <literal>Weblogic Server TP</literal>. Note that this is
                  the default domain option. </para>
            </listitem>
            <listitem>
               <para>Set a username and password for this domain.</para>
            </listitem>
            <listitem>
               <para> Next choose <literal>Development Mode</literal> and
                  the default JDK when given the option. </para>
            </listitem>
            <listitem>
               <para> The next screen asks if you want to customize any setting.
                  Select <literal>No</literal>. </para>
            </listitem>
            <listitem>
               <para> Finally set the name of the domain to
                  <literal>seam_examples</literal> and leave the default
                  domain location. </para>
            </listitem>
         </orderedlist>
      </section>
      <section id="bea_start_stop_access">
         <title>How to Start/Stop/Access your domain</title>
         <para> Now that the server is installed and the domain is created you need
            to know how to start and stop it, plus how to access its configuration
            console. </para>
         <itemizedlist>
            <listitem>
               <para> Starting the domain:</para>
               <para> This is the easy part - go to the <literal>
                  $BEA_HOME/user_projects/domains/seam_examples/bin
                  </literal> directory and run the
                  <literal>./startWeblogic.sh</literal> script. </para>
            </listitem>
            <listitem>
               <para> Accessing the configuration console:</para>
               <para> Launch
                  <literal>http://127.0.0.1:7001/console</literal> in
                  your web browser. It will ask for your username and password
                  that you entered before. We won't get into this much now, but
                  this is the starting point for a lot of the various
                  configurations that are needed later. </para>
            </listitem>
            <listitem>
               <para> Stopping the domain:</para>
               <para> There are a couple of options here: </para>
               <itemizedlist>
                  <listitem>
                     <para> The recommended way is through the configuration
                        console:
                        <orderedlist>
                           <listitem>
                              <para> Select
                                 <literal>seam-examples</literal> on the
                                 left hand side of the console. </para>
                           </listitem>
                           <listitem>
                              <para> Choose the
                                 <literal>Control</literal> tab in the
                                 middle of the page. </para>
                           </listitem>
                           <listitem>
                              <para> Select the check box
                                 <literal>AdminServer</literal> in the
                                 table. </para>
                           </listitem>
                           <listitem>
                              <para> Choose <literal>Shutdown</literal>
                                 just above the table, and select either
                                 <literal>When work completes</literal>
                                 or <literal>Force shutdown now</literal>
                                 as appropriate. </para>
                           </listitem>
                           <listitem>
                              <para> Then finally confirm that you want to
                                 shut this server down. </para>
                           </listitem>
                        </orderedlist> </para>
                  </listitem>
                  <listitem>
                     <para> Hitting <literal>Ctrl-C</literal> in the
                        terminal where you started the domain.</para>
                     <para> No negative effects have been seen, but we would not
                        recommend doing this while in the middle of 
                        configuration changes in the console. </para>
                  </listitem>
               </itemizedlist>
            </listitem>
            <listitem>
               <para><note>
                  <title>A note on Weblogic classloading</title>
                  <para>When using the
                     <literal>@DOMAIN/autodeploy</literal> directory as
                     described in this chapter you may see
                     <literal>NoClassDefFound</literal> exceptions. If
                     you see this try restarting the Weblogic server. If you
                     still see it remove the auto-deployed EAR/WAR files,
                     restart the server, and redeploy. We could not find a
                     specific reason for this, but others seem to be having this
                     issue as well. </para> </note></para>
            </listitem>
         </itemizedlist>
      </section>
   </section>
   
   <section>
      <title> The <literal>jee5/booking</literal> example </title>
      
      <para>Do you want to run Seam using EJB's on Weblogic? If so there are some
         blockers that keep it from working. This section describes what changes
         are needed to the <literal>jee5/booking</literal> example to get it as
         close to deploying as possible. First we'll talk about the blockers and
         what they effect.</para>
      
      <section id="weblogic-ejb-blockers">
         <title>EJB Blockers with Weblogic</title>
         <para>For several releases of Weblogic there has been an issue with
            compiling EJB's that use variable arguments in their methods. This
            is confirmed in the Weblogic 9.X and 10.X versions. We had hoped that
            the issue would be resolved in the tech preview release, but it is not.
            Seam uses variable arguments in its internal EJB's and so until this
            is fixed Seam with EJB's will not work.</para>
         
         <para>The gist of the issue is that the Weblogic EJB compiler believes
            that methods that use <literal>varargs</literal> are
            <literal>transient</literal> and the deployment will fail with
            exceptions like below:
            
            
            <programlisting><![CDATA[java.io.IOException: Compiler failed executable.exec: 
/home/jbalunas/bea/wlserver_10.3tp/user_projects/domains/seam_examples/servers/AdminServer
/cache/EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:194: modifier transient 
not allowed here
  public transient javax.ejb.Timer scheduleAsynchronousEvent(java.lang.String arg0,
  java.lang.Object[] arg1)
                                   ^
/home/jbalunas/bea/wlserver_10.3tp/user_projects/domains/seam_examples/servers/AdminServer
/cache/EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:275: modifier transient
not allowed here
  public transient javax.ejb.Timer scheduleTimedEvent(java.lang.String arg0, 
  org.jboss.seam.async.TimerSchedule arg1, java.lang.Object[] arg2)]]></programlisting>
            BEA says that this is a bug with Java specification. Sun admits the
            issue, and provides a work around, and will not fix the core issue.
            
            <itemizedlist>
               <listitem>
                  <para><ulink url="http://forums.bea.com/thread.jspa?threadID=300002074">
                     BEA forum</ulink> — Discusses the issue and
                     suggests waiting for a new release of 10.X</para>
               </listitem>
               <listitem>
                  <para><ulink url="http://forums.bea.com/thread.jspa?messageID=300006290">
                     BEA forum</ulink> — Discusses response from BEA
                     support and that BEA is saying it is an issue with the spec
                     with links to the bug.</para>
               </listitem>
               <listitem>
                  <para><ulink url="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6516895">
                     Sun bug report </ulink> — Describes details of the
                     issue, but says that it will not be fixed.</para>
               </listitem>
            </itemizedlist> So what does that mean to us? At least for now EJB's
            with variable arguments will not run on Weblogic. </para>
         
         <section>
            <title>Secondary issue with the Tech Preview</title>
            <para>A less severe issue is also present in the tech preview version
               of Weblogic. You can not use any JPA provider with EJB's except for
               the default <literal>kodo</literal> or
               <literal>openJPA</literal> implementation. As you set up this
               example you will run into this issue before the
               <literal>varargs</literal> problem. Unfortunately using
               <literal>kodo</literal> or <literal>openJPA</literal> does
               not help with the blocker described above but is important to
               know.</para>
            
            <para>Other users have seen this issue with the tech preview and I
               would hope/expect that it will be fixed in future releases (
                  <ulink url="http://forums.bea.com/thread.jspa?threadID=300004403">
               BEA Forum</ulink>). The forum entry has the exact stack trace,
               and the response from BEA.</para>
         </section>
      </section>
      
      <section>
         <title>The <literal>jee5/booking</literal> example</title>
         <para>In this section will will quickly go over the steps needed to get
            the <literal>jee5/booking</literal> example to the point that
            blocker shows itself.</para>
         
         <section id="weblogic-hsql-jee5-ds">
            <title>Setting up the hsql datasource</title>
            <para>This example uses the in memory hypersonic database, and the
               correct data source needs to be set up. The admin console uses a
               wizard like set of pages to configure it.
               
               <orderedlist>
                  <listitem>
                     <para> Copy <literal>hsqldb.jar</literal> to weblogic
                        domain's shared library directory: <literal> cp
                        ../../seam-gen/lib/hsqldb.jar
                        /home/jbalunas/bea/user_projects/domains/seam_examples/lib</literal>
                        </para>
                  </listitem>
                  <listitem>
                     <para>Start up the server and navigate to the
                        administration console following <xref linkend="bea_start_stop_access"/></para>
                  </listitem>
                  <listitem>
                     <para>On the left side tree navigate
                        <literal>seam_examples - Services- JDBC - Data
                        Sources</literal>.</para>
                  </listitem>
                  <listitem>
                     <para>You must lock the domain configuration using the
                        button in the upper left box.</para>
                  </listitem>
                  <listitem>
                     <para>Then select button <literal>New</literal>
                        button at the top of the data source table</para>
                  </listitem>
                  <listitem>
                     <para>Fill in the following:
                        <orderedlist>
                           <listitem>
                              <para>Name:
                                 <literal>seam-jee5-ds</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>JNDI Name:
                                 <literal>seam-jee5-ds</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>Database Type and Driver:
                                 <literal>other</literal></para>
                           </listitem>
                           <listitem>
                              <para>Select <literal>Next</literal>
                                 button</para>
                           </listitem>
                        </orderedlist></para>
                  </listitem>
                  <listitem>
                     <para>Select <literal>Next</literal> button on the
                        <literal>Transaction Options</literal>
                        page</para>
                  </listitem>
                  <listitem>
                     <para>Fill in the following on the <literal>Connection
                        Properties</literal> page:
                        <orderedlist>
                           <listitem>
                              <para>Database Name:
                                 <literal>hsqldb</literal></para>
                           </listitem>
                           <listitem>
                              <para>Host Name:
                                 <literal>127.0.0.1</literal></para>
                           </listitem>
                           <listitem>
                              <para>Port: <literal>9001</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>Username: <literal>sa</literal> will
                                 empty password fields.</para>
                           </listitem>
                           <listitem>
                              <para>Select <literal>Next</literal>
                                 button</para>
                           </listitem>
                        </orderedlist></para>
                  </listitem>
                  <listitem>
                     <para>Fill in the following on the <literal>Connection
                        Properties</literal> page:
                        <orderedlist>
                           <listitem>
                              <para>Driver Class Name:
                                 <literal>org.hsqldb.jdbcDriver</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>URL:
                                 <literal>jdbc:hsqldb:.</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>Username: <literal>sa</literal> will
                                 empty password fields.</para>
                           </listitem>
                           <listitem>
                              <para>Leave the rest of the fields
                                 empty.</para>
                           </listitem>
                           <listitem>
                              <para>Select <literal>Next</literal>
                                 button</para>
                           </listitem>
                        </orderedlist></para>
                  </listitem>
                  <listitem>
                     <para>Choose the target domain for the data source in our
                        case the only one <literal>AdminServer</literal>.
                        Click <literal>Next</literal>.</para>
                  </listitem>
                  <listitem>
                     <para>Finally - apply the changes by selecting the
                        <literal>Apply Changes</literal> button in the
                        upper left corner.</para>
                  </listitem>
               </orderedlist> </para>
         </section>
         <section>
            <title>Configuration and Build changes</title>
            <variablelist>
               <varlistentry>
                  <term>
                     <literal>resources/META-INF/persistence.xml</literal>
                  </term>
                  <listitem>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>Because the tech preview version will
                                 only work with <literal>kodo</literal> or
                                 <literal>openJPA</literal> as the JPA
                                 provider you must change the provider to :
                                 <programlisting><![CDATA[<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>]]></programlisting></para>
                           </listitem>
                           <listitem>
                              <para> Next you need to change the
                                 <literal>jta-data-source</literal> to
                                 what you entered above :
                                 <programlisting><![CDATA[<jta-data-source>seam-jee5-ds</jta-data-source>]]></programlisting></para>
                           </listitem>
                           <listitem>
                              <para>The other properties in the file are
                                 hibernate specific and are not used by
                                 <literal>openJPA</literal> but can be
                                 left in.</para>
                           </listitem>
                        </itemizedlist> </para>
                  </listitem>
               </varlistentry>
            </variablelist>
         </section>
         <section>
            <title>Deploying the Application</title>
            <para>There are some changes needed to the build script and then we
               can attempt to deploy the app.</para>
            
            <variablelist>
               <varlistentry>
                  <term> <literal>build.xml</literal>
                  </term>
                  <listitem>
                     <para> Weblogic does not ship with a default JSF
                        implementation so we need to add the JSF libraries to
                        the WAR. Add the following to the
                        <literal>build.xml</literal> and this will add the
                        needed jars.  Note that <literal>richfaces-api.jar</literal>
                        is only needed if using the admin console to deploy.  For 
                        some reason Weblogic needs it in the <literal>WAR</literal>
                        when it scans the application.
                        <programlisting><![CDATA[<fileset id="war.lib.extras" dir="${seam.dir}">
   <include name="lib/jsf-api.jar" />
   <include name="lib/jsf-impl.jar" />
   <include name="lib/richfaces-api.jar" />
</fileset>]]></programlisting></para>
                  </listitem>
               </varlistentry>
            </variablelist>
            
            <para>Now we can build the application by running <literal>ant
               archive</literal> at the base of the example directory.</para>
            
            <para>Because we chose to create our Weblogic domain in development
               mode we can deploy the application by putting the EAR file in the
               domains autodeploy directory.
                              
               <programlisting>cp  ./dist/jboss-seam-jee5.ear 
    /home/jbalunas/bea/user_projects/domains/seam_examples/autodeploy</programlisting></para>
            
            <para>Here is where we see the <literal>varargs</literal> issue.
               In the console output you will some Kodo warnings, then
               exceptions and compile errors like the one below.
               
               
               <programlisting><![CDATA[
<Error> <EJB> <BEA-012036> <Compiling generated EJB classes produced 
                            the following Java compiler error message:

/home/jbalunas/bea/user_projects/domains/seam_examples/servers/AdminServer/cache/
EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:32:
                modifier transient not allowed here
  public transient void scheduleTransactionSuccessEvent(java.lang.String arg0,
  java.lang.Object[] arg1)
                        ^
/home/jbalunas/bea/user_projects/domains/seam_examples/servers/AdminServer/cache/
EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:113:
                modifier transient not allowed here
  public transient javax.ejb.Timer scheduleAsynchronousEvent(java.lang.String arg0,
  java.lang.Object[] arg1)

...
]]></programlisting></para>
            
            <para>This is as far as we can go with Weblogic using EJB's with seam
               until the <literal>varargs</literal> issue is
               resolved.</para>
         </section>
      </section>
      
   </section>
   
   <section>
      <title> The <literal>jpa</literal> booking example </title>
      <para>This is the Hotel Booking example implemented in Seam POJO and
         Hibernate JPA and does not require EJB3 support to run. The example
         already has a breakout of configurations and build scripts for many of
         the common containers including Weblogic 10.X </para>
      
      <para> First we'll build the example for Weblogic 10.x and do the needed
         steps to deploy. Then we'll talk about what is different between the
         Weblogic versions, and with the JBoss AS version. </para>
      
      <section>
         <title>Building and deploying <literal>jpa</literal> booking
            example</title>
         
         <para>Step one setup the datasource, step two build the app, step three
            deploy.</para>
         
         <section>
            <title>Setting up the datasource</title>
            
            <para> The Weblogic 10.X version of the example uses the in memory
               hsql database instead of the built in PointBase database. If you
               wish to use the PointBase database you must setup a PointBase
               datasource, and adjust the hibernate setting in
               <literal>persistence.xml</literal> to use the PointBase
               dialect. For reference the
               <literal>jpa/weblogic92</literal> example uses
               PointBase.</para>
            <para>Configuring the datasource is very similar to the jee5 <xref linkend="weblogic-hsql-jee5-ds"/>. Follow the steps in
               that section, but use the following entries where needed.
               <itemizedlist>
                  <listitem>
                     <para>DataSource Name:
                        <literal>seam-jpa-ds</literal></para>
                  </listitem>
                  <listitem>
                     <para>JNDI Name: <literal>seam-jpa-ds</literal>
                        </para>
                  </listitem>
               </itemizedlist> </para>
         </section>
         <section>
            <title>Building the example</title>
            
            <para> Building it only requires running the correct ant command:
               
               
               <programlisting>ant -f build-weblogic10.xml</programlisting>
               This will create container specific distribution and exploded
               archive directories.</para>
         </section>
         <section>
            <title>Deploying the example</title>
            
            <para> When we installed Weblogic following <xref linkend="weblogic-domain"/> we chose to have the domain in
               development mode. This means to deploy the application all we
               need to do is copy it into the autodeploy directory.</para>
               
               <programlisting>cp  ./dist-weblogic10/jboss-seam-jpa.war 
    /home/jbalunas/bea/user_projects/domains/seam_examples/autodeploy</programlisting>
            
            <para>Check out the application at the following
               <literal>http://localhost:7001/jboss-seam-jpa/</literal>
               .</para>
         </section>
      </section>
      <section id="weblogic-jpa-diff">
         <title>What's different with Weblogic 10.x</title>
         <itemizedlist>
            <listitem>
               <para>Between the the Weblogic 10.x and 9.2 examples there are
                  several differences:
                  <itemizedlist>
                     <listitem>
                        <para>
                           <literal>META-INF/persistence.xml</literal>
                           — The 9.2 version is configured to use the
                           <literal>PointBase</literal> database and a
                           pre-installed datasource. The 10.x version uses
                           the <literal>hsql</literal> database and a
                           custom datasource.</para>
                     </listitem>
                     <listitem>
                        <para id="weblogic.xml" xreflabel="description of WEB-INF/weblogic.xml">
                           <literal>WEB-INF/weblogic.xml</literal>
                           — This file and its contents solve an issue
                           with an older version of the
                           <literal>ANTLR</literal> libraries that
                           Weblogic 10.x uses internally. OC4J have the same
                           issue as well. </para>
                        
                        
                        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-web-app
xmlns="http://www.bea.com/ns/weblogic/90"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.bea.com/ns/weblogic/90 
                    http://www.bea.com/ns/weblogic/90/weblogic-web-app.xsd">

   <container-descriptor>
      <prefer-web-inf-classes>true</prefer-web-inf-classes>
   </container-descriptor>
</weblogic-web-app>]]></programlisting>
                        <para>This file make Weblogic use classes and
                           libraries in the web application before other
                           libraries in the classpath. Without this change
                           hibernate is required to use a older, slower query
                           factory by setting the following property in the
                           <literal>META-INF/persistence.xml</literal>
                           file. </para>
                        
                        
                        <programlisting><![CDATA[<property name="hibernate.query.factory_class" 
      value="org.hibernate.hql.classic.ClassicQueryTranslatorFactory"/>]]></programlisting>
                     </listitem>
                     <listitem>
                        <para>
                           <literal>WEB-INF/components.xml</literal>
                           — In the Weblogic 10.x version JPA entity
                           transactions is enabled by adding:
                           
                           
                           <programlisting><![CDATA[<transaction:entity-transaction entity-manager="#{em}"/>]]></programlisting>
                           </para>
                     </listitem>
                  </itemizedlist> </para>
            </listitem>
            <listitem>
               <para>Between the Weblogic 10.x version and the JBoss version
                  there are more changes. Here is the rundown:
                  <itemizedlist>
                     <listitem>
                        <para>
                           <literal>META-INF/persistence.xml</literal>
                           — Except for datasource name the WebLogic
                           version sets:
                           <programlisting><![CDATA[<property name="hibernate.transaction.manager_lookup_class" 
      value="org.hibernate.transaction.WeblogicTransactionManagerLookup"/>]]></programlisting>
                           </para>
                     </listitem>
                     <listitem>
                        <para><literal>WEB-INF/jboss-web.xml</literal>
                           — The JBoss version uses this instead of
                           <literal>weblogic.xml</literal></para>
                     </listitem>
                     <listitem>
                        <para><literal>WEB-INF/lib</literal> — The
                           Weblogic version requires several library
                           packages because they are not included as they are
                           with JBoss AS. These are primarily for hibernate,
                           JSF-RI support and their dependencies.
                           <itemizedlist>
                              <listitem>
                                 <para> To use Hibernate as your JPA provider
                                    you need the following jars:
                                    <itemizedlist>
                                       <listitem>
                                          <simpara>
                                             <literal>hibernate.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>hibernate-annotations.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>hibernate-entitymanager.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>hibernate-validator.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>jboss-common-core.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>commons-logging.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>commons-collections.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>jboss-archive-browsing.jar</literal>
                                             </simpara>
                                       </listitem>
                                    </itemizedlist> </para>
                              </listitem>
                              <listitem>
                                 <para>Seam requires JSF 1.2 and these are
                                    jars needed for that. Weblogic 10.3.TP
                                    does not ship JSF libraries installed by
                                    default.
                                    <itemizedlist>
                                       <listitem>
                                          <simpara>
                                             <literal>jsf-api.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>jsf-impl.jar</literal>
                                             </simpara>
                                       </listitem>
                                    </itemizedlist> </para>
                              </listitem>
                              <listitem>
                                 <para>Various third party jars that
                                    Weblogic needs:
                                    <itemizedlist>
                                       <listitem>
                                          <simpara>
                                             <literal>antlr.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>cglib.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>asm.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>dom4j.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>el-ri.jar</literal>
                                             </simpara>
                                       </listitem>
                                       <listitem>
                                          <simpara>
                                             <literal>javassist.jar</literal>
                                             </simpara>
                                       </listitem>
                                    </itemizedlist> </para>
                              </listitem>
                           </itemizedlist> </para>
                     </listitem>
                  </itemizedlist> </para>
            </listitem>
         </itemizedlist>
      </section>
      
   </section>
   
   <section>
      <title> Deploying an application created using
         <literal>seam-gen</literal> on Weblogic 10.x</title>
      
      <para><literal>seam-gen</literal> is a very useful tool for developers
         to quickly get an application up and running, and provides a foundation
         to add your own functionality. Out of box <literal>seam-gen</literal>
         will produce applications configured to run on JBoss AS. These
         instructions will show the steps needed to get it to run on Weblogic.
         </para>
      <para><literal>seam-gen</literal> was build for simplicity so, as you
         can imagine, deploying an application generated by
         <literal>seam-gen</literal> to Weblogic 10.x is not too hard.
         Basically it consists of updating or removing some configuration
         files, and adding dependent jars that Weblogic 10.x does not ship
         with.</para>
      
      <para>We still need to live within the constraints imposed to us by
         Weblogic, and because of that this example will generate a
         <literal>WAR</literal> based application instead of an
         <literal>EAR</literal>. See <xref linkend="weblogic-ejb-blockers"/> for details.</para>
      
      <para>This example will cover the basic <literal>seam-gen WAR</literal>
         deployment. This will demonstrate Seam POJO components, Hibernate
         JPA, Facelets, Drools security, RichFaces, and a configurable
         DataSource.</para>
      
      <section>
         <title>Running <literal>seam-gen</literal> setup</title>
         
         <para>The first thing we need to do it tell
            <literal>seam-gen</literal> about the project we want to make.
            This is done by running <literal>./seam setup</literal> in the base
            directory of the Seam distribution. Note the paths here are my own,
            feel free to change for you environment.
            
            
            <programlisting><![CDATA[./seam setup
Buildfile: build.xml

init:

setup:
     [echo] Welcome to seam-gen :-)
    [input] Enter your Java project workspace (the directory that contains your Seam projects) [C:/Projects] [C:/Projects]
/home/jbalunas/workspace
    [input] Enter your JBoss home directory [C:/Program Files/jboss-4.2.2.GA] [C:/Program Files/jboss-4.2.2.GA]
/home/jbalunas/jboss/jboss-4.2.2.GA
    [input] Enter the project name [myproject] [myproject]
weblogic-example
     [echo] Accepted project name as: weblogic_example
    [input] Select a RichFaces skin (not applicable if using ICEFaces) [blueSky] ([blueSky], classic, ruby, wine, deepMarine, emeraldTown, sakura, DEFAULT)

    [input] Is this project deployed as an EAR (with EJB components) or a WAR (with no EJB support) [ear]  ([ear], war, )
war
    [input] Enter the Java package name for your session beans [com.mydomain.weblogic_example] [com.mydomain.weblogic_example]
org.jboss.seam.tutorial.weblogic.action
    [input] Enter the Java package name for your entity beans [org.jboss.seam.tutorial.weblogic.action] [org.jboss.seam.tutorial.weblogic.action]
org.jboss.seam.tutorial.weblogic.model
    [input] Enter the Java package name for your test cases [org.jboss.seam.tutorial.weblogic.action.test] [org.jboss.seam.tutorial.weblogic.action.test]
org.jboss.seam.tutorial.weblogic.test
    [input] What kind of database are you using? [hsql]  ([hsql], mysql, oracle, postgres, mssql, db2, sybase, enterprisedb, h2)

    [input] Enter the Hibernate dialect for your database [org.hibernate.dialect.HSQLDialect] [org.hibernate.dialect.HSQLDialect]

    [input] Enter the filesystem path to the JDBC driver jar [lib/hsqldb.jar] [lib/hsqldb.jar]

    [input] Enter JDBC driver class for your database [org.hsqldb.jdbcDriver] [org.hsqldb.jdbcDriver]

    [input] Enter the JDBC URL for your database [jdbc:hsqldb:.] [jdbc:hsqldb:.]

    [input] Enter database username [sa] [sa]

    [input] Enter database password [] []

    [input] Enter the database schema name (it is OK to leave this blank) [] []

    [input] Enter the database catalog name (it is OK to leave this blank) [] []

    [input] Are you working with tables that already exist in the database? [n]  (y, [n], )

    [input] Do you want to drop and recreate the database tables and data in import.sql each time you deploy? [n]  (y, [n], )

    [input] Enter your ICEfaces home directory (leave blank to omit ICEfaces) [] []

[propertyfile] Creating new property file: /rhdev/projects/jboss-seam/cvs-head/jboss-seam/seam-gen/build.properties
     [echo] Installing JDBC driver jar to JBoss server
     [copy] Copying 1 file to /home/jbalunas/jboss/jboss-4.2.2.GA/server/default/lib
     [echo] Type 'seam create-project' to create the new project

BUILD SUCCESSFUL]]></programlisting>
            </para>
         <para> Type <literal>./seam new-project</literal> to create your
            project and <literal>cd
            /home/jbalunas/workspace/weblogic_example</literal> to see
            the newly created project. </para>
      </section>
      
      <section>
         <title>What to change for Weblogic 10.X</title>
         <para>First we change and delete some configuration files, then we
            update the libraries that are deployed with the
            application.</para>
         
         <section>
            <title>Configuration file changes</title>
            <para>
               <variablelist>
                  <varlistentry>
                     <term> <literal>build.xml</literal>
                     </term>
                     <listitem>
                        <itemizedlist>
                           <listitem>
                              <para>Change the default target to
                                 <literal>archive</literal>.
                                 <programlisting><![CDATA[<project name="weblogic_example" default="archive" basedir=".">]]></programlisting>
                                 </para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <literal>resources/META-INF/persistence-dev.xml</literal>
                     </term>
                     <listitem>
                        <itemizedlist>
                           <listitem>
                              <para> Alter the
                                 <literal>jta-data-source</literal> to
                                 be <literal>seam-gen-ds</literal> (and
                                 use this as the
                                 <literal>jndi-name</literal> when
                                 creating the data source in Weblogic's
                                 admin console)</para>
                           </listitem>
                           <listitem>
                              <para>Change the transaction type to
                                 <literal>RESOURCE_LOCAL</literal> so
                                 that we can use JPA transactions.</para>
                              <programlisting><![CDATA[<persistence-unit name="weblogic_example" transaction-type="RESOURCE_LOCAL">]]></programlisting>
                           </listitem>
                           <listitem>
                              <para> Add/modify the properties below for
                                 Weblogic support:</para>
                              <programlisting><![CDATA[<property name="hibernate.cache.provider_class" 
    value="org.hibernate.cache.HashtableCacheProvider"/>
<property name="hibernate.transaction.manager_lookup_class" 
    value="org.hibernate.transaction.WeblogicTransactionManagerLookup"/>
]]></programlisting>
                           </listitem>
                           <listitem>
                              <para> Remove the JBoss AS specific method of
                                 exposing the EntityManagerFactory:
                                 </para>
                              <programlisting><![CDATA[<property 
 name="jboss.entity.manager.factory.jndi.name" 
 value="java:/weblogic_exampleEntityManagerFactory">]]></programlisting>
                           </listitem>
                           <listitem>
                              <para> You'll need to alter
                                 <literal>persistence-prod.xml</literal>
                                 as well if you want to deploy to Weblogic
                                 using the prod profile. </para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <literal>resource/WEB-INF/weblogic.xml</literal>
                     </term>
                     <listitem>
                        <para> You will need to create this file and populate it
                           following <xref linkend="weblogic.xml"/>.
                           </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <literal>resource/WEB-INF/components.xml</literal>
                     </term>
                     <listitem>
                        <para> We want to use JPA transactions so we need to add
                           the following to let Seam know. </para>
                        <programlisting><![CDATA[<transaction:entity-transaction entity-manager="#{entityManager}"/>]]></programlisting>
                        <para>You will also need to add the transaction
                           namespace and schema location to the top of the
                           document.</para>
                        <programlisting><![CDATA[xmlns:transaction="http://jboss.com/products/seam/transaction"]]></programlisting>
                        <programlisting><![CDATA[http://jboss.com/products/seam/transaction http://jboss.com/products/seam/transaction-2.1.xsd]]></programlisting>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <literal>resources/WEB-INF/jboss-app.xml</literal>
                     </term>
                     <listitem>
                        <para> You can delete this file as we aren't deploying
                           to JBoss AS ( <literal>jboss-app.xml</literal>
                           is used to enable classloading isolation in JBoss
                           AS) </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term> <literal>resources/*-ds.xml</literal>
                     </term>
                     <listitem>
                        <para> You can delete these files as we aren't
                           deploying to JBoss AS. These files define
                           datasources in JBoss AS, in Weblogic we will use the
                           administration console.</para>
                     </listitem>
                  </varlistentry>
               </variablelist> </para>
         </section>
         <section id="weblogic-seam-gen-lib-changes">
            <title>Library changes</title>
            <para>The <literal>seam-gen</literal> application has very
               similar library dependencies as the <literal>jpa</literal>
               example above. See <xref linkend="weblogic-jpa-diff"/>.
               Below is the changes that are needed to get them in this
               application.</para>
            
            <itemizedlist>
               
               <listitem>
                  <para>Missing jars — There are two libraries that
                     <literal>seam-gen</literal> does not provide by
                     default. These need to be copied into your projects
                     <literal>lib</literal> directory manually.
                     <itemizedlist>
                        <listitem>
                           <para>jboss-archive-browsing.jar — can
                              be found in the
                              <literal>@SEAM_DIST/examples/jpa/lib</literal>
                              directory. </para>
                        </listitem>
                        <listitem>
                           <para>el-ri.jar — is also found in the
                              <literal>@SEAM_DIST/examples/jpa/lib</literal>
                              directory. </para>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>
               <listitem>
                  <para>build.xml — Now we need to adjust the
                     <literal>build.xml</literal>. Find the target
                     <literal>war</literal> and add the following to the end
                     of the target.
                     
                     
                     <programlisting><![CDATA[<copy todir="${war.dir}/WEB-INF/lib">
                  <fileset dir="${lib.dir}">
                     <!--JSF implementation -->
                     <include name="jsf-api.jar" />
                     <include name="jsf-impl.jar" />
                     
                     <!-- Misc 3rd party -->
                     <include name="commons-logging.jar" />
                     <include name="dom4j.jar" />
                     <include name="javassist.jar" />
                     <include name="cglib.jar" />
                     <include name="antlr.jar" />
                     
                     <!-- Hibernate --> 
                     <include name="hibernate.jar" />
                     <include name="hibernate-commons-annotations.jar" />
                     <include name="hibernate-annotations.jar" />
                     <include name="hibernate-entitymanager.jar" />
                     <include name="hibernate-validator.jar" />
                     <include name="jboss-archive-browsing.jar" />
                     
                     <!-- Needed for Drools -->
                     <include name="core.jar"/>
                  </fileset>
              </copy>]]></programlisting>
                     </para>
               </listitem>
            </itemizedlist>
            
         </section>
         
         <section>
            <title><literal>seam-gen</literal> development profile
               issue</title>
            <para>There is currently an issue with the behavior of the
               <literal>seam-gen WAR</literal> application when built using
               the development profile (the default) and deployed to Weblogic.
               The symptom is that the login page of the application will always
               show a <literal>login failed</literal> message.</para>
            
            <para>When the application is built using the development profile
               the <literal>action</literal> class files are placed in the
               <literal>WEB-INF/dev</literal> directory. Normally these
               class files are hot deployable and managed by Seam. This does not
               happen on Weblogic (see <ulink url="http://jira.jboss.com/jira/browse/JBSEAM-2455">
               jira JBSEAM-2455</ulink> for details and status).</para>
            
            <para>To workaround this you need to modify the
               <literal>build-dev.properties</literal> file. Simply
               remove the property
               <literal>action.dir=WEB-INF/dev</literal>.</para>
         </section>
         
      </section>
      
      <section>
         <title>Building and Deploying your application</title>
         <para>Finally all that's left is deploying the application. This
            involves setting up a data source, building the app, and deploying
            it.</para>
         
         <section>
            <title>Setting up the data source</title>
            <para>Configuring the datasource is very similar to the jee5 <xref linkend="weblogic-hsql-jee5-ds"/>. Except for what is
               listed here follow that instruction from the link.
               <itemizedlist>
                  <listitem>
                     <para>DataSource Name:
                        <literal>seam-gen-ds</literal></para>
                  </listitem>
                  <listitem>
                     <para>JNDI Name: <literal>seam-gen-ds</literal>
                        </para>
                  </listitem>
               </itemizedlist> </para>
         </section>
         <section>
            <title>Building the application</title>
            <para>This is as easy as typing <literal>ant</literal> in the
               projects base directory.</para>
         </section>
         <section>
            <title>Deploying the example</title>
            
            <para>When we installed Weblogic following <xref linkend="weblogic-domain"/> we chose to have the domain in
               development mode. This means to deploy the application all we
               need to do is copy it into the autodeploy directory.
               
               
               <programlisting>cp  ./dist/weblogic_example.war /home/jbalunas/bea/user_projects/domains/seam_examples/autodeploy</programlisting></para>
            <para>Check out the application at the following
               <literal>http://localhost:7001/weblogic_example/</literal>
               .</para>
         </section>
      </section>
   </section>
   
</chapter>
    <chapter id="websphere">
   <title>Seam on IBM's Websphere</title>
   
   <para>Websphere 6.1.x is IBM's application server offering. The latest
      release is 6.1.0.13 which does not have <literal>EJB3</literal> or
      <literal>JEE5</literal> support. There is a recently released (Nov 07)
      <literal>EJB3</literal> feature pack which provides some support for
      <literal>EJB3</literal> and <literal>JPA</literal>. Currently there
      is no true <literal>JEE5</literal> offering from IBM. This causes some
      issues with Seam integration with applications that use EJB3.</para>
   
   <para>First we will go over some basic information about the Websphere
      environment that we used for these examples. After a good deal of research
      and work we were able to get EJB3 applications to function correctly. We will
      go over the details of those steps with the jee5 example. We will also deploy
      the the JPA example application. </para>
   
   <section>
      <title>Websphere environment and deployment information</title>
      
      <para>Websphere is a commercial product and so we will not discuss the
         details of its installation other than to say follow the directions
         provided by your particular installation type and license. This
         section will detail the exact server versions used, installation tips,
         and some custom properties that are needed for all of the
         examples.</para>
      
      <section>
         <title>Installation versions and tips</title>
         <para>All of the examples and information in this chapter are based on
            the the latest version of Websphere at the time of this writing.
            <itemizedlist>
               <listitem>
                  <para><ulink url="http://www.ibm.com/developerworks/websphere/zones/was/">
                     Websphere Application Server 6.1.0.13</ulink></para>
               </listitem>
               <listitem>
                  <para><ulink url="http://www-1.ibm.com/support/docview.wss?rs=180&amp;uid=swg21287579">
                     Feature Pack for EJB 3.0 for Websphere Application Server
                     V6.1 (3.0.6.1.0.13)</ulink></para>
               </listitem>
            </itemizedlist> </para>
         
         <para>The EJB3 feature pack that we installed came with the 6.1.0.13
            patch version of Websphere. Installing the feature pack does not
            ensure that your server will have the proper environment for EJB3
            applications. Be sure that as part of the installation of the feature
            pack you follow the instructions to create a new server
            profile with the EJB3 feature pack enabled, or augment one of your
            existing ones.  This can also be done after the installation 
            by running the profile managment tool.</para>
         <note>
         <title>A note about restarting the server</title>
         <para>There are times that restarting the server will be required after
            deploying or changes the examples in this chapter. Its does not seem
            like every change requires a restart. If you get errors or exceptions
            after modifing a property or deploying an application try to restart
            the server. </para> </note>
      </section>
      
      <section>
         <title>Required custom properties</title>
         <para>There are a couple of Websphere custom properties that are required
            for Seam integration.  These properties are not needed specifically
            for Seam, but work around some issues with Websphere. These are
            set following the instructions here : <ulink url="http://www-1.ibm.com/support/docview.wss?rss=180&amp;uid=swg21284395">
            Setting web container custom properties</ulink></para>
         
         <itemizedlist>
            <listitem>
               <para><literal>prependSlashToResource = "true"</literal>
                  — This solves a fairly common issue with Websphere
                  where applications are not using a leading "/" when
                  attempting to access resources. If this is not set then a 
                  <literal>java.net.MalformedURLException</literal>
                  will be thrown. With this property set you will still see
                  warnings, but the resources will be retrieved as expected.
                  <note>
                  <title>Detailed can be found at:</title>
                  <para><ulink url="http://www-1.ibm.com/support/docview.wss?uid=swg21190234">
                     SRVE0238E: Resource paths must have a leading
                     slash</ulink></para> </note> </para>
            </listitem>
            <listitem>
               <para>
                  <literal>com.ibm.ws.webcontainer.invokefilterscompatibility
                  = "true"</literal> — This solves an issue with
                  Websphere where it throws a
                  <literal>FileNotFoundException</literal> when a web
                  application attempts to access a file resource that does not
                  actually exist on disk. This is a common practice in modern web
                  applications where filters or servlets are used to process
                  resource requests like these. This issue manifests itself as
                  failures to retrieve JavaScript, CSS, images, etc... when
                  requesting a web page. <note>
                  <title>Detailed can be found at:</title>
                  <para><ulink url="http://www-1.ibm.com/support/docview.wss?uid=swg24014758">
                     PK33090; 6.1: A filter that serves a file does not pop-up an
                     alert message</ulink></para> </note></para>
            </listitem>
         </itemizedlist>
      </section>
   </section>
   
   <section id="jee5-websphere-section">
      <title> The <literal>jee5/booking</literal> example </title>
      
      <para> The <literal>jee5/booking</literal> example is based on the Hotel
         Booking example (which runs on JBoss AS). Out of the box it is designed 
         to run on Glassfish, but with the steps below it can be deployed to
         Websphere. It is located in the
         <literal>$SEAM_DIST/examples/jee5/booking</literal> directory.
         </para>
      
      <para>As stated before the <literal>EJB3</literal> feature pack does not
         provide a full <literal>jee5</literal> implementation. This means
         that there are some tricks to getting an application deployed and
         functioning. </para>
      
      <section>
         <title>Configuration file changes</title>
         
         <para>Below are the configuration file changes that are need to the base
            example.</para>
         
         <variablelist>
            <varlistentry>
               <term>
                  <literal>resources/WEB-INF/components.xml</literal>
               </term>
               <listitem>
                  <para>We need to change the way that we look up EJBs for
                     Websphere. We need to remove the
                     <literal>/local</literal> from the end of the
                     <literal>jndi-pattern</literal> attribute. It should
                     look like this: </para>
                  
                  
                  <programlisting><![CDATA[
<core:init jndi-pattern="java:comp/env/jboss-seam-jee5/#{ejbName}" debug="true"/>
                  ]]></programlisting>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term> <literal>resources/WEB-INF/web.xml</literal>
               </term>
               <listitem>
                  <para>This is the first place that we notice an unexpected
                     change because this is not full <literal>jee5</literal>
                     implementation. </para>
                  <para> Websphere does not support <literal>Servlet
                     2.5</literal>, it requires <literal>Servlet
                     2.4</literal>. For this change we need to adjust the top of
                     the <literal>web.xml</literal> file to look like the
                     following:</para>
                  
                  
                  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" 
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
                             http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
                  ]]></programlisting>
                  <para>Next, we have to make some changes to the EJB references
                     in the <literal>web.xml</literal>. These changes are
                     what will allow Websphere to bind the EJB2 references in
                     the web module to the the actual EJB3 beans in the EAR
                     module. Replace all of the
                     <literal>ejb-local-refs</literal> when the values
                     below.</para>
                  
                  
                  <programlisting><![CDATA[
  <!-- JEE5 EJB3 names -->
  <ejb-local-ref>              
    <ejb-ref-name>jboss-seam-jee5/AuthenticatorAction</ejb-ref-name>                
    <ejb-ref-type>Session</ejb-ref-type>     
    <local-home></local-home>
    <local>org.jboss.seam.example.booking.Authenticator</local>  
  </ejb-local-ref>     
  
  <ejb-local-ref>       
    <ejb-ref-name>jboss-seam-jee5/BookingListAction</ejb-ref-name>       
    <ejb-ref-type>Session</ejb-ref-type>       
     <local-home></local-home>
    <local>org.jboss.seam.example.booking.BookingList</local>  
  </ejb-local-ref>    
  
  <ejb-local-ref>       
    <ejb-ref-name>jboss-seam-jee5/RegisterAction</ejb-ref-name>       
    <ejb-ref-type>Session</ejb-ref-type>       
     <local-home></local-home>
    <local>org.jboss.seam.example.booking.Register</local>    
  </ejb-local-ref>    
  
  <ejb-local-ref>       
    <ejb-ref-name>jboss-seam-jee5/ChangePasswordAction</ejb-ref-name>       
    <ejb-ref-type>Session</ejb-ref-type>  
     <local-home></local-home>     
    <local>org.jboss.seam.example.booking.ChangePassword</local>     
  </ejb-local-ref>    
  
  <ejb-local-ref>       
    <ejb-ref-name>jboss-seam-jee5/HotelBookingAction</ejb-ref-name>       
    <ejb-ref-type>Session</ejb-ref-type>       
     <local-home></local-home>
    <local>org.jboss.seam.example.booking.HotelBooking</local>     
  </ejb-local-ref>    
  
  <ejb-local-ref>       
    <ejb-ref-name>jboss-seam-jee5/HotelSearchingAction</ejb-ref-name>       
    <ejb-ref-type>Session</ejb-ref-type>      
     <local-home></local-home> 
    <local>org.jboss.seam.example.booking.HotelSAll of the examples and informaearching</local> 
  </ejb-local-ref>    
    
  <ejb-local-ref>
    <ejb-ref-name>jboss-seam-jee5/EjbSynchronizations</ejb-ref-name>  
    <ejb-ref-type>Session</ejb-ref-type>
    <local-home></local-home>
    <local>org.jboss.seam.transaction.LocalEjbSynchronizations</local>
  </ejb-local-ref>]]></programlisting>
                  <para>The important change is that there is an empty
                     <literal>local-home</literal> element for each EJB.
                     This tells Websphere to make the correct bindings between 
                     the web module and the EJB3 beans. The 
                     <literal>ejb-link</literal> element is simply not used. 
                  </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>resources/META-INF/persistence.xml</literal>
               </term>
               <listitem>
                  <para>For this example we will be using the default
                     datasource that comes with Websphere. To do this change the
                     <literal>jta-data-source</literal> element:</para>
                  <programlisting><![CDATA[
<jta-data-source>DefaultDatasource</jta-data-source>
                  ]]></programlisting>
                  <para>Then we need to adjust some of the hibernate
                     properties. First comment out the Glassfish properties.
                     Next you need to add/change the properties:</para>
                  
                  
                  <programlisting><![CDATA[
<!--<property name="hibernate.transaction.flush_before_completion" value="true"/>-->
<property name="hibernate.cache.provider_class" 
                  value="org.hibernate.cache.HashtableCacheProvider"/>
<property name="hibernate.dialect" value="GlassfishDerbyDialect"/>
<property name="hibernate.transaction.manager_lookup_class" 
          value="org.hibernate.transaction.WebSphereExtendedJTATransactionLookup"/>
                  ]]></programlisting>
                  <para>
                     <itemizedlist>
                        <listitem>
                           <para>
                              <literal>hibernate.transaction.manager_lookup_class</literal>
                              — Standard Hibernate transaction
                              manager property for Websphere 6.X</para>
                        </listitem>
                        <listitem>
                           <para>
                              <literal>hibernate.transaction.flush_before_completion</literal>
                              — This is commented out because we want
                              the container to manage the transactions. Also
                              if this is set to <literal>true</literal> an
                              exception will be thrown by Websphere when the
                              EJBContext is looked up.
                              
                              
                              <programlisting><![CDATA[com.ibm.wsspi.injectionengine.InjectionException: 
                 EJBContext may only be looked up by or injected into an EJB]]></programlisting></para>
                        </listitem>
                        <listitem>
                           <para><literal>hibernate.dialect</literal>
                              — From WAS 6.1.0.9 on the embedded DB was
                              switched to the same Derby DB in
                              Glassfish.</para>
                        </listitem>
                     </itemizedlist></para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>resources/GlassfishDerbyDialect.class</literal>
               </term>
               <listitem>
                  <para>You will need to get the
                     <literal>GlassfishDerbyDialect.class</literal> and
                     copy it into the <literal>/resources</literal>
                     directory. The class exists in the JPA example and can be
                     copied using the command below assuming you are in
                     <literal>jee5/booking</literal> directory:</para>
                  
                  
                  <programlisting><![CDATA[
cp ../../jpa/resources-websphere61/WEB-INF/classes/GlassfishDerbyDialect.class
   ./resources]]></programlisting>
                  <para>This class will be put into the
                     <literal>jboss-seam-jee5.jar</literal> file using
                     changes to the build.xml discussed later. </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term> <literal>resources/import.sql</literal>
               </term>
               <listitem>
                  <para>This file must also be copied from the JPA example
                     because either the Derby DB or the dialect does not support
                     changes to the <literal>ID</literal> column. The files
                     are identical except for the column difference. Use the
                     following command to make the copy
                     
                     
                     <programlisting><![CDATA[
cp ../../jpa/resources-websphere61/import.sql ./resources]]></programlisting>
                     </para>
               </listitem>
            </varlistentry>
         </variablelist>
         
      </section>
      
      <section>
         <title>Building the <literal>jee5/booking</literal>
            example</title>
         
         <para>In order to get the changes we have made into our application we
            need to make some changes to the <literal>build.xml</literal>.  
            There are also some additional jars that are required by our
            application in order to work with Websphere. This section will cover
         what changes are needed to the <literal>build.xml</literal>.</para>
         
         <section>
            <title>New libraries dependencies</title>
            <para>
               <itemizedlist>
                  <listitem>
                     <para>JSF libraries — Websphere 6.1 comes with
                        its own version of JSF 1.1 (Seam requires JSF 1.2). So
                        we must add these jars to our application:
                        <itemizedlist>
                           <listitem>
                              <para><literal>jsf-api.jar</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para><literal>jsf-impl.jar</literal>
                                 </para>
                           </listitem>
                        </itemizedlist> </para>
                  </listitem>
                  <listitem>
                     <para>Since Websphere is not a fully compliant
                        <literal>JEE5</literal> implementation we need to
                        add these EL libraries:
                        <itemizedlist>
                           <listitem>
                              <para><literal>el-api.jar</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para><literal>el-ri.jar</literal>
                                 </para>
                           </listitem>
                        </itemizedlist> </para>
                  </listitem>
                  <listitem>
                     <para><literal>jboss-seam.jar</literal> — for
                        some reason when deploying the application through
                        the Websphere administration console it can not find
                        the <literal>jboss-seam.jar</literal> at the base
                        of the EAR archive. This means that we need to add it to
                        the <literal>/lib</literal> of the EAR.</para>
                  </listitem>
                  <listitem>
                     <para>Finally we remove the <literal>log4j.jar</literal> 
                        so that all of the log output from our application will 
                        be added to the Websphere log. Additional steps are 
                        required to fully configure log4j and those are outside
                        of the scope of this document.</para>
                  </listitem>
               </itemizedlist> </para>
            
         </section>
         
         <section>
            <title>Updating the <literal>build.xml</literal> file</title>
            
            <para>Add the following entry to the bottom of the
               <literal>build.xml</literal> file. This overrides the
               default fileset that is used to populate the
               <literal>jboss-seam-jee5.jar</literal>. The primary change
               is the addition of the
               <literal>GlassfishDerbyDialect.class</literal>:
               
               
               <programlisting><![CDATA[
   <fileset id="jar.resources" dir="${resources.dir}">
      <include name="import.sql" />
      <include name="seam.properties" />
      <include name="GlassfishDerbyDialect.class" />
      <include name="META-INF/persistence.xml" />
      <include name="META-INF/ejb-jar.xml" />
   </fileset>]]></programlisting>
               </para>
            
            <para>Next we need to add the library dependencies discussed above.
               For this add the following to bottom of the
               <literal>ear.lib.extras</literal> fileset entry:
               
               
               <programlisting><![CDATA[
   <!--<include name="lib/log4j.jar" />-->
   <include name="lib/el-api.jar" />
   <include name="examples/jpa/lib/el-ri.jar" />
   <include name="lib/jsf-api.jar" />
   <include name="lib/jsf-impl.jar" />
   <include name="lib/jboss-seam.jar" />
</fileset>]]></programlisting>
               </para>
            
            <para>Now all that is left is to execute the <literal>ant
               archive</literal> task and the built application will be in
               the <literal>jee5/booking/dist</literal> directory.
               </para>
         </section>
         
      </section>
      
      <section id="jee5-websphere-deploy">
         <title>Deploying the application to Websphere</title>
         
         <para>So now we have everything we need in place. All that is left is to
            deploy it - just a few steps more.</para>
         <para> For this we will use Websphere's administration console. As
            before there are some tricks and tips that must be followed.</para>
         
         <para>The steps below are for the Websphere version stated above, yours
            may be slightly different.
            <orderedlist>
               <listitem>
                  <para>Log in to the administration console
                     
                     
                     <programlisting><![CDATA[
https://localhost:9043/ibm/console]]></programlisting>
                     </para>
               </listitem>
               <listitem>
                  <para>Access the <literal>Enterprise
                     Application</literal> menu option under the
                     <literal>Applications</literal> top menu. </para>
               </listitem>
               <listitem>
                  <para>At the top of the <literal>Enterprise
                     Application</literal> table select
                     <literal>Install</literal>. Below are installation
                     wizard pages and what needs to done on each:
                     <itemizedlist>
                        <listitem>
                           <para><literal>Preparing for the application
                              installation</literal>
                              <itemizedlist>
                                 <listitem>
                                    <para>Browse to the
                                       <literal>examples/jee5/booking/dist/jboss-seam-jee5.ear</literal>
                                       file using the file upload widget.
                                       </para>
                                 </listitem>
                                 <listitem>
                                    <para>Select the
                                       <literal>Next</literal>
                                       button.</para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para><literal>Select installation
                              options</literal>
                              <itemizedlist>
                                 <listitem>
                                    <para>Select the <literal>Deploy
                                       enterprise beans</literal>
                                       check box. This is needed unless you
                                       used a Websphere tool to package the
                                       application. </para>
                                 </listitem>
                                 <listitem>
                                    <para>Select the
                                       <literal>Next</literal>
                                       button.</para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para><literal>Map modules to
                              servers</literal>
                              <itemizedlist>
                                 <listitem>
                                    <para>No changes needed here as we only
                                       have one server. Select the
                                       <literal>Next</literal>
                                       button.</para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para><literal>Map EJB references to
                              beans</literal> This page will list all of the
                              beans that we entered in the web.xml.
                              <itemizedlist>
                                 <listitem>
                                    <para>Make sure that <literal>Allow
                                       EJB reference targets to resolve
                                       automatically</literal> check box
                                       is selected. This will tell
                                       Websphere to bind our EJB3 beans to
                                       the EJB references in the web
                                       module.</para>
                                 </listitem>
                                 <listitem>
                                    <para>Select the
                                       <literal>Next</literal>
                                       button.</para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para><literal>Map virtual hosts for Web
                              modules</literal>
                              <itemizedlist>
                                 <listitem>
                                    <para>No changes needed here. Select
                                       the <literal>Next</literal>
                                       button.</para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para><literal>Summary</literal>
                              <itemizedlist>
                                 <listitem>
                                    <para>No changes needed here. Select
                                       the <literal>Finish</literal>
                                       button.</para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para><literal>Installation</literal>
                              <itemizedlist>
                                 <listitem>
                                    <para>Now you will see it installing and
                                       deploying your
                                       application.</para>
                                 </listitem>
                                 <listitem>
                                    <para>When if finishes select the
                                       <literal>Save</literal> link and
                                       you will be returned to the
                                       <literal>Enterprise
                                       Applications</literal>
                                       table.</para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>
               <listitem id="websphere-app-adj-after-install" xreflabel="installation adjustments for jee5 example">
                  <para>Now that we have our application installed we need to
                     make some adjustments to it before we can start it:
                     <itemizedlist>
                        <listitem>
                           <para>Starting from the <literal>Enterprise
                              Applications</literal> table select the
                              <literal>Seam Booking</literal>
                              link.</para>
                        </listitem>
                        <listitem>
                           <para>Select the <literal>Manage
                              Modules</literal> link.</para>
                        </listitem>
                        <listitem>
                           <para>Select the
                              <literal>jboss-seam-jee5.war</literal>
                              link.</para>
                        </listitem>
                        <listitem>
                           <para>Change the <literal>Class loader
                              order</literal> combo box to 
                              <literal>Classes loaded with application
                              class loader first</literal>.</para>
                        </listitem>
                        <listitem>
                           <para>Select <literal>Apply</literal> and then
                              <literal>Save</literal> options.</para>
                        </listitem>
                        <listitem>
                           <para>Return the <literal>Seam
                              Booking</literal> page.</para>
                        </listitem>
                        <listitem>
                           <para>On this page select the <literal>Class
                              loading and update detection</literal>
                              link.</para>
                        </listitem>
                        <listitem>
                           <para>Select the radio button for
                              <literal>Classes loaded with application
                              class loader first</literal>.</para>
                        </listitem>
                        <listitem>
                           <para>Even though we are not enabling class reload
                              you must also enter a valid number in the
                              <literal>Polling interval for updated
                              files</literal> text area (zero works
                              fine).</para>
                        </listitem>
                        <listitem>
                           <para>Select <literal>Apply</literal> and then
                              <literal>Save</literal> options.</para>
                        </listitem>
                        <listitem>
                           <para>You should verify that the change you just
                              made has been remembered. We have had problems with the last
                              class loader change not taking effect - even
                              after a restart. If the change did not take you
                              will need to do it manually, following these
                              directions:
                              <itemizedlist>
                                 <listitem>
                                    <para> Open the following file in a text
                                       editor of your choice:
                                       
                                       
                                       <programlisting><![CDATA[
$WebSphereInstall/$yourServerName/profiles/$yourProfileName/config/cells/
                   $yourCellName/applications/Seam Booking.ear/deployments/
                   Seam Booking/deployment.xml]]></programlisting>
                                       </para>
                                 </listitem>
                                 <listitem>
                                    <para> Modify the following line so that
                                       <literal>PARENT_FIRST</literal>
                                       is now
                                       <literal>PARENT_LAST</literal>:
                                       
                                       
                                       <programlisting><![CDATA[
<classloader xmi:id="Classloader_#######" mode="PARENT_FIRST"/>]]></programlisting>
                                       </para>
                                 </listitem>
                                 <listitem>
                                    <para> Save the file and now when go to the
                                       <literal>Class loading and update
                                       detection</literal> page you
                                       should see <literal>Classes loaded
                                       with application class loader
                                       first</literal> selected. </para>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>               
               <listitem>
                  <para>To start the application return to the
                     <literal>Enterprise Applications</literal> table and
                     select our application in the list. Then choose the
                     <literal>Start</literal> button at the top of the
                     table.</para>
               </listitem>
               <listitem>
                  <para>You can now access the application at
                     <literal>http://localhost:9080/seam-jee5/</literal>
                     .</para>
               </listitem>
            </orderedlist> 
            <note>
               <title>A note about Websphere Stateful bean timeouts</title>
               <para>The default timeout period for a Websphere 6.1 Stateful
                  EJB is 10 minutes.  This means that you may see some EJB timeout
                  exceptions after some idle time.  It is possible to adjust the
                  timeout of the Stateful EJBs on an individual basis, but 
                  that is beyond the scope of this document.  See the Websphere
                  documentation for details.
                  </para>
            </note>
         </para>
      </section>
      
   </section>
   
   <section>
      <title> The <literal>jpa</literal> booking example </title>
      <para>Thankfully getting the <literal>jpa</literal> example to work is
         much easier than the <literal>jee5</literal> example. This is the
         Hotel Booking example implemented in Seam POJOs and using Hibernate JPA
         with JPA transactions. It does not require EJB3 support to
         run.</para>
      
      <para> The example already has a breakout of configurations and build
         scripts for many of the common containers including Websphere.</para>
      
      <para>First thing we are going to do is build and deploy that example. Then
         we'll go over some key changes that we needed.</para>
      
      <section>
         <title>Building the <literal>jpa</literal> example</title>
            <para> Building it only requires running the correct ant command:
               <programlisting>ant websphere61</programlisting>
               This will create container specific distribution and exploded
               archive directories with the <literal>websphere61</literal> label.</para>
      </section>
      <section>
         <title>Deploying the <literal>jpa</literal> example</title>
            <para>This is similar to the <literal>jee5</literal> example at 
               <xref linkend="jee5-websphere-deploy"/>, but without so many steps.
             </para>
         <itemizedlist>
            <listitem>
               <para>From the <literal>Enterprise Applications</literal> table
               select the <literal>Install</literal> button.
               <itemizedlist>
                  <listitem>
                     <para><literal>Preparing for the application
                        installation</literal>
                        <itemizedlist>
                           <listitem>
                              <para>Browse to the 
                                 <literal>examples/jpa/dist-websphere61/jboss-seam-jpa.war</literal>
                                 file using the file upload widget.
                                 </para>
                           </listitem>
                           <listitem>
                              <para>In the <literal>Context root</literal> text box
                                 enter <literal>jboss-seam-jpa</literal>.
                                 </para>
                           </listitem>
                           <listitem>
                              <para>Select the <literal>Next</literal> button.
                                 </para>
                           </listitem>
                        </itemizedlist> </para>
                  </listitem>
                  <listitem>
                     <para>Select the <literal>Next</literal> button for the next
                        three pages, no changes are needed.
                     </para>
                  </listitem>
                  <listitem>
                     <para><literal>Summary</literal> page
                        <itemizedlist>
                           <listitem>
                              <para>Review the settings if you wish and select
                                 the <literal>Finish</literal> button to install
                                 the application.  When installation finished select the <literal>
                                 Save</literal> link and you will be returned to the 
                                 <literal>Enterprise Applications</literal> table.
                                 </para>
                           </listitem>
                        </itemizedlist> </para>
                  </listitem>
               </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>As with the <literal>jee5</literal> example there are some
                  class loader changes needed before we start the application.
                  Follow the instructions at <xref linkend="websphere-app-adj-after-install"/>
                  but exchange <literal>jboss-seam-jpa</literal> for <literal>Seam Booking</literal>.
               </para>
            </listitem>
            <listitem>
               <para>Finally start the application by selecting it in the 
                  <literal>Enterprise Applications</literal> table and clicking
                  the <literal>Start</literal> button.
               </para>
            </listitem>
            <listitem>
               <para>You can now access the application at the  
                  <literal>http://localhost:9080/jboss-seam-jpa/index.html</literal>.
               </para>
            </listitem>
         </itemizedlist>
      </section>
      
      <section>
         <title>Whats different for Websphere 6.1</title>
         <para>The differences between the JPA examples that deploys to JBoss
            4.2 and Websphere 6.1 are mostly expected; library and
            configuration file changes. </para>
         <itemizedlist>
            <listitem>
               <para>Configuration file changes
                  <itemizedlist>
                     <listitem>
                        <para><literal>WEB-INF/web.xml</literal>
                           — the only significant change is that
                           Websphere 6.1 only support <literal>Servlet
                           2.4</literal> so the top of this file was changed.
                           </para>
                     </listitem>
                     <listitem>
                        <para>
                           <literal>META-INF/persistence.xml</literal>
                           — the main changes here are for the
                           datasource JNDI path, switching to the Websphere
                           6.1 transaction manager look up class, and
                           changing the hibernate dialect to be
                           <literal>GlassfishDerbyDialect</literal>
                           .</para>
                     </listitem>
                     <listitem>
                        <para>
                           <literal>WEB-INF/classes/GlassfishDerbyDialect.class
                           </literal> — this class is needed for the
                           hibernate dialect change to
                           <literal>GlassfishDerbyDialect</literal>
                           </para>
                     </listitem>
                     <listitem>
                        <para><literal>import.sql</literal> —
                           either for the dialect or Derby DB the
                           <literal>ID</literal> column can not be
                           populated by this file and was removed.
                           </para>
                     </listitem>
                  </itemizedlist> </para>
            </listitem>
            <listitem>
               <para>Changes for dependent libraries</para>
               <para><literal>WEB-INF/lib</literal> — The Websphere
                  version requires several library packages because they are
                  not included as they are with JBoss AS. These are primarily for
                  hibernate, JSF-RI support and their dependencies.  Below are 
                  listed only the additional jars needed above and beyond the JBoss 
                  <literal>JPA</literal> example.
                  <itemizedlist>
                     <listitem>
                        <para> To use Hibernate as your JPA provider you need
                           the following jars:
                           <itemizedlist>
                              <listitem>
                                 <simpara>
                                    <literal>hibernate.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>hibernate-annotations.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>hibernate-commons-annotations.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>hibernate-entitymanager.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>hibernate-validator.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>commons-collections.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>jboss-archive-browsing.jar</literal>
                                    </simpara>
                              </listitem>
                           </itemizedlist> </para>
                     </listitem>
                     <listitem>
                        <para>Seam requires JSF 1.2 and these are the jars needed
                           for that. Websphere 6.1 ships with its own implementation
                           of JSF 1.1.
                           <itemizedlist>
                              <listitem>
                                 <simpara>
                                    <literal>jsf-api.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>jsf-impl.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara> <literal>el-ri.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara> <literal>el-api.jar</literal>
                                    </simpara>
                              </listitem>
                           </itemizedlist> </para>
                     </listitem>
                     <listitem>
                        <para>Various third party jars that Websphere needs:
                           <itemizedlist>
                              <listitem>
                                 <simpara> <literal>antlr.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara> <literal>cglib.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara> <literal>asm.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara> <literal>dom4j.jar</literal>
                                    </simpara>
                              </listitem>
                              <listitem>
                                 <simpara>
                                    <literal>javassist.jar</literal>
                                    </simpara>
                              </listitem>
                           </itemizedlist> </para>
                     </listitem>
                  </itemizedlist> </para>
            </listitem>
         </itemizedlist>
         
      </section>
         
      
   </section>
   
    <section>
      <title>Deploying an application created using
         <literal>seam-gen</literal> on Websphere 6.1.0.13</title>
      
      <para><literal>seam-gen</literal> is a very useful tool for developers
         to quickly get an application up and running, and provides a foundation
         to add your own functionality. Out of box <literal>seam-gen</literal>
         will produce applications configured to run on JBoss AS. These
         instructions will show the steps needed to get it to run on Websphere. 
         As stated above in <xref linkend="jee5-websphere-section"/> there
         are some tricky changes needed to get an EJB3 application running. This
         section will take you through the exact steps.</para>
      
      <para>The first step is setting up <literal>seam-gen</literal> to
         construct the base project. There are several choices made below,
         specifically the datasource and hibernate values that we will adjust
         once the project is created.</para>
      
      
      <programlisting><![CDATA[
./seam setup
Buildfile: build.xml

init:

setup:
     [echo] Welcome to seam-gen :-)
    [input] Enter your Java project workspace (the directory that contains your Seam projects) [C:/Projects] [C:/Projects]
/home/jbalunas/workspace
    [input] Enter your JBoss home directory [C:/Program Files/jboss-4.2.2.GA] [C:/Program Files/jboss-4.2.2.GA]
/home/jbalunas/jboss/jboss-4.2.2.GA
    [input] Enter the project name [myproject] [myproject]
websphere_example
     [echo] Accepted project name as: websphere_example
    [input] Do you want to use ICEFaces instead of RichFaces [n] (y, [n], )

    [input] skipping input as property icefaces.home.new has already been set.
    [input] Select a RichFaces skin [blueSky] ([blueSky], classic, ruby, wine, deepMarine, emeraldTown, sakura, DEFAULT)

    [input] Is this project deployed as an EAR (with EJB components) or a WAR (with no EJB support) [ear]  ([ear], war, )

    [input] Enter the Java package name for your session beans [com.mydomain.websphere_example] [com.mydomain.websphere_example]
org.jboss.seam.tutorial.websphere.action
    [input] Enter the Java package name for your entity beans [org.jboss.seam.tutorial.websphere.action] [org.jboss.seam.tutorial.websphere.action]
org.jboss.seam.tutorial.websphere.model
    [input] Enter the Java package name for your test cases [org.jboss.seam.tutorial.websphere.action.test] [org.jboss.seam.tutorial.websphere.action.test]
org.jboss.seam.tutorial.websphere.test
    [input] What kind of database are you using? [hsql]  ([hsql], mysql, oracle, postgres, mssql, db2, sybase, enterprisedb, h2)

    [input] Enter the Hibernate dialect for your database [org.hibernate.dialect.HSQLDialect] [org.hibernate.dialect.HSQLDialect]

    [input] Enter the filesystem path to the JDBC driver jar [lib/hsqldb.jar] [lib/hsqldb.jar]

    [input] Enter JDBC driver class for your database [org.hsqldb.jdbcDriver] [org.hsqldb.jdbcDriver]

    [input] Enter the JDBC URL for your database [jdbc:hsqldb:.] [jdbc:hsqldb:.]

    [input] Enter database username [sa] [sa]

    [input] Enter database password [] []

    [input] Enter the database schema name (it is OK to leave this blank) [] []

    [input] Enter the database catalog name (it is OK to leave this blank) [] []

    [input] Are you working with tables that already exist in the database? [n]  (y, [n], )

    [input] Do you want to drop and recreate the database tables and data in import.sql each time you deploy? [n]  (y, [n], )

[propertyfile] Creating new property file: /rhdev/projects/jboss-seam/svn-seam_2_0/jboss-seam-2_0/seam-gen/build.properties
     [echo] Installing JDBC driver jar to JBoss server
     [copy] Copying 1 file to /home/jbalunas/jboss/jboss-4.2.2.GA/server/default/lib
     [echo] Type 'seam create-project' to create the new project

BUILD SUCCESSFUL
Total time: 3 minutes 5 seconds]]></programlisting>
      
      <para> Type <literal>./seam new-project</literal> to create your
         project and <literal>cd
         /home/jbalunas/workspace/websphere_example</literal> to the
         newly created structure. </para>
      
   </section>
   <section>
      <title>Changes needed for deployment to Websphere</title>
      <para>We now need to make some changes to the generated project.</para>
      <section>
         <title>Configuration file changes</title>
         <variablelist>
            <varlistentry>
               <term>
                  <literal>resources/META-INF/persistence-dev.xml</literal>
               </term>
               <listitem>
                  <itemizedlist>
                     <listitem>
                        <para> Alter the
                           <literal>jta-data-source</literal> to be
                           <literal>DefaultDatasource</literal>. We are
                           going to be using the integrated Websphere
                           DB.</para>
                     </listitem>
                     <listitem>
                        <para> Add or change the properties below.
                           These are described in detail at <xref linkend="jee5-websphere-section"/>:
                           </para>
                        
                        <programlisting><![CDATA[
<property name="hibernate.dialect" value="GlassfishDerbyDialect"/>
<property name="hibernate.hbm2ddl.auto" value="update"/>
<property name="hibernate.show_sql" value="true"/>
<property name="hibernate.format_sql" value="true"/>
<property name="hibernate.cache.provider_class" 
          value="org.hibernate.cache.HashtableCacheProvider"/>
<property name="hibernate.transaction.manager_lookup_class" 
          value="org.hibernate.transaction.WebSphereExtendedJTATransactionLookup"/>]]></programlisting>
                     </listitem>
                     <listitem>
                        <para> Remove the JBoss AS specific method of exposing
                           the EntityManagerFactory: </para>
                        
                        <programlisting><![CDATA[<property 
 name="jboss.entity.manager.factory.jndi.name" 
 value="java:/websphere_exampleEntityManagerFactory">]]></programlisting>
                     </listitem>
                     <listitem>
                        <para> You'll need to alter
                           <literal>persistence-prod.xml</literal> as
                           well if you want to deploy to Websphere using the
                           prod profile. </para>
                     </listitem>
                  </itemizedlist>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>resources/GlassfishDerbyDialect.class</literal>
               </term>
               <listitem>
                  <para>As with other examples we need to include this class for
                     DB support. It can be copied from the
                     <literal>jpa</literal> example into the
                     <literal>websphere_example/resources</literal>
                     directory.
                     
                     <programlisting><![CDATA[
cp $SEAM/examples/jpa/resources-websphere61/WEB-INF/classes/GlassfishDerbyDialect.class
   ./resources]]></programlisting>
                     </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>resources/META-INF/jboss-app.xml</literal>
               </term>
               <listitem>
                  <para> You can delete this file as we aren't deploying to JBoss
                     AS ( <literal>jboss-app.xml</literal> is used to enable
                     classloading isolation in JBoss AS) </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term> <literal>resources/*-ds.xml</literal>
               </term>
               <listitem>
                  <para> You can delete these file as we aren't deploying to
                     JBoss AS (these files define datasources in JBoss AS, we
                     are using Websphere's default datasource) </para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>
                  <literal>resources/WEB-INF/components.xml</literal>
               </term>
               <listitem>
                  <itemizedlist>
                     <listitem>
                        <para> Enable container managed transaction
                           integration - add the <literal>
                           &lt;transaction:ejb-transaction /&gt;
                           </literal> component, and it's namespace
                           declaration <literal>
                           xmlns:transaction="http://jboss.com/products/seam/transaction"
                           </literal> </para>
                     </listitem>
                     <listitem>
                        <para> Alter the <literal>jndi-pattern</literal>
                           to <literal>
                           java:comp/env/websphere_example/#{ejbName}
                           </literal> </para>
                     </listitem>
                     <listitem>
                        <para>We do not need
                           <literal>managed-persistence-context</literal>
                           for this example and so can delete its
                           entry.</para>
                        
                        
                        <programlisting><![CDATA[
<persistence:managed-persistence-context name="entityManager"
             auto-create="true"
             persistence-unit-jndi-name="java:/websphere_exampleEntityManagerFactory"/> ]]></programlisting>
                     </listitem>
                  </itemizedlist>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term> <literal>resources/WEB-INF/web.xml</literal>
               </term>
               <listitem>
                  <para> Websphere does not support <literal>Servlet
                     2.5</literal>, it required <literal>Servlet
                     2.4</literal>. For this change we need to adjust the top of
                     the <literal>web.xml</literal> file to look like the
                     following:</para>
                  
                  <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" 
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
                             http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
                  ]]></programlisting>
                  
                  <para>As with the <literal>jee5/booking</literal>
                     example we need to add EJB references to the web.xml. These
                     references require the empty
                     <literal>local-home</literal> to flag them for
                     Websphere to perform the proper binding.</para>
                  
                  
                  <programlisting><![CDATA[
  <ejb-local-ref>              
    <ejb-ref-name>websphere_example/AuthenticatorAction</ejb-ref-name>                
    <ejb-ref-type>Session</ejb-ref-type>     
    <local-home></local-home>
    <local>org.jboss.seam.tutorial.websphere.action.Authenticator</local>  
  </ejb-local-ref>
   
  <ejb-local-ref>
    <ejb-ref-name>websphere_example/EjbSynchronizations</ejb-ref-name>  
    <ejb-ref-type>Session</ejb-ref-type>
    <local-home></local-home>
    <local>org.jboss.seam.transaction.LocalEjbSynchronizations</local>
  </ejb-local-ref>]]></programlisting>
               </listitem>
            </varlistentry>
         </variablelist>
      </section>
      <section>
         <title>Creating the <literal>AuthenticatorAction</literal>
            EJB</title>
         <para> We want to take the existing <literal>Authenticator</literal>
            Seam POJO component and create an EJB3 out of it. </para>
         <orderedlist>
            <listitem>
               <itemizedlist>
                  <listitem>
                     <para> Rename the class to
                        <literal>AuthenticatorAction</literal> </para>
                  </listitem>
                  <listitem>
                     <para> Add the <literal>@Stateless</literal>
                        annotation to the new
                        <literal>AuthenticatorAction</literal> class.
                        </para>
                  </listitem>
                  <listitem>
                     <para> Create an interface called
                        <literal>Authenticator</literal> which
                        <literal>AuthenticatorAction</literal>
                        implements (EJB3 requires session beans to have a
                        local interface). Annotate the interface with
                        <literal>@Local</literal> , and add a single method
                        with same signature as the
                        <literal>authenticate</literal> in
                        <literal>AuthenticatorAction</literal> . </para>
                  </listitem>
               </itemizedlist>
               
               
               <programlisting><![CDATA[
@Name("authenticator") @Stateless public class
            AuthenticatorAction implements Authenticator {]]></programlisting>
               
               
               <programlisting><![CDATA[
@Local public interface Authenticator { 
  public boolean authenticate(); 
}]]></programlisting>
            </listitem>
            <listitem>
               <para>We've already added its reference to the
                  <literal>web.xml</literal> file so are good to go. </para>
            </listitem>
         </orderedlist>
      </section>
      <section>
         <title>Extra jar dependencies and other changes to the
            <literal>build.xml</literal></title>
         <para> This application has similar requirements as the
            <literal>jee5/booking</literal> example. </para>
         
         <itemizedlist>
            <listitem>
               <para>Change the default target to
                  <literal>archive</literal> (we aren't going to cover
                  automatic deployment to Websphere).
                  
                  
                  <programlisting><![CDATA[
<project name="websphere_example" default="archive" basedir=".">]]></programlisting>
                  </para>
            </listitem>
            <listitem>
               <para>Websphere looks for the drools
                  <literal>/security.drl</literal> file in the root of the
                  <literal>war</literal> file instead of the root of the
                  <literal>websphere_example.jar</literal> so we need
                  to have the <literal>build.xml</literal> move it to the
                  correct location at build time. The following must be added at
                  the top of the <literal> &lt;target name="war"
                  depends="compile" description="Build the distribution
                  .war file"&gt; </literal> target.
                  
                  <programlisting><![CDATA[
<copy todir="${war.dir}">
   <fileset dir="${basedir}/resources" >
       <include name="*.drl" />
   </fileset>
</copy>]]></programlisting></para>
            </listitem>
            <listitem>
               <para>We need to ge the
                  <literal>GlassfishDerbyDialect.class</literal> into
                  our application jar. To do that find the
                  <literal>jar</literal> task and modify the top of it so that
                  it looks like this:
                  
                  
                  <programlisting><![CDATA[
<target name="jar" depends="compile,copyclasses" 
   description="Build the distribution .jar file">
   <copy todir="${jar.dir}">
      <fileset dir="${basedir}/resources">
          <include name="seam.properties" />
          <include name="*.drl" />
          <include name="GlassfishDerbyDialect.class" />
      </fileset>
   </copy>
...]]></programlisting>
                  </para>
            </listitem>
            <listitem>
               <para>Next we need to get the
                  <literal>jboss-seam.jar</literal> into the base of the
                  <literal>EAR</literal> file. For deployment Websphere
                  requires this jar to be in both the <literal>/lib</literal>
                  directory and at the base of the <literal>EAR</literal>. You
                  must add the following to the <literal>archive</literal>
                  task: </para>
               
               
               <programlisting><![CDATA[
<fileset dir="${lib.dir}">
   <include name="jboss-seam.jar" />
</fileset>]]></programlisting>
               <para>So that the whole <literal>archive</literal> task looks
                  like:</para>
               
               
               <programlisting><![CDATA[
<target name="archive" depends="jar,war,ear" 
        description="Package the archives">
   <jar jarfile="${dist.dir}/${project.name}.jar" basedir="${jar.dir}"/>
   <jar jarfile="${dist.dir}/${project.name}.war" basedir="${war.dir}"/>
   <jar jarfile="${dist.dir}/${project.name}.ear">
       <fileset dir="${ear.dir}"/>
       <fileset dir="${dist.dir}">
           <include name="${project.name}.jar"/>
           <include name="${project.name}.war"/>
       </fileset>
       <fileset dir="${lib.dir}">
          <include name="jboss-seam.jar" />
       </fileset>
    </jar>
</target>]]></programlisting>
            </listitem>
            <listitem>
               <para>Now we need to get extra jars into the 
                  <literal>build.xml</literal>.  Look for the 
                  <literal>&lt;fileset dir="${basedir}"&gt;</literal> section 
                  of the task below.  Add the new includes at the bottom of 
                  the fileset.
                  </para>
               
               
               <programlisting><![CDATA[
<target name="ear" description="Build the EAR">
    <copy todir="${ear.dir}">
            <fileset dir="${basedir}/resources">
                    <include name="*jpdl.xml" />
                    <include name="*hibernate.cfg.xml" />
                    <include name="jbpm.cfg.xml" />
            </fileset>
         <fileset dir="${lib.dir}">
               <include name="jboss-seam.jar" />
         </fileset>
            <fileset dir="${basedir}">
                    <include name="lib/jbpm*.jar" />
                    <include name="lib/jboss-el.jar" />
                    <include name="lib/drools-*.jar"/>
                    <include name="lib/core.jar"/>
                    <include name="lib/janino*.jar"/>
                    <include name="lib/antlr-*.jar"/>
                    <include name="lib/mvel*.jar"/>
                  <include name="lib/richfaces-api*.jar" />
            </fileset>
    </copy>
    <copy todir="${ear.dir}/META-INF">
            <fileset dir="${basedir}/resources/META-INF">
                    <include name="application.xml" />
                    <include name="jboss-app.xml" />
            </fileset>
    </copy>
</target>]]></programlisting>
               <itemizedlist>
                  <listitem>
                     <para>Hibernate dependencies</para>
                     <programlisting><![CDATA[
   <!-- Hibernate and deps -->
   <include name="lib/hibernate.jar"/>
   <include name="lib/hibernate-commons-annotations.jar"/>
   <include name="lib/hibernate-annotations.jar"/>
   <include name="lib/hibernate-entitymanager.jar"/>
   <include name="lib/hibernate-validator.jar"/>
   <include name="lib/jboss-common-core.jar" />]]></programlisting>
                  </listitem>
                  <listitem>
                     <para>JSF dependencies.  You will need to copy the 
                     <literal>el-ri.jar</literal> from the 
                     <literal>$SEAM/examples/jpa/lib</literal> directory.</para>
                     <programlisting><![CDATA[
   <!-- jsf libs -->
   <include name="lib/jsf-api.jar" />
   <include name="lib/jsf-impl.jar" />
   <include name="lib/el-api.jar" />
   <include name="lib/el-ri.jar"/>]]></programlisting>
                  </listitem>
                  <listitem>
                     <para> Third party dependencies.  You will need to copy the
                     <literal>jboss-archive-browsing.jar</literal> from the 
                     <literal>$SEAM/examples/jpa/lib</literal> directory into the 
                     the projects <literal>/lib</literal> directory.  You will 
                     also need to acquire the <literal>concurrent.jar</literal> 
                     and place it in the same directory.  You can get this from 
                     any jboss distribution or just search for it.</para>
                     <programlisting><![CDATA[
   <!-- 3rd party and supporting jars -->
   <!--<include name="lib/log4j.jar" />-->
   <include name="lib/javassist.jar"/>
   <include name="lib/dom4j.jar" />
   <include name="lib/jboss-archive-browsing.jar" />
   <include name="lib/concurrent.jar" />
   <include name="lib/cglib.jar"/>
   <include name="lib/asm.jar"/>
   <include name="lib/antlr.jar" />
   <include name="lib/commons-logging.jar" />
   <include name="lib/commons-collections.jar" />]]></programlisting>
                  </listitem>
                  <listitem>
                     <para><literal>jboss-seam.jar</literal> - this is needed in
                     both the <literal>ear</literal> base and 
                        <literal>/lib</literal>
                     directory.</para>
                     <programlisting><![CDATA[
   <!-- seam jar -->
   <include name="lib/jboss-seam.jar" />]]></programlisting>
                  </listitem>
               </itemizedlist>
               
               <para>You should end up with something like:</para>
               <programlisting><![CDATA[
<fileset dir="${basedir}">
   <include name="lib/jbpm*.jar" />
   <include name="lib/jboss-el.jar" />
   <include name="lib/drools-*.jar"/>
   <include name="lib/core.jar"/>
   <include name="lib/janino*.jar"/>
   <include name="lib/antlr-*.jar"/>
   <include name="lib/mvel*.jar"/>
   <include name="lib/richfaces-api*.jar" />
                                 
   <!-- Hibernate and deps -->
   <include name="lib/hibernate.jar"/>
   <include name="lib/hibernate-commons-annotations.jar"/>
   <include name="lib/hibernate-annotations.jar"/>
   <include name="lib/hibernate-entitymanager.jar"/>
   <include name="lib/hibernate-validator.jar"/>
   <include name="lib/jboss-common-core.jar" />
               
   <!-- jsf libs -->
   <include name="lib/jsf-api.jar" />
   <include name="lib/jsf-impl.jar" />
   <include name="lib/el-api.jar" />
   <include name="lib/el-ri.jar"/>
               
   <!-- 3rd party and supporting jars -->
   <!--<include name="lib/log4j.jar" />-->
   <include name="lib/javassist.jar"/>
   <include name="lib/dom4j.jar" />
   <include name="lib/jboss-archive-browsing.jar" />
   <include name="lib/concurrent.jar" />
   <include name="lib/cglib.jar"/>
   <include name="lib/asm.jar"/>
   <include name="lib/antlr.jar" />
   <include name="lib/commons-logging.jar" />
   <include name="lib/commons-collections.jar" />
               
   <!-- seam jar -->
   <include name="lib/jboss-seam.jar" />
                           
</fileset>]]></programlisting>
            </listitem>
         </itemizedlist>
         
      </section>
      <section>
         <title> Building and deploying the seam-gen'd application to Websphere
            </title>
         
         
         <itemizedlist>
            <listitem>
               <para> Build your application by calling
                  <literal>ant</literal> in the base directory of your
                  project (ex.
                  <literal>/home/jbalunas/workspace/websphere_example</literal>
                  ). The target of the build will be
                  <literal>dist/websphere_example.ear</literal> . </para>
            </listitem>
            
            <listitem>
               <para>To deploy the application follow the instructions here : 
                  <xref linkend="jee5-websphere-deploy"/> but use references to
                  this project <literal>websphere_example</literal> instead of
                  <literal>jboss-seam-jee5</literal>.</para>
            </listitem>
            <listitem>
               <para> Checkout the app at:
               <literal>http://localhost:9080/websphere_example/index.html</literal>
               </para>
            </listitem>
         </itemizedlist>
         
      </section>
   </section>
   
</chapter>
    <chapter id="dependencies">
  <title>Dependencies</title>
  
  <section>
    <title>Project Dependencies</title>

    <para>
      This section both lists the compile-time and runtime dependencies for Seam.
      Where the type is listed as <literal>ear</literal>, the library should be
      included in the /lib directory of your application's ear file. Where the
      type is listed as <literal>war</literal>, the library should be placed in 
      the <literal>/WEB-INF/lib</literal> directory of your application's war
      file.  The scope of the dependency is either all, runtime or provided (by
      JBoss AS 4.2).
    </para>
    
    <para>
      Up to date version information and complete dependency information is not 
      included in the docs, but is provided in the 
      <literal>/dependency-report.txt</literal> which is generated from the 
      Maven POMs stored in <literal>/build</literal>. You can generate this file
      by running <literal>ant dependencyReport</literal>.
    </para>
    
    <section>
      <title>Core</title>
  
      <para>
      <table><title/>
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>            
  
            <row>
              <entry>
                <para><literal>commons-codec.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>Required by Seam Security when using Digest authentication.</para>
              </entry>
            </row>  
    
            <row>
              <entry>
                <para><literal>jboss-seam.jar</literal></para>
              </entry>
              <entry align="center">
                <para>all</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>The core Seam library, always required.</para>
              </entry>
            </row>
  
            <row>
              <entry>
                <para><literal>jboss-seam-debug.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Include during development when enabling Seam's debug feature</para>
              </entry>
            </row>         
            
            <row>
              <entry>
                <para><literal>jboss-seam-ioc.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Required when using Seam with Spring</para>
              </entry>
            </row>   
  
            <row>
              <entry>
                <para><literal>jboss-seam-pdf.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Required when using Seam's PDF features</para>
              </entry>
            </row>                  
            
            <row>
              <entry>
                <para><literal>jboss-seam-remoting.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Required when using Seam Remoting</para>
              </entry>
            </row>                         
            
            <row>
              <entry>
                <para><literal>jboss-seam-ui.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Required to use the Seam JSF controls</para>
              </entry>
            </row>        
            
            <row>
              <entry>
                <para><literal>jsf-api.jar</literal></para>
              </entry>
              <entry align="center">
                <para>provided</para>
              </entry>
              <entry align="center">
                <para/>
              </entry>
              <entry>
                <para>JSF API</para>
              </entry>
            </row>         
            
            <row>
              <entry>
                <para><literal>jsf-impl.jar</literal></para>
              </entry>
              <entry align="center">
                <para>provided</para>
              </entry>
              <entry align="center">
                <para/>
              </entry>
              <entry>
                <para>JSF Reference Implementation</para>
              </entry>
            </row>   
            
            <row>
              <entry>
                <para><literal>jsf-facelets.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Facelets</para>
              </entry>
            </row>    
            
            <row>
              <entry>
                <para><literal>urlrewrite.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>URL Rewrite library</para>
              </entry>
            </row>      
            
            <row>
              <entry>
                <para><literal>jcaptcha-all.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>Required for Captcha support</para>
              </entry>
            </row>          
            
            <row>
              <entry>
                <para><literal>quartz.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>Required when you wish to use Quartz with Seam's asynchronous features</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
</para>

    </section>
    
    <section>
      <title>RichFaces</title>
  
      <table>
        <title>RichFaces dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>
          
            <row>
              <entry>
                <para><literal>richfaces-api.jar</literal></para>
              </entry>
              <entry align="center">
                <para>all</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>
                  Required to use RichFaces.  Provides API classes that you may
                  wish to use from your application e.g. to create a tree
                </para>
              </entry>
            </row>  
            
            <row>
              <entry>
                <para><literal>richfaces-impl.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Required to use RichFaces.</para>
              </entry>
            </row>
            
            <row>
              <entry>
                <para><literal>richfaces-ui.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Required to use RichFaces.  Provides all the UI components.</para>
              </entry>
            </row>                        
            
          </tbody>
        </tgroup>
      </table>
    </section> 
    
    <section>
      <title>Seam Mail</title>    
  
      <table>
        <title>Seam Mail Dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>            
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>
    
            <row>
              <entry>
                <para><literal>activation.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>Required for attachment support</para>
              </entry>
            </row>
            
            <row>
              <entry>
                <para><literal>mail.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>Required for outgoing mail support</para>
              </entry>
            </row>    
            
            <row>
              <entry>
                <para><literal>mail-ra.jar</literal></para>
              </entry>
              <entry align="center">
                <para>compile only</para>
              </entry>
              <entry align="center">
                <para/>
              </entry>
              <entry>
                <para>Required for incoming mail support</para>
                <para>mail-ra.rar should be deployed to the application server
                at runtime</para>
              </entry>
            </row>                  
            
            <row>
              <entry>
                <para><literal>jboss-seam-mail.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Seam Mail</para>
              </entry>
            </row>            
            
          </tbody>
        </tgroup>
      </table>
    </section>
    
    <section>
      <title>Seam PDF</title>    
  
      <table>
        <title>Seam PDF Dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>            
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>
    
            <row>
              <entry>
                <para><literal>itext.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>PDF Library</para>
              </entry>
            </row>
            
            <row>
              <entry>
                <para><literal>jfreechart.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Charting library</para>
              </entry>
            </row>         
            
            <row>
              <entry>
                <para><literal>jcommon.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Required by JFreeChart</para>
              </entry>
            </row>            
            
            <row>
              <entry>
                <para><literal>jboss-seam-pdf.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>Seam PDF core library</para>
              </entry>
            </row>                
            
          </tbody>
        </tgroup>
      </table>
    </section>  
    
    <section>
      <title>JBoss Rules</title>
      
      <para>
        The JBoss Rules libraries can be found in the <literal>drools/lib</literal> directory in Seam.
      </para>
      
      <table>
        <title>JBoss Rules Dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>            
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>
    
            <row>
              <entry>
                <para><literal>antlr-runtime.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>ANTLR Runtime Library</para>
              </entry>
            </row>
            
            <row>
              <entry>
                <para><literal>core.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>Eclipse JDT</para>
              </entry>
            </row>          
            
            <row>
              <entry>
                <para><literal>drools-compiler.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para/>
              </entry>
            </row>          
            
            <row>
              <entry>
                <para><literal>drools-core.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para/>
              </entry>
            </row>
            
            <row>
              <entry>
                <para><literal>janino.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para/>
              </entry>
            </row>
            
            <row>
              <entry>
                <para><literal>mvel.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para/>
              </entry>
            </row>
    
          </tbody>
        </tgroup>
      </table>
      
    </section>    
    
    <section>
      <title>JBPM</title>
      
      <table>
        <title>JBPM dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>    
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>
    
            <row>
              <entry>
                <para><literal>jbpm-jpdl.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para/>
              </entry>
            </row>
    
          </tbody>
        </tgroup>
      </table>
      
    </section>
    
    <section>
      <title>GWT</title>
      
      <para>
        These libraries are required if you with to use the Google Web Toolkit (GWT) with your Seam application.
      </para>
      
      <table>
        <title>GWT dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>    
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>    
            <row>
              <entry>
                <para><literal>gwt-servlet.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>war</para>
              </entry>
              <entry>
                <para>The GWT Servlet libs</para>
              </entry>
            </row>
    
          </tbody>
        </tgroup>
      </table>
      
    </section>        
    
    <section>
      <title>Spring</title>
      
      <para>
        These libraries are required if you with to use the Spring Framework with your Seam application.
      </para>
      
      <table>
        <title>Spring Framework dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>    
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>    
            <row>
              <entry>
                <para><literal>spring.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>The Spring Framework library</para>
              </entry>
            </row>
    
          </tbody>
        </tgroup>
      </table>
      
    </section>     
    
    <section>
      <title>Groovy</title>
      
      <para>
        These libraries are required if you with to use Groovy with your Seam application.
      </para>
      
      <table>
        <title>Groovy dependencies</title>
     
        <tgroup cols="4">
          <colspec colnum="1" colwidth="4*"/>
          <colspec colnum="2" colwidth="2*"/>
          <colspec colnum="3" colwidth="3*"/>
          <colspec colnum="4" colwidth="5*"/>
    
          <thead>
            <row>
              <entry align="center">
                <para>Name</para>
              </entry>
              <entry align="center">
                <para>Scope</para>
              </entry>
              <entry align="center">
                <para>Type</para>
              </entry>    
              <entry align="center">
                <para>Notes</para>
              </entry>
            </row>
          </thead>
    
          <tbody>    
            <row>
              <entry>
                <para><literal>groovy-all.jar</literal></para>
              </entry>
              <entry align="center">
                <para>runtime</para>
              </entry>
              <entry align="center">
                <para>ear</para>
              </entry>
              <entry>
                <para>The Groovy libs</para>
              </entry>
            </row>
    
          </tbody>
        </tgroup>
      </table>
      
    </section>
  </section>  
    
  <section>
    <title>Dependency Management using Maven</title>

  
  <para>
    Maven offers support for transitive dependency management and can be used
    to manage the dependencies of your Seam project.  You can use Maven Ant
    Tasks to integrate Maven into your Ant build, or can use Maven to build and
    deploy your project.
  </para>
  
  <para>
    We aren't actually going to discuss how to use Maven here, but just run
    over some basic POMs you could use.
  </para> 

   <para>
     Released versions of Seam are available in http://repository.jboss.org/maven2
     and nightly snapshots are available in http://snapshots.jboss.org/maven2.
   </para>

   <para>
     All the Seam artifacts are available in Maven:
   </para>

    <programlisting><![CDATA[<dependency>
  <groupId>org.jboss.seam</groupId>
  <artifactId>jboss-seam</artifactId>
</dependency>]]></programlisting>

<programlisting><![CDATA[<dependency>
  <groupId>org.jboss.seam</groupId>
  <artifactId>jboss-seam-ui</artifactId>
</dependency>]]></programlisting>

<programlisting><![CDATA[<dependency>
  <groupId>org.jboss.seam</groupId>
  <artifactId>jboss-seam-pdf</artifactId>
</dependency>]]></programlisting>

<programlisting><![CDATA[<dependency>
  <groupId>org.jboss.seam</groupId>
  <artifactId>jboss-seam-remoting</artifactId>
</dependency>]]></programlisting>

<programlisting><![CDATA[<dependency>
  <groupId>org.jboss.seam</groupId>
  <artifactId>jboss-seam-ioc</artifactId>
</dependency>]]></programlisting>

<programlisting><![CDATA[<dependency>
  <groupId>org.jboss.seam</groupId>
  <artifactId>jboss-seam-ioc</artifactId>
</dependency>]]></programlisting>

  <para>
    This sample POM will give you Seam, JPA (provided by Hibernate) and 
    Hibernate Validator:
  </para> 

<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.jboss.seam.example/groupId>
  <artifactId>my-project</artifactId>
  <version>1.0</version>
  <name>My Seam Project</name>
  <packaging>jar</packaging>
  <repositories>
    <repository>
      <id>repository.jboss.org</id>
      <name>JBoss Repository</name>
      <url>http://repository.jboss.org/maven2</url>
    </repository>
  </repositories>

  <dependencies>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>3.0.0.GA</version>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-annotations</artifactId>
      <version>3.3.0.ga</version>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <version>3.3.1.ga</version>
    </dependency>

    <dependency>
      <groupId>org.jboss.seam</groupId>
      <artifactId>jboss-seam</artifactId>
      <version>2.0.0.GA</version>
    </dependency>
    
  </dependencies>

</project>]]></programlisting>

</section>

</chapter>

</book>
