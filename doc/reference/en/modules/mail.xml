<chapter id="mail">
    <title>Email</title>
    	<para>Seam now includes an optional components for templating and sending emails.</para>

        <para>Email support is provided by <literal>jboss-seam-mail.jar</literal>. This JAR contains the mail JSF controls, which are used
            to construct emails, and the <literal>mailSession</literal> manager component. 
       	</para>

        <para> The examples/mail project contains an example of the email support in action. It demonstrates proper
            packaging, and it contains a number of example that demonstrate the key features currently supported. </para>
    
    <section>
    	<title>Creating a message</title>
    	<para>In Seam Mail, an email is just facelet:</para>
    	<programlisting>&lt;m:message xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
    xmlns:m=&quot;http://jboss.com/products/seam/mail&quot;
    xmlns:h=&quot;http://java.sun.com/jsf/html&quot;&gt;
  
    &lt;m:from name=&quot;Peter&quot; address=&quot;peter@example.com&quot; /&gt;
    &lt;m:to name=&quot;#{person.firstname} #{person.lastname}&quot;&gt;#{person.address}&lt;/m:to&gt;
    &lt;m:subject&gt;Try out Seam!&lt;/m:subject&gt;
    
    &lt;m:body&gt;
        &lt;p&gt;&lt;h:outputText value=&quot;Dear #{person.firstname}&quot; /&gt;,&lt;/p&gt;
        &lt;p&gt;You can try out Seam by visiting 
        &lt;a href=&quot;http://labs.jboss.com/jbossseam&quot;&gt;http://labs.jboss.com/jbossseam&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;Regards,&lt;/p&gt;
        &lt;p&gt;Peter&lt;/p&gt;
    &lt;/m:body&gt;
    
&lt;/m:message&gt;</programlisting>
    	
    	<para>The <literal>&lt;m:message&gt;</literal> tag wraps the whole message, and tells Seam to start rendering an email.  Inside the 
    	<literal>&lt;m:message&gt;</literal> tag we use an <literal>&lt;m:from&gt;</literal> tag to set who the message is from, a <literal>&lt;m:to&gt;</literal> tag to
    	specify a sender (notice how we use EL as we would in a normal facelet), and a <literal>&lt;m:subject&gt;</literal> tag.</para>
    	
    	<para>The <literal>&lt;m:body&gt;</literal> tag wraps the body of the email.  You can use regular HTML tags inside the body as well as
    	JSF components.</para>
    	
    	<para>So, now you have your email template, how do you go about sending it?  Well, at the end of rendering the 
    	<literal>m:message</literal> the <literal>mailSession</literal> is called to send the email, so all you have to do is
    	ask Seam to render the view:</para>
    	
    	<programlisting>@In(create=true)
private Renderer renderer;
   
public void send() {
    try {
       renderer.render(&quot;/simple.xhtml&quot;);
       facesMessages.add(&quot;Email sent successfully&quot;);
   } catch (Exception e) {
       facesMessages.add(&quot;Email sending failed: &quot; + e.getMessage());
   }
}</programlisting>
    	
   	<para>If, for example, you entered an invalid email address, then an exception would be thrown, which is caught
   	and then displayed to the user.</para>
   	
   	<section>
   		<title>Attachments</title>
   		<para>Seam makes it easy to attach files to an email.  It supports most of the standard java types used when working with files.</para>
   		
   		<para>If you wanted to email the <literal>jboss-seam-mail.jar</literal>:</para>
   		
   		<programlisting>&lt;m:attachment value=&quot;/WEB-INF/lib/jboss-seam-mail.jar&quot; /&gt;</programlisting>
   		    	
   		<para>Seam will load the file from the classpath, and attach it to the email.  By default it would be attached as <literal>jboss-seam-mail.jar</literal>;
   		if you wanted it to have another name you would just add the <literal>fileName</literal> attribute:</para>
   		
   		<programlisting>&lt;m:attachment value=&quot;/WEB-INF/lib/jboss-seam-mail.jar&quot; fileName=&quot;this-is-so-cool.jar&quot; /&gt;</programlisting>
   		
   		<para>You could also attach a <literal>java.io.File</literal>, a <literal>java.net.URL</literal>:</para>
   		
   		<programlisting>&lt;m:attachment value=&quot;#{numbers}&quot; /&gt;</programlisting>
   		
   		<para> a <literal>byte[]</literal> or a <literal>java.io.InputStream</literal>:</para>
   		
   		<programlisting>&lt;m:attachment value=&quot;#{person.photo}&quot; contentType=&quot;image/png&quot; /&gt;</programlisting>
   		
   		<para>You'll notice that for a <literal>byte[]</literal> and a <literal>java.io.InputStream</literal> you need to specify the MIME type
   		of the attachment (as that information is not carried as part of the file).</para>
   		
   		<para>And it gets even better, you can attach a Seam generated PDF, or any standard JSF view, just by wrapping a 
   		<literal>&lt;m:attachment&gt;</literal> around the normal tags you would use:</para>
   		
   		<programlisting>&lt;m:attachment fileName=&quot;tiny.pdf&quot;&gt;
    &lt;p:document&gt;                                                      
        A very tiny PDF                                                                                                
    &lt;/p:document&gt;
&lt;/m:attachment&gt;</programlisting>

		<para>If you had a set of files you wanted to attach (for example a set of pictures loaded from a database) you can just
		use a  <literal>&lt;ui:repeat&gt;</literal>:</para>
		
		<programlisting>&lt;ui:repeat value=&quot;#{people}&quot; var=&quot;person&quot;&gt;
    &lt;m:attachment value=&quot;#{person.photo}&quot; contentType=&quot;image/jpeg&quot; fileName=&quot;#{person.firstname}_#{person.lastname}.jpg&quot;/&gt;
&lt;/ui:repeat&gt;</programlisting>
   		
   	</section>
    
	    <section>
	    	<title>HTML/Text alternative part</title>
	    	<para>Whilst most mail readers nowadays support HTML, some don't, so you can add a plain text alternative
	    	 to your email body:</para>
	    	<programlisting>&lt;m:body&gt;
    &lt;f:facet name=&quot;alternative&quot;&gt;Sorry, your email reader can't show our fancy email, 
please go to http://labs.jboss.com/jbossseam to explore Seam.&lt;/f:facet&gt;
&lt;/m:body&gt;</programlisting>
	    </section>
	    
	    <section>
	    	<title>Multiple recipients</title>
	    	<para>Often you'll want to send an email to a group of recipients (for example your users).  All of the recipient
	    	 mail tags can be placed inside a <literal>&lt;ui:repeat&gt;</literal>:</para>
	    	<programlisting>&lt;ui:repeat value=&quot;#{allUsers} var=&quot;user&quot;&gt;
    &lt;m:to name=&quot;#{user.firstname} #{user.lastname}&quot; address=&quot;#{user.emailAddress}&quot; /&gt;
&lt;/ui:repeat&gt;</programlisting>
	    </section>
	    
	    <section>
	    	<title>Multiple messages</title>
	    	<para>Sometimes however you need to send a slightly different message to each recipient (e.g. a password
	    	reset).  The best way to do this is to place the whole message inside a <literal>&lt;ui:repeat&gt;</literal>:</para>
	    	<programlisting>&lt;ui:repeat value=&quot;#{people}&quot; var=&quot;p&quot;&gt;
    &lt;m:message&gt;
        &lt;m:from name=&quot;#{person.firstname} #{person.lastname}&quot;&gt;#{person.address}&lt;/m:from&gt;
        &lt;m:to name=&quot;#{p.firstname}&quot;&gt;#{p.address}&lt;/m:to&gt;
            ...
    &lt;/m:message&gt;
&lt;/ui:repeat&gt;
			</programlisting>
	    </section>
	    
	    <section>
	    	<title>Templating</title>
	    	<para>The mail templating example shows that facelets templating 'just works' with the Seam mail tags.</para>
	    	<para>Our <literal>template.xhtml</literal> contains:</para>
	    	<programlisting>&lt;m:message&gt;
   &lt;m:from name=&quot;Seam&quot; address=&quot;do-not-reply@jboss.com&quot; /&gt;
   &lt;m:to name=&quot;#{person.firstname} #{person.lastname}&quot;&gt;#{person.address}&lt;/m:to&gt;
   &lt;m:subject&gt;#{subject}&lt;/m:subject&gt;
   &lt;m:body&gt;
       &lt;html&gt;
           &lt;body&gt;
               &lt;ui:insert name=&quot;body&quot;&gt; This is the default body, specified by the template.&lt;/ui:insert&gt;
           &lt;/body&gt;
       &lt;/html&gt;
   &lt;/m:body&gt;
&lt;/m:message&gt;</programlisting>
	    	<para>Our <literal>templating.xhtml</literal> contains:</para>
	    	<programlisting>&lt;ui:param name=&quot;subject&quot; value=&quot;Templating with Seam Mail&quot; /&gt;
&lt;ui:define name=&quot;body&quot;&gt;
    &lt;p&gt;This email demonstrates that you can easily use &lt;i&gt;facelets templating features&lt;/i&gt; in your code!&lt;/p&gt;
&lt;/ui:define&gt;</programlisting>
	    </section>
	    
	    <section>
	    	<title>Other Headers</title>
	    	<para>Sometimes you'll want to add other headers to your email.  Seam provides support for some (see <xref linkend="mail.tags" />).
	    	For example, we can set the importance of the email, and ask for a read receipt:</para>
	    	<programlisting>&lt;m:message xmlns:m=&quot;http://jboss.com/products/seam/mail&quot;
   importance=&quot;low&quot;
   requestReadReceipt=&quot;true&quot;&gt;</programlisting>
	    	<para>Otherise you can add any header to the message using the <literal>&lt;m:header&gt;</literal> tag:</para>
	    	<programlisting>&lt;m:header name=&quot;X-Sent-From&quot; value=&quot;JBoss Seam&quot; /&gt;</programlisting>
	    </section>

	</section>
<!-- <section>
		<title>Receiving emails</title>
		<para>If you are using EJB then you can use a MDB (Message Driven Bean) to receive email.  JBoss AS comes with <literal>mail-ra.rar</literal> :</para>
		<programlisting>@MessageDriven(activationConfig={
         @ActivationConfigProperty(propertyName="mailServer", propertyValue="localhost"),
         @ActivationConfigProperty(propertyName="mailFolder", propertyValue="INBOX"),
         @ActivationConfigProperty(propertyName="storeProtocol", propertyValue="pop3"),
         @ActivationConfigProperty(propertyName="userName", propertyValue="seam"),
         @ActivationConfigProperty(propertyName="password", propertyValue="seam")
})
@ResourceAdapter("mail-ra.rar")
@Name("mailListener")
public class MailListenerMDB implements MailListener {

   @In(create=true)
   private OrderProcessor orderProcessor;

   public void onMessage(Message message) {
      // Process the message
      orderProcessor.process(message.getSubject());
   }
   
}</programlisting>

		<para>Each message received will cause <literal>onMessage(Message message)</literal> to be called.  Most seam
		annotations will work inside a MDB but you musn't access the persistence context.</para>

		<para>You can find more information on <literal>mail-ra.rar</literal> at 
		<ulink url="hhttp://wiki.jboss.org/wiki/Wiki.jsp?page=InboundJavaMail">http://wiki.jboss.org/wiki/Wiki.jsp?page=InboundJavaMail</ulink>.</para>
	
		<para>If you aren't using JBoss AS you can still use <literal>mail-ra.rar</literal> (included with Seam in the mail directory),
		or you may find your application server includes a similar adapter.</para>
	
	</section>-->

	<section>
		<title>Configuration</title>
		<para>To include Email support in your application, include <literal>jboss-seam-mail.jar</literal> in your
            WEB-INF/lib directory. If you are using JBoss AS there is no further configuration needed to use Seam's
            email support.  Otherwise you need to make sure you have the JavaMail API, an implementation of the JavaMail API present 
            (the API and impl used in JBoss AS are distributed with seam as <literal>lib/mail.jar</literal>), and a copy 
            of the Java Activation Framework (distributed with seam as <literal>lib/activation.jar</literal>.</para>
        <para>The Seam Email module requires the use of Facelets as the view technology. Future versions of the library
            may also support the use of JSP. Additionally, it requires the use of the seam-ui package.</para>
		<para>The <literal>mailSession</literal> component uses JavaMail to talk to a 'real' SMTP server.</para>
		
        <section>
	        <title><literal>mailSession</literal></title>
	        
	        <para>A JavaMail Session may be available via a JNDI lookup if you are working in an JEE environment or you can use a Seam configured Session.</para>
	        
	        <para>The mailSession component's properties are described in more detail in <xref linkend="components.mail"/>.</para>
	        
	        <section>
		        <title>JNDI lookup in JBoss AS</title>
		        <para>The JBossAS <literal>deploy/mail-service.xml</literal> configures a JavaMail session binding into JNDI.  The default service configuration will
		        need altering for your network.  <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=JavaMail">http://wiki.jboss.org/wiki/Wiki.jsp?page=JavaMail</ulink>
		        describes the service in more detail.</para>
		         <programlisting><![CDATA[<components xmlns=&quot;http://jboss.com/products/seam/components&quot; 
        xmlns:core=&quot;http://jboss.com/products/seam/core&quot;
        xmlns:mail=&quot;http://jboss.com/products/seam/mail&quot;>
    <mail:mail-session session-jndi-name=&quot;java:/Mail&quot; />
</components>]]></programlisting>
		        <para>Here we tell Seam to get the mail session bound to <literal>java:/Mail</literal> from JNDI.</para>
	        </section>
	        
	       	<section>
	        	<title>Seam configured Session</title>
	      		<para>A mail session can be configured via <literal>components.xml</literal>.  Here we tell Seam to use <literal>smtp.example.com</literal>
	      	 	as the smtp server, </para>
	            <programlisting><![CDATA[<components xmlns=&quot;http://jboss.com/products/seam/components&quot; 
        xmlns:core=&quot;http://jboss.com/products/seam/core&quot;
        xmlns:mail=&quot;http://jboss.com/products/seam/mail&quot;>
    <mail:mail-session host=&quot;smtp.example.com&quot; />
</components>]]></programlisting>
		    </section>
		</section>
	</section>

    <section id="mail.tags">
        <title>Tags</title>

        <para>Emails are generated using tags in the
                <literal>http://jboss.com/products/seam/mail</literal> namespace. Documents should always have the
                <literal>message</literal> tag at the root of the message. The message tag prepares Seam to generate
            an email. </para>
            
            <para>The standard templating tags of facelets can be used as normal.  Inside the body you can use any JSF tag which doesn't require access to external resources (stylesheets, javascript).</para>
            
        <variablelist>
        	<varlistentry>
        		<term>&lt;m:message&gt;</term>
        		 <listitem>
	               <para>
	                   Root tag of a mail message
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>importance</literal> &mdash; low, normal or high.  By default normal, this sets the importance of the mail message.
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>precedence</literal> &mdash; sets the precedence of the message (e.g. bulk).
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>requestReadReceipt</literal> &mdash; by default false, if set, a read receipt will be request will be added, with the 
	                       read receipt being sent to the <literal>From:</literal> address.
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>urlBase</literal> &mdash; If set, the value is prepended to the <literal>requestContextPath</literal> allowing
	                       you to use components such as <literal>&lt;h:graphicImage&gt;</literal> in your emails.
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:from&gt;</term>
        		 <listitem>
	               <para>
	                  Set's the From: address for the email.  You can only have one of these per email.
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>name</literal> &mdash; the name the email should come from.
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>address</literal> &mdash; the email address the email should come from.
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:replyTo&gt;</term>
        		 <listitem>
	               <para>
	                  Set's the Reply-to: address for the email.  You can only have one of these per email.
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>address</literal> &mdash; the email address the email should come from.
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:to&gt;</term>
        		 <listitem>
	               <para>
	                  Add a recipient to the email. Use multiple &lt;m:to&gt; tags for multiple recipients.  This tag can be safely placed inside a repeat tag such as &lt;ui:repeat&gt;.
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>name</literal> &mdash; the name of the recipient.
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>address</literal> &mdash; the email address of the recipient.
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:cc&gt;</term>
        		 <listitem>
	               <para>
	                  Add a cc recipient to the email. Use multiple &lt;m:cc&gt; tags for multiple ccs.  This tag can be safely placed inside a repeat tag such as &lt;ui:repeat&gt;.
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>name</literal> &mdash; the name of the recipient.
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>address</literal> &mdash;  the email address of the recipient.
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:bcc&gt;</term>
        		 <listitem>
	               <para>
	                  Add a bcc recipient to the email. Use multiple &lt;m:bcc&gt; tags for multiple bccs.  This tag can be safely placed inside a repeat tag such as &lt;ui:repeat&gt;.
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>name</literal> &mdash; the name of the recipient.
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>address</literal> &mdash; the email address of the recipient.
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:header&gt;</term>
        		 <listitem>
	               <para>
	                  Add a header to the email (e.g. <literal>X-Sent-From: JBoss Seam</literal>
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>name</literal> &mdash; The name of the header to add (e.g. <literal>X-Sent-From</literal>).
	                   </para>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>value</literal> &mdash; The value of the header to add (e.g. <literal>JBoss Seam</literal>).
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	        	<varlistentry>
        		<term>&lt;m:attachment&gt;</term>
        		 <listitem>
	               <para>
	                  Add an attachment to the email.
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>value</literal> &mdash; The file to attach:
	                   </para>
               			  <itemizedlist>
		               		<listitem>
    		           			<para>
    		           				<literal>String</literal> &mdash; A <literal>String</literal> is interpreted as a path to file within the classpath
    		           			</para>
    		           		</listitem>
    		           		<listitem>
    		           			<para>
    		           				<literal>java.io.File</literal> &mdash; An EL expression can reference a <literal>File</literal> object
    		           			</para>
    		           		</listitem>
    		           		<listitem>
    		           			<para>
    		           				<literal>java.net.URL</literal> &mdash; An EL expression can reference a <literal>URL</literal> object
    		           			</para>
    		           		</listitem>
    		           		<listitem>
    		           			<para>
    		           				<literal>java.io.InputStream</literal> &mdash; An EL expression can reference an <literal>InputStream</literal>.
    		           				In this case both a <literal>fileName</literal> and a <literal>contentType</literal> must be specified.
    		           			</para>
    		           		</listitem>
    		           		<listitem>
    		           			<para>
    		           				<literal>byte[]</literal> &mdash; An EL expression can reference an <literal>byte[]</literal>.
    		           				In this case both a <literal>fileName</literal> and a <literal>contentType</literal> must be specified.
    		           			</para>
    		           		</listitem>
    		           	</itemizedlist>
	    		         <para>If the value attribute is ommitted:</para>
	    		         <itemizedlist>
	    		         <listitem>
	               			<para>
	               				If this tag contains a <literal>&lt;p:document&gt;</literal> tag, the document described will be
	                  generated and attached to the email.  A <literal>fileName</literal> should be specfied.
	                  		</para>
	                  	</listitem>
	                  	<listitem>
	               			<para>
	               				If this tag contains other JSF tags a HTML document will be generated from them
	               				and attached to the email. A <literal>fileName</literal> should be specfied.
	                  		</para>
	                  	</listitem>
	               </itemizedlist>
	                   </listitem>
	                   <listitem>
	                   <para>
	                       <literal>fileName</literal> &mdash; Specify the file name to use for the attached file.
	                   </para>
	                   </listitem>
	                    <listitem>
	                   <para>
	                       <literal>contentType</literal> &mdash; Specify the MIME type of the attached file
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:subject&gt;</term>
        		 <listitem>
	               <para>
	                  Set's the subject for the email.
	               </para>
	           </listitem>
        	</varlistentry>
        	<varlistentry>
        		<term>&lt;m:body&gt;</term>
        		 <listitem>
	               <para>
	                  Set's the body for the email.  Supports an <literal>alternative</literal> facet which, if an HTML email is generated can contain alternative text for a mail reader which doesn't support html.
	               </para>
	              <itemizedlist>
	                   <listitem>
	                   <para>
	                       <literal>type</literal> &mdash; If set to <literal>plain</literal> then a plain text email will be generated otherwise an HTML email is generated.  
	                   </para>
	                   </listitem>
	                   </itemizedlist>
	           </listitem>
        	</varlistentry>
        </variablelist>

       
    </section>
</chapter>
