<chapter id="jms">
    <title>Messaging in Seam</title>
    <para>
        Seam makes it easy to send and receive JMS messages to and from
        Seam components.
    </para>
    
    <section>
        <title>Configuration</title>
        <para>
            To configure Seam's infrastructure for sending JMS messages,
            you need to tell Seam about any topics and queues you want to
            send messages to, and also tell Seam where to find the
            <literal>QueueConnectionFactory</literal> and/or
            <literal>TopicConnectionFactory</literal>.
        </para>
        
        <para>
            Seam defaults to using <literal>UIL2ConnectionFactory</literal>
            which is the usual connection factory for use with JBossMQ. If
            you are using some other JMS provider, you need to set one or
            both of <literal>queueConnection.queueConnectionFactoryJndiName</literal>
            and <literal>topicConnection.topicConnectionFactoryJndiName</literal>
            in <literal>seam.properties</literal> or <literal>web.xml</literal>.
        </para>
        
        <para>
            You need to list topics and queues under
            <literal>org.jboss.seam.core.init.managedTopicPublishers</literal>
            and 
            <literal>org.jboss.seam.core.init.managedQueueSenders</literal>.
            For example, the following entries in <literal>seam.properties</literal>
            installs a Seam managed <literal>TopicPublisher</literal>:
        </para>
        
        <programlisting><![CDATA[org.jboss.seam.core.init.managedTopicPublishers stockTickerPublisher
stockTickerPublisher.topicJndiName topic/stockTickerTopic]]></programlisting>

        <para>
            As usual, we could also use <literal>web.xml</literal>:
        </para>
        
        <programlisting><![CDATA[<context-param>
    <param-name>org.jboss.seam.core.init.managedQueueSender</param-name>
    <param-value>paymentQueueSender</param-value>
</context-param>

<context-param>
    <param-name>paymentQueueSender.queueJndiName</param-name>
    <param-value>queue/payments</param-value>
</context-param>]]></programlisting>

    </section>

    <section>
        <title>Sending messages</title>
        <para>
            Now, you can inject a JMS <literal>TopicPublisher</literal> and
            <literal>TopicSession</literal> into any component:
        </para>
        
        <programlisting><![CDATA[@In(create=true)
private transient TopicPublisher stockTickerPublisher;   
@In(create=true)
private transient TopicSession topicSession;

public void publish(StockPrice price) {
      try
      {
         topicPublisher.publish( topicSession.createObjectMessage(price) );
      } 
      catch (Exception ex)
      {
         throw new RuntimeException(ex);
      } 
}]]></programlisting>

        <para>Or, for working with a queue:</para>

        <programlisting><![CDATA[@In(create=true)
private transient QueueSender paymentQueueSender;   
@In(create=true)
private transient QueueSession queueSession;

public void publish(Payment payment) {
      try
      {
         paymentQueueSender.publish( queueSession.createObjectMessage(payment) );
      } 
      catch (Exception ex)
      {
         throw new RuntimeException(ex);
      } 
}]]></programlisting>

    </section>
    
    <section>
        <title>Receiving messages using a message-driven bean</title>
        <para>
            You can process messages using any EJB3 message driven bean. Message-driven
            beans may even be Seam components, in which case it is possible to inject
            other event and application scoped Seam components.
        </para>
    </section>
    
    <section>
        <title>Receiving messages in the client</title>
        <para>
            Seam Remoting lets you subscribe to a JMS topic from client-side JavaScript. This is
            described in the next chapter.
        </para>
    </section>
    
</chapter>
