<chapter id="annotations">
    <title>Seam annotations</title>
    
    <para>
        When you write a Seam application, you'll use a lot of annotations. Seam lets you use
        annotations to achieve a declarative style of programming. Most of the annotations you'll
        use are defined by the EJB 3.0 specification. The annotations for data validation are
        defined by the Hibernate Validator package. Finally, Seam defines its own set of
        annotations, which we'll describe in this chapter.
    </para>
    
    <para>
        All of these annotations are defined in the package 
        <literal>org.jboss.seam.annotations</literal>.
    </para>
    
    <section>
    	<title>Annotations for component definition</title>
    	<para>
    	    The first group of annotations lets you define a Seam component. These
    	    annotations appear on the component class.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry id="name-annotation">
                <term><literal>@Name</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Name("componentName")]]></programlisting>
                    <para>
                        Defines the Seam component name for a class. This annotation is 
                        required for all Seam components.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry  id="scope-annotation">
                <term><literal>@Scope</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Scope(ScopeType.CONVERSATION)]]></programlisting>
                    <para>
                        Defines the default context of the component. The possible values
                        are defined by the <literal>ScopeType</literal> enumeration:
                        <literal>EVENT, PAGE, CONVERSATION, SESSION, PROCESS, APPLICATION,
                        STATELESS</literal>.
                    </para>
                    <para>
                        When no scope is explicitly specified, the default depends upon
                        the component type. For stateless session beans, the default
                        is <literal>STATELESS</literal>. For entity beans and stateful
                        session beans, the default is <literal>CONVERSATION</literal>.
                        For java beans, the default is <literal>EVENT</literal>.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@Intercept</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Intercept(InterceptionType.ALWAYS)]]></programlisting>
                    <para>
                        Determines when Seam interceptors are active. The possible values
                        are defined by the <literal>InterceptionType</literal> enumeration:
                        <literal>ALWAYS, INVOKE_APPLICATION, NEVER</literal>.
                    </para>
                    <para>
                        When no interception type is explicitly specified, the default depends 
                        upon the component type. For entity beans, the default is 
                        <literal>NEVER</literal>. For session beans and JavaBeans, the default 
                        is <literal>INVOKE_APPLICATION</literal> (interception only enabled 
                        during the JSF invoke application phase).
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@JndiName</literal></term>
                <listitem>
                    <programlisting><![CDATA[@JndiName("my/jndi/name")]]></programlisting>
                    <para>
                        Defines the JNDI name of an EJB component. If no JNDI name is explicitly
                        specified, the fully qualified class name of the local interface is
                        used.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry id="conversational-annotation">
                <term><literal>@Conversational</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Conversational(ifNotBegunOutcome="error")]]></programlisting>
                    <para>
                        Specifies that a conversation scope component is conversational,
                        meaning that no method of the component can be called unless
                        a long-running conversation started by this component is active 
                        (unless the method would begin a new long-running conversation).
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>ifNotBegunOutcome</literal> &mdash; specifies a JSF
                            outcome for the action when the component is invoked and no
                            long-running conversation is active.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@Startup</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Startup(depends={"org.jboss.core.jndi", "org.jboss.core.jta"})]]></programlisting>
                    <para>
                        Specifies that an application scope component is started immediately
                        at initialization time. This is mainly used for certain built-in 
                        components that bootstrap critical infrastructure such as JNDI,
                        datasources, etc.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>depends</literal> &mdash; specifies that the named
                            components must be started first, if they are installed.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
        </variablelist>
    </section>

    <section>
    	<title>Annotations for bijection</title>
    	<para>
    	    The next two annotations control bijection. These attributes
    	    occur on component instance variables or property accessor
    	    methods.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry id="in-annotation">
                <term><literal>@In</literal></term>
                <listitem>
                    <programlisting><![CDATA[@In(value="contextVariableName", create=false, required=false)]]></programlisting>
                    <para>
                        Specifies that a component attribute is to be injected from a context 
                        variable at the beginning of each component invocation.
                    </para>
                    <programlisting><![CDATA[@In(value="#{customer.addresses['shipping']}")]]></programlisting>
                    <para>
                        Specifies that a component attribute is to be injected by evaluating 
                        a JSF EL expression at the beginning of each component invocation.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>value</literal> &mdash; specifies the name of the
                            context variable. Default to the name of the component
                            attribute. Alternatively, specifies a JSF EL expression,
                            surrounded by <literal>#{...}</literal>.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>create</literal> &mdash; specifies that Seam should
                            instantiate the component with the same name as the context
                            variable if the context variable is undefined (null) in all 
                            contexts. Default to false.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>required</literal> &mdash; specifies Seam should throw
                            an exception if the context variable is undefined in all contexts.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry id="out-annotation">
                <term><literal>@Out</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Out(value="contextVariableName", required=false)]]></programlisting>
                    <para>
                        Specifies that a component attribute is to be outjected to a context 
                        variable at the end of a component invocation.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>value</literal> &mdash; specifies the name of the
                            context variable. Default to the name of the component
                            attribute.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>required</literal> &mdash; specifies Seam should throw
                            an exception if the component attribute is null during outjection.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            Note that it is quite common for these annotations to occur together, for example:
        </para>
        
        <programlisting><![CDATA[@In(create=true) @Out private User currentUser;]]></programlisting>
        
        <para>
            The next annotation supports the <emphasis>manager component</emphasis> pattern,
            where a Seam component that manages the lifecycle of an instance of some
            other class that is to be injected. It appears on a component getter method.
        </para>
        
    	<variablelist spacing="compact">
            <varlistentry>
                <term><literal>@Unwrap</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Unwrap]]></programlisting>
                    <para>
                        Specifies that the object returned by the annotated getter method is 
                        the thing that is injected instead of the component instance itself.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
          
        <para>
            The next annotation supports the <emphasis>factory component</emphasis> pattern,
            where a Seam component is responsible for initializing the value of a context
            variable. This is especially useful for initializing any state needed for 
            rendering the response to a non-faces request. It appears on a component method.
        </para>
        
    	<variablelist spacing="compact">
            <varlistentry>
                <term><literal>@Factory</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Factory("processInstance")]]></programlisting>
                    <para>
                        Specifies that the method of the component is used to initialize the
                        value of the named context variable, when the context variable has
                        no value.
                    </para>
                </listitem>
            </varlistentry>   
        </variablelist>
        
        <para>
            The last annotation lets you inject a request parameter value:
        </para>
        
        <variablelist spacing="compact">
            <varlistentry id="out-annotation">
                <term><literal>@RequestParameter</literal></term>
                <listitem>
                    <programlisting><![CDATA[@RequestParameter("parameterName")]]></programlisting>
                    <para>
                        Specifies that a component attribute is to be injected with the value
                        of a request parameter.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>value</literal> &mdash; specifies the name of the
                            request parameter. Default to the name of the component
                            attribute.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
        
    </section> 
    
    <section>
    	<title>Annotations for component lifecycle methods</title>
    	<para>
    	    These annotations allow a component to react to its own lifecycle events.
    	    They occur on methods of the component. There may be only one of each
    	    per component class.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry id="create-annotation">
                <term><literal>@Create</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Create]]></programlisting>
                    <para>
                        Specifies that the method should be called when an instance
                        of the component is instantiated by Seam.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry id="destroy-annotation">
                <term><literal>@Destroy</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Destroy]]></programlisting>
                    <para>
                        Specifies that the method should be called when the context ends and
                        its context variables are destroyed.
                    </para>
                    <para>
                        Note that all stateful session bean components <emphasis>must</emphasis>
                        define a method annotated <literal>@Destroy @Remove</literal> in order
                        to guarantee destruction of the stateful bean when a context ends.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        
    </section> 

    <section>
    	<title>Annotations for context demarcation</title>
    	<para>
    	    These annotations provide declarative conversation demarcation. They appear
    	    on methods of Seam components, usually action listener methods.
    	</para>
    	
    	<para>
    	    Every web request has a conversation context associated with it. Most of these
    	    conversations end at the end of the request. If you want a conversation that
    	    span multiple requests, you must "promote" the current conversation to
    	    a <emphasis>long-running conversation</emphasis> by calling a method marked
    	    with <literal>@Begin</literal>.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry id="begin-annotation">
                <term><literal>@Begin</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Begin]]></programlisting>
                    <para>
                        Specifies that a long-running conversation begins when this
                        method returns a non-null outcome without exception.
                    </para>
                </listitem>
                <listitem>
                    <programlisting><![CDATA[@Begin(ifOutcome={"success", "continue"})]]></programlisting>
                    <para>
                        Specifies that a long-running conversation begins when this
                        action listener method returns with one of the given outcomes.
                    </para>
                </listitem>
                <listitem>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>ifOutcome</literal> &mdash; specifies the JSF outcome or 
                            outcomes that result in a new long-running conversation context.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry id="end-annotation">
                <term><literal>@End</literal></term>
                <listitem>
                    <programlisting><![CDATA[@End]]></programlisting>
                    <para>
                        Specifies that a long-running conversation ends when this
                        method returns a non-null outcome without exception.
                    </para>
                </listitem>
                <listitem>
                    <programlisting><![CDATA[@End(ifOutcome={"success", "error"}, evenIfException={SomeException.class, OtherException.class})]]></programlisting>
                    <para>
                        Specifies that a long-running conversation ends when this
                        action listener method returns with one of the given outcomes or
                        throws one of the specified classes of exception.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>ifOutcome</literal> &mdash; specifies the JSF outcome or 
                            outcomes that result in the end of the current long-running 
                            conversation.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry id="starttask-annotation">
                <term><literal>@StartTask</literal></term>
                <listitem>
                    <programlisting><![CDATA[@StartTask(taskIdParameter="taskId")]]></programlisting>
                    <para>
                        "Starts" a jBPM task. Specifies that a long-running 
                        conversation begins when this method returns a non-null outcome 
                        without exception. This conversation is associated with the jBPM 
                        task specified in the named request parameter. Within the context 
                        of this conversation, a business process context is also defined, 
                        for the business process instance of the task instance.
                    </para>
                    <para>
                        The jBPM <literal>TaskInstance</literal> will be available in a
                        request context variable named <literal>taskInstance</literal>.
                        The jPBM <literal>ProcessInstance</literal> will be available in
                        a request context variable named <literal>processInstance</literal>.
                        (Of course, these objects are available for injection via 
                        <literal>@In</literal>.)
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>taskIdParameter</literal> &mdash; the name of a request
                            parameter which holds the id of the task. Default to
                            <literal>"taskId"</literal>, which is also the default
                            used by the Seam <literal>taskList</literal> JSF component.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry id="begintask-annotation">
                <term><literal>@BeginTask</literal></term>
                <listitem>
                    <programlisting><![CDATA[@BeginTask(taskIdParameter="taskId")]]></programlisting>
                    <para>
                        Resumes work on an incomplete jBPM task. Specifies that a long-running 
                        conversation begins when this method returns a non-null outcome without 
                        exception. This conversation is associated with the jBPM task specified in 
                        the named request parameter. Within the context of this conversation, 
                        a business process context is also defined, for the business process 
                        instance of the task instance.
                    </para>
                    <para>
                        The jBPM <literal>TaskInstance</literal> will be available in a
                        request context variable named <literal>taskInstance</literal>.
                        The jPBM <literal>ProcessInstance</literal> will be available in
                        a request context variable named <literal>processInstance</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>taskIdParameter</literal> &mdash; the name of a request
                            parameter which holds the id of the task. Default to
                            <literal>"taskId"</literal>, which is also the default
                            used by the Seam <literal>taskList</literal> JSF component.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry id="endtask-annotation">
                <term><literal>@EndTask</literal></term>
                <listitem>
                    <programlisting><![CDATA[@EndTask]]></programlisting>
                    <para>
                        "Ends" a jBPM task. Specifies that a long-running conversation 
                        ends when this method returns a non-null outcome, and that the current task 
                        is complete. Triggers a jBPM transition. The actual transition triggered
                        will be the default transition unless the application has called
                        <literal>Transition.setName()</literal> on the built-in component
                        named <literal>transition</literal>.
                    </para>
                </listitem>
                <listitem>
                    <programlisting><![CDATA[@EndTask(transition="transitionName")]]></programlisting>
                    <para>
                        Triggers the given jBPM transition.
                    </para>
                </listitem>
                <listitem>
                    <programlisting><![CDATA[@EndTask(ifOutcome={"success", "continue"})]]></programlisting>
                    <para>
                        Specifies that the task ends when this method returns one of the listed outcomes.
                    </para>
                </listitem>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>transition</literal> &mdash; the name of the jBPM transition to
                            be triggered when ending the task. Defaults to the default transition.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>ifOutcome</literal> &mdash; specifies the JSF outcome or 
                            outcomes that result in the end of the task.
                        </para>
                        </listitem>
                    </itemizedlist>
            </varlistentry>   
            <varlistentry id="createprocess-annotation">
                <term><literal>@CreateProcess</literal></term>
                <listitem>
                    <programlisting><![CDATA[@CreateProcess(definition="ProcessDefinition")]]></programlisting>
                    <para>
                        Creates a new jBPM process instance when the method returns a non-null
                        outcome without exception. The <literal>ProcessInstance</literal> object
                        will be available in a context variable named <literal>processInstance</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>definition</literal> &mdash; the name of the jBPM
                            process definition.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry id="resumeprocess-annotation">
                <term><literal>@ResumeProcess</literal></term>
                <listitem>
                    <programlisting><![CDATA[@ResumeProcess(processIdParameter="processId")]]></programlisting>
                    <para>
                        Re-enters the scope of an existing jBPM process instance when the method returns a 
                        non-null outcome without exception. The <literal>ProcessInstance</literal> object
                        will be available in a context variable named <literal>processInstance</literal>.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>processIdParameter</literal> &mdash; the name a request parameter
                            holding the process id. Default to <literal>"processId"</literal>.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
        </variablelist>
        
        <!-- para>
            Finally, this annotation appears on a string-valued getter method:
        </para>
        
    	<variablelist spacing="compact">
            <varlistentry id="transition-annotation">
                <term><literal>@Transition</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Transition]]></programlisting>
                    <para>
                        Returns the transition name to be used when a jBPM transition is triggered
                        by <literal>@EndTask</literal>. A null return value indicates the
                        default transition.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist--> 
    </section> 
    
    <section>
    	<title>Annotations for transaction demarcation</title>
    	<para>
    	    Seam provides an annotation that lets you force a rollback of the JTA transaction
    	    for certain action listener outcomes.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry id="transition-annotation">
                <term><literal>@Rollback</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Rollback(ifOutcome={"failure", "not-found"})]]></programlisting>
                    <para>
                        If the outcome of the method matches any of the listed outcomes, or if
                        no outcomes are listed, set the transaction to rollback only when the
                        method completes.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>ifOutcome</literal> &mdash; the JSF outcomes that cause a 
                            transaction rollback (no outcomes is interpreted to mean any outcome).
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist> 
        
        <para>
            Seam applications usually use the standard EJB3 annotations for all other transaction
            demarcation needs.
        </para>
    </section>
    
    <section>
    	<title>Annotations for validation</title>
    	<para>
    	    This annotation triggers Hibernate Validator. It appears on a method of a Seam 
    	    component, almost always an action listener method.
    	</para>
    	<para>
    	    Please refer to the documentation for the Hibernate Annotations package for
    	    information about the annotations defined by the Hibernate Validator framework.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry id="ifinvalid-annotation">
                <term><literal>@IfInvalid</literal></term>
                <listitem>
                    <programlisting><![CDATA[@IfInvalid(outcome="invalid")]]></programlisting>
                    <para>
                        Specifies that Hibernate Validator should validate the component before
                        the method is invoked. If the invocation fails, the specified outcome
                        will be returned, and the validation failure messages returned by
                        Hibernate Validator will be added to the <literal>FacesContext</literal>. 
                        Otherwise, the invocation will proceed.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>outcome</literal> &mdash; the JSF outcome when validation
                            fails.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
        
    </section> 

    <section>
    	<title>Annotations for Seam interceptors</title>
    	<para>
    	    The following annotations appear on Seam interceptor classes.
    	</para>
    	<para>
    	    Please refer to the documentation for the EJB 3.0 specification for information about 
    	    the annotations required for EJB interceptor definition.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry>
                <term><literal>@Around</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Around({SomeInterceptor.class, OtherInterceptor.class})]]></programlisting>
                    <para>
                        Specifies that this interceptor is positioned higher in the stack than
                        the given interceptors.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>@Within</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Within({SomeInterceptor.class, OtherInterceptor.class})]]></programlisting>
                    <para>
                        Specifies that this interceptor is positioned deeper in the stack than
                        the given interceptors.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        
    </section> 

    <section>
    	<title>Annotations for use with JSF <literal>dataTable</literal></title>
    	<para>
    	    The following annotations make it easy to implement clickable lists
    	    backed by a stateful session bean. They appear on attributes.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry id="datamodel-annotation">
                <term><literal>@DataModel</literal></term>
                <listitem>
                    <programlisting><![CDATA[@DataModel("variableName")]]></programlisting>
                    <para>
                        Exposes an attribute of type <literal>List</literal> as a JSF
                        <literal>DataModel</literal> into the conversation scope.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>value</literal> &mdash; name of the conversation
                            context variable. Default to the attribute name.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry id="datamodelselection-annotation">
                <term><literal>@DataModelSelection</literal></term>
                <listitem>
                    <programlisting><![CDATA[@DataModelSelection]]></programlisting>
                    <para>
                        Injects the selected value from the JSF <literal>DataModel</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry id="datamodelselectionindex-annotation">
                <term><literal>@DataModelSelectionIndex</literal></term>
                <listitem>
                    <programlisting><![CDATA[@DataModelSelectionIndex]]></programlisting>
                    <para>
                        Exposes the selection index of the JSF <literal>DataModel</literal>
                        as an attribute of the component.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        
    </section> 

</chapter>