<chapter id="annotations">
    <title>Seam annotations</title>
    
    <para>
        When you write a Seam application, you'll use a lot of annotations. Seam lets you use
        annotations to achieve a declarative style of programming. Most of the annotations you'll
        use are defined by the EJB 3.0 specification. The annotations for data validation are
        defined by the Hibernate Validator package. Finally, Seam defines its own set of
        annotations, which we'll describe in this chapter.
    </para>
    
    <para>
        All of these annotations are defined in the package 
        <literal>org.jboss.seam.annotations</literal>.
    </para>
    
    <section>
    	<title>Annotations for component definition</title>
    	<para>
    	    The first group of annotations lets you define a Seam component. These
    	    annotations appear on the component class.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry>
                <term><literal>@Name</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Name("componentName")]]></programlisting>
                    <para>
                        Define the Seam component name for a class. This annotation is 
                        required for all Seam components.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@Scope</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Name(ScopeType.CONVERSATION)]]></programlisting>
                    <para>
                        Define the default context of the component. The possible values
                        are defined by the <literal>ScopeType</literal> enumeration:
                        <literal>EVENT, CONVERSATION, SESSION, PROCESS, APPLICATION,
                        STATELESS</literal>.
                    </para>
                    <para>
                        When no scope is explicitly specified, the default depends upon
                        the component type. For stateless session beans, the default
                        is <literal>STATELESS</literal>. For entity beans and stateful
                        session beans, the default is <literal>CONVERSATION</literal>.
                        For java beans, the default is <literal>EVENT</literal>.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@Intercept</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Intercept(InterceptionType.ALWAYS)]]></programlisting>
                    <para>
                        Determines when Seam interceptors are active. The possible values
                        are defined by the <literal>InterceptionType</literal> enumeration:
                        <literal>ALWAYS, INVOKE_APPLICATION, NEVER</literal>.
                    </para>
                    <para>
                        When no interception type is explicitly specified, the default depends 
                        upon the component type. For entity beans, the default is 
                        <literal>NEVER</literal>. For session beans and JavaBeans, the default 
                        is <literal>INVOKE_APPLICATION</literal> (interception only enabled 
                        during the JSF invoke application phase).
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@JndiName</literal></term>
                <listitem>
                    <programlisting><![CDATA[@JndiName("my/jndi/name")]]></programlisting>
                    <para>
                        Define the JNDI name of an EJB component.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@Conversational</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Conversational(ifNotBegunOutcome="error")]]></programlisting>
                    <para>
                        Specifies that a conversation scope component is conversational,
                        meaning that no method of the component can be called unless
                        a long-running conversation is active (unless it the method would
                        begin a new long-running conversations).
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>ifNotBegunOutcome</literal> &mdash; specifies a JSF
                            outcome for the action when the component is invoked and no
                            long-running conversation is active.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
        </variablelist>
    </section>

    <section>
    	<title>Annotations for bijection</title>
    	<para>
    	    The next two annotations control bijection. These attributes
    	    occur on component instance variables or property accessor
    	    methods.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry>
                <term><literal>@In</literal></term>
                <listitem>
                    <programlisting><![CDATA[@In(value="contextVariableName", create=false, required=false)]]></programlisting>
                    <para>
                        Specifies that a component attribute is to be injected from a context 
                        variable at the beginning of each component invocation.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>value</literal> &mdash; specifies the name of the
                            context variable. Default to the name of the component
                            attribute.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>create</literal> &mdash; specifies that Seam should
                            instantiate the component with the same name as the context
                            variable if the context variable is undefined (null) in all 
                            contexts. Default to false.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>required</literal> &mdash; specifies Seam should throw
                            an exception if the context variable is undefined in all contexts.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@Out</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Out(value="contextVariableName", required=false)]]></programlisting>
                    <para>
                        Specifies that a component attribute is to be outjected to a context 
                        variable at the end of a component invocation.
                    </para>
                    <itemizedlist>
                        <listitem>
                        <para>
                            <literal>value</literal> &mdash; specifies the name of the
                            context variable. Default to the name of the component
                            attribute.
                        </para>
                        </listitem>
                        <listitem>
                        <para>
                            <literal>required</literal> &mdash; specifies Seam should throw
                            an exception if the component attribute is null during outjection.
                        </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            Note that it is quite common for these annotations to occur together, for example:
        </para>
        
        <programlisting><![CDATA[@In(create=true) @Out private User currentUser;]]></programlisting>
        
        <para>
            The next annotation supports the <emphasis>manager component</emphasis> pattern,
            where a Seam component to manages the lifecycle of an instance of some
            other class that is to be injected. It appears on a component getter method.
        </para>
        
    	<variablelist spacing="compact">
            <varlistentry>
                <term><literal>@Unwrap</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Unwrap]]></programlisting>
                    <para>
                        Specifies that the object returned by the annotated getter method is 
                        the thing that is injected instead of the component instance itself.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
          
    </section> 
    
    <section>
    	<title>Annotations for component lifecycle methods</title>
    	<para>
    	    These annotations allow a component to react to its own lifecycle events.
    	    They occur on methods of the component. There may be only one of each
    	    per component class.
    	</para>
    	
    	<variablelist spacing="compact">
            <varlistentry>
                <term><literal>@Create</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Create]]></programlisting>
                    <para>
                        Specifies that the method should be called when an instance
                        of the component is instantiated by Seam.
                    </para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term><literal>@Destroy</literal></term>
                <listitem>
                    <programlisting><![CDATA[@Destroy]]></programlisting>
                    <para>
                        Specifies that the method should be called when the context ends and
                        its context variables are destroyed.
                    </para>
                    <para>
                        Note that all stateful session bean components <emphasis>must</emphasis>
                        define a method annotated <literal>@Destroy @Remove</literal> in order
                        to guarantee destruction of the stateful bean when a context ends.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        
    </section> 
</chapter>