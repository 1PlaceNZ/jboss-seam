<chapter id="weblogic">
   <title>Seam on BEA's Weblogic</title>
   
   <para> Weblogic 10.X is BEA's JEE5 server offering, currently 10.0.MP1 is
      their stable release, and 10.3.TP is their latest tech preview release.
      Seam applications can be deployed and developed on Weblogic servers, and
      this chapter will show you how. There are some known issues with the Weblogic
      servers that will need to be worked around, and configuration changes that
      are needed. </para>
   
   <para> First step is to get Weblogic downloaded, installed and running (no
      small feat). Then we'll talk about Seam's JEE5 example and the hurdles to
      getting it running, and what blockers exist. After that the JPA example will
      be modified and deployed to the server. Then finally we will create
      <literal>seam-gen</literal> application and get it up and running to
      provide a jump start to your application. </para>
   
   <section>
      <title>Installation and operation of Weblogic</title>
      <para> First things first we need to get the server installed - and there is a
         choice to be made. Weblogic 10.0.MP1 is the most recent stable release,
         while 10.3.TP is a technical preview version that fixes some things and
         breaks others. </para>
      <itemizedlist>
         <listitem>
            <para><literal>Weblogic 10.0.MP1</literal>
               &#8212; <ulink
                  url="http://commerce.bea.com/showproduct.jsp?family=WLS&amp;major=10&amp;minor=1">
               Download page </ulink></para>
            <para> 10.0.MP1 has a known issue with EJBs that use
               <literal>varargs</literal> in their methods (it confuses them
               as <literal>transient</literal> ). This causes exceptions
               when Weblogic attempts to compile the Seam EJBs as
               <literal>varargs</literal> are used. There seems to be no work
               around to this issue in 10.0.MP1. Because of this only the
               <literal>jpa</literal> and WAR based
               <literal>seam-gen</literal> examples work with this version.
               See the <literal>jee5/booking</literal> example for more
               details. </para>
         </listitem>
         <listitem>
            <para><literal>Weblogic 10.3.TP</literal>
               &#8212; <ulink
                  url="http://commerce.bea.com/showproduct.jsp?family=WLS&amp;major=10.3Tech&amp;minor=-1&amp;DL=www_WLS_10-3TechPreview_icon&amp;WT.ac=DL_www_WLS_10.3_TechPreviewicon">
               Download page </ulink></para>
            <para> This version still has not fixed the
               <literal>varargs</literal> bug, and there is a new issue with
               EJBs that do not use <literal>kodo</literal> (BEA's
               implementation of JPA). See the
               <literal>jee5/booking</literal> example for more details.
               However if the <literal>varargs</literal> issue is going to get fixed it
               will most likely be an update to this version. </para>
         </listitem>
      </itemizedlist>
      
      <para> For the reasons listed above, and the fact that 10.3.TP gets us closer
         to the goal of Seam EJB3 support on Weblogic, 10.3.TP will be used for the
         examples below. </para>
      
      <section>
         <title>Installing 10.3.TP</title>
         
         <para> Here are the quick steps to installing Weblogic 10.3.TP. For more
            details or if you are having any issues please check with the BEA docs
            at the <ulink
               url="http://edocs.bea.com/wls/essex/TechPreview/"> Tech
            Preview Doc Center </ulink> . Here we install the RHEL 5 version using the
            graphical installer: </para>
         
         <orderedlist>
            <listitem>
               <para> Follow the link given above for 10.3.TP and download
                  the correct version for your environment. You will need to
                  sign up for an account with BEA in order to do this. </para>
            </listitem>
            <listitem>
               <para> You may need to change the the
                  <literal>server103tp_XX.bin</literal> file to be
                  executable: </para>
               <programlisting>chmod a+x server103tp_XX.bin</programlisting>
            </listitem>
            <listitem>
               <para> Execute the install: </para>
               <programlisting>./server103tp_XX.bin</programlisting>
            </listitem>
            <listitem>
               <para> When the graphical install loads, you need to set the BEA
                  home location. This is where all BEA applications are
                  installed. This location will be known as
                  <literal>$BEA_HOME</literal> in this document e.g.: </para>
               <programlisting>/home/jbalunas/bea</programlisting>
            </listitem>
            <listitem>
               <para> Select <literal>Complete</literal> as the
                  installation type. You do not need all the extras of the
                  complete install (such as struts and beehive libraries), but
                  it will not hurt. </para>
            </listitem>
            <listitem>
               <para> Then you need to tell it where to install the server
                  components: </para>
               <programlisting>$BEA_HOME/wlserver_10.3tp</programlisting>
            </listitem>
         </orderedlist>
      </section>
      <section id="weblogic-domain">
         <title>Creating your Weblogic domain</title>
         <para> A Weblogic domain is similar to a JBoss server configuration - it
            is a self contained server instance. The Weblogic server you just
            installed has some example domains, but we are going to create one
            just for the seam examples. You can use the existing domains if you
            wish (modify the instructions as needed). </para>
         
         <orderedlist>
            <listitem>
               <para> Start up the Weblogic configuration wizard:</para>
               <programlisting>$BEA_HOME/wlserver_10.3tp/common/bin/config.sh</programlisting>
            </listitem>
            <listitem>
               <para> Choose to create a new domain, configured to support
                  <literal>Weblogic Server TP</literal>. Note that this is
                  the default domain option. </para>
            </listitem>
            <listitem>
               <para>Set a username and password for this domain.</para>
            </listitem>
            <listitem>
               <para> Next choose <literal>Development Mode</literal> and
                  the default JDK when given the option. </para>
            </listitem>
            <listitem>
               <para> The next screen asks if you want to customize any setting.
                  Select <literal>No</literal>. </para>
            </listitem>
            <listitem>
               <para> Finally set the name of the domain to
                  <literal>seam_examples</literal> and leave the default
                  domain location. </para>
            </listitem>
         </orderedlist>
      </section>
      <section id="bea_start_stop_access">
         <title>How to Start/Stop/Access your domain</title>
         <para> Now that the server is installed and the domain is created you need
            to know how to start and stop it, plus how to access its configuration
            console. </para>
         
         <itemizedlist>
            <listitem>
               <para> Starting the domain:</para>
               <para> This is the easy part - go to the <literal>
                  $BEA_HOME/user_projects/domains/seam_examples/bin
                  </literal> directory and run the
                  <literal>./startWeblogic.sh</literal> script. </para>
            </listitem>
            <listitem>
               <para> Accessing the configuration console:</para>
               <para> Launch
                  <literal>http://127.0.0.1:7001/console</literal> in
                  your web browser. It will ask for your username and password
                  that you entered before. We won't get into this much now, but
                  this is the starting point for a lot of the various
                  configurations that are needed later. </para>
            </listitem>
            <listitem>
               <para> Stopping the domain:</para>
               <para> There are a couple of options here: </para>
               <itemizedlist>
                  <listitem>
                     <para> The recommended way is through the configuration
                        console:
                        <orderedlist>
                           <listitem>
                              <para> Select
                                 <literal>seam-examples</literal> on the
                                 left hand side of the console. </para>
                           </listitem>
                           <listitem>
                              <para> Choose the
                                 <literal>Control</literal> tab in the
                                 middle of the page. </para>
                           </listitem>
                           <listitem>
                              <para> Select the check box
                                 <literal>AdminServer</literal> in the
                                 table. </para>
                           </listitem>
                           <listitem>
                              <para> Choose <literal>Shutdown</literal>
                                 just above the table, and select either
                                 <literal>When work completes</literal>
                                 or <literal>Force shutdown now</literal>
                                 as appropriate. </para>
                           </listitem>
                           <listitem>
                              <para> Then finally confirm that you want to
                                 shut this server down. </para>
                           </listitem>
                        </orderedlist> </para>
                  </listitem>
                  <listitem>
                     <para> Hitting <literal>Ctrl-C</literal> in the
                        terminal where you started the domain.</para>
                     <para> No negative effects have been seen, but we would not
                        recommend doing this while in the middle of 
                        configuration changes in the console. </para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </itemizedlist>
      </section>
   </section>
   
   <section>
      <title> The <literal>jee5/booking</literal> example </title>
      
      <para>Do you want to run Seam using EJB's on Weblogic? If so there are some
         blockers that keep it from working. This section describes what changes
         are needed to the <literal>jee5/booking</literal> example to get it as
         close to deploying as possible. First we'll talk about the blockers and
         what they effect.</para>
      
      <section id="weblogic-ejb-blockers">
         <title>EJB Blockers with Weblogic</title>
         <para>For several releases of Weblogic there has been an issue with
            compiling EJB's that use variable arguments in their methods. This
            is confirmed in the Weblogic 9.X and 10.X versions. We had hoped that
            the issue would be resolved in the tech preview release, but it is not.
            Seam uses variable arguments in its internal EJB's and so until this
            is fixed Seam with EJB's will not work.</para>
         
         <para>The gist of the issue is that the Weblogic EJB compiler believes
            that methods that use <literal>varargs</literal> are
            <literal>transient</literal> and the deployment will fail with
            exceptions like below:
            
            
            <programlisting><![CDATA[java.io.IOException: Compiler failed executable.exec: 
/home/jbalunas/bea/wlserver_10.3tp/user_projects/domains/seam_examples/servers/AdminServer
/cache/EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:194: modifier transient 
not allowed here
  public transient javax.ejb.Timer scheduleAsynchronousEvent(java.lang.String arg0,
  java.lang.Object[] arg1)
                                   ^
/home/jbalunas/bea/wlserver_10.3tp/user_projects/domains/seam_examples/servers/AdminServer
/cache/EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:275: modifier transient
not allowed here
  public transient javax.ejb.Timer scheduleTimedEvent(java.lang.String arg0, 
  org.jboss.seam.async.TimerSchedule arg1, java.lang.Object[] arg2)]]></programlisting>
            BEA says that this is a bug with Java specification. Sun admits the
            issue, and provides a work around, and will not fix the core issue.
            
            <itemizedlist>
               <listitem>
                  <para><ulink
                        url="http://forums.bea.com/thread.jspa?threadID=300002074">
                     BEA forum</ulink> &#8212; Discusses the issue and
                     suggests waiting for a new release of 10.X</para>
               </listitem>
               <listitem>
                  <para><ulink
                        url="http://forums.bea.com/thread.jspa?messageID=300006290">
                     BEA forum</ulink> &#8212; Discusses response from BEA
                     support and that BEA is saying it is an issue with the spec
                     with links to the bug.</para>
               </listitem>
               <listitem>
                  <para><ulink
                        url="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6516895">
                     Sun bug report </ulink> &#8212; Describes details of the
                     issue, but says that it will not be fixed.</para>
               </listitem>
            </itemizedlist> So what does that mean to us? At least for now EJB's
            with variable arguments will not run on Weblogic. </para>
         
         <section>
            <title>Secondary issue with the Tech Preview</title>
            <para>A less severe issue is also present in the tech preview version
               of Weblogic. You can not use any JPA provider with EJB's except for
               the default <literal>kodo</literal> or <literal>openJPA</literal>
               implementation. As you set up this example you will run into this
               issue before the <literal>varargs</literal> problem.
               Unfortunately using <literal>kodo</literal> or <literal>openJPA</literal>
               does not help with the blocker described above but is important 
               to know.</para>
            
            <para>Other users have seen this issue with the tech preview and I
               would hope/expect that it will be fixed in future releases (
                  <ulink
                  url="http://forums.bea.com/thread.jspa?threadID=300004403">
               BEA Forum</ulink>). The forum entry has the exact stack trace,
               and the response from BEA.</para>
         </section>
      </section>
      
      <section>
         <title>The <literal>jee5/booking</literal> example</title>
         <para>In this section will will quickly go over the steps needed to get
            the <literal>jee5/booking</literal> example to the point that
            blocker shows itself.</para>
         
         <section id="weblogic-hsql-jee5-ds">
            <title>Setting up the hsql datasource</title>
            <para>This example uses the in memory hypersonic database, and the
               correct data source needs to be set up. The admin console uses a
               wizard like set of pages to configure it.
               
               <orderedlist>
                  <listitem>
                     <para> Copy <literal>hsqldb.jar</literal> to weblogic
                        domain's shared library directory: <literal> cp
                        ../../seam-gen/lib/hsqldb.jar
                        /home/jbalunas/bea/user_projects/domains/seam_examples/lib</literal>
                        </para>
                  </listitem>
                  <listitem>
                     <para>Start up the server and navigate to the
                        administration console following <xref
                           linkend="bea_start_stop_access"/></para>
                  </listitem>
                  <listitem>
                     <para>On the left side tree navigate
                        <literal>seam_examples - Services- JDBC - Data
                        Sources</literal>.</para>
                  </listitem>
                  <listitem>
                     <para>You must lock the domain configuration using the
                        button in the upper left box.</para>
                  </listitem>
                  <listitem>
                     <para>Then select button <literal>New</literal>
                        button at the top of the data source table</para>
                  </listitem>
                  <listitem>
                     <para>Fill in the following:
                        <orderedlist>
                           <listitem>
                              <para>Name:
                                 <literal>seam-jee5-ds</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>JNDI Name:
                                 <literal>seam-jee5-ds</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>Database Type and Driver:
                                 <literal>other</literal></para>
                           </listitem>
                           <listitem>
                              <para>Select <literal>Next</literal>
                                 button</para>
                           </listitem>
                        </orderedlist></para>
                  </listitem>
                  <listitem>
                     <para>Select <literal>Next</literal> button on the
                        <literal>Transaction Options</literal>
                        page</para>
                  </listitem>
                  <listitem>
                     <para>Fill in the following on the <literal>Connection
                        Properties</literal> page:
                        <orderedlist>
                           <listitem>
                              <para>Database Name:
                                 <literal>hsqldb</literal></para>
                           </listitem>
                           <listitem>
                              <para>Host Name:
                                 <literal>127.0.0.1</literal></para>
                           </listitem>
                           <listitem>
                              <para>Port: <literal>9001</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>Username: <literal>sa</literal> will
                                 empty password fields.</para>
                           </listitem>
                           <listitem>
                              <para>Select <literal>Next</literal>
                                 button</para>
                           </listitem>
                        </orderedlist></para>
                  </listitem>
                  <listitem>
                     <para>Fill in the following on the <literal>Connection
                        Properties</literal> page:
                        <orderedlist>
                           <listitem>
                              <para>Driver Class Name:
                                 <literal>org.hsqldb.jdbcDriver</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>URL:
                                 <literal>jdbc:hsqldb:.</literal>
                                 </para>
                           </listitem>
                           <listitem>
                              <para>Username: <literal>sa</literal> will
                                 empty password fields.</para>
                           </listitem>
                           <listitem>
                              <para>Leave the rest of the fields
                                 empty.</para>
                           </listitem>
                           <listitem>
                              <para>Select <literal>Next</literal>
                                 button</para>
                           </listitem>
                        </orderedlist></para>
                  </listitem>
                  <listitem>
                     <para>Choose the target domain for the data source in our
                        case the only one <literal>AdminServer</literal>.
                        Click <literal>Next</literal>.</para>
                  </listitem>
                  <listitem>
                     <para>Finally - apply the changes by selecting the
                        <literal>Apply Changes</literal> button in the
                        upper left corner.</para>
                  </listitem>
               </orderedlist> </para>
         </section>
         <section>
            <title>Configuration and Build changes</title>
            <variablelist>
               <varlistentry>
                  <term>
                     <literal>resources/META-INF/persistence.xml</literal>
                  </term>
                  <listitem>
                     <para>
                        <itemizedlist>
                           <listitem>
                              <para>Because the tech preview version will
                                 only work with <literal>kodo</literal> or
                                 <literal>openJPA</literal> as the JPA
                                 provider you must change the provider to :
                                 
                                 
                                 <programlisting><![CDATA[<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>]]></programlisting></para>
                           </listitem>
                           <listitem>
                              <para> Next you need to change the
                                 <literal>jta-data-source</literal> to
                                 what you entered above :
                                 
                                 
                                 <programlisting><![CDATA[<jta-data-source>seam-jee5-ds</jta-data-source>]]></programlisting></para>
                           </listitem>
                           <listitem>
                              <para>The other properties in the file are
                                 hibernate specific and are not used by
                                 <literal>openJPA</literal> but can be
                                 left in.</para>
                           </listitem>
                        </itemizedlist> </para>
                  </listitem>
               </varlistentry>
            </variablelist>
         </section>
         <section>
            <title>Deploying the Application</title>
            <para>There are some changes needed to the build script and then we
               can attempt to deploy the app.</para>
            
            <variablelist>
               <varlistentry>
                  <term> <literal>build.xml</literal>
                  </term>
                  <listitem>
                     <para> Weblogic does not ship with a default JSF
                        implementation so we need to add the JSF libraries to
                        the WAR. Add the following to the
                        <literal>build.xml</literal> and this will add the
                        needed jars.
                        
                        
                        <programlisting><![CDATA[<fileset id="war.lib.extras" dir="${seam.dir}">
   <include name="lib/jsf-api.jar" />
   <include name="lib/jsf-impl.jar" />
   <include name="lib/richfaces-api.jar" />
</fileset>]]></programlisting></para>
                  </listitem>
               </varlistentry>
            </variablelist>
            
            <para>Now we can build the application by running <literal>ant
               archive</literal> at the base of the example directory.</para>
            
            <para>Because we chose to create our Weblogic domain in development
               mode we can deploy the application by putting the EAR file in the
               domains autodeploy directory.
               
               
               <programlisting>cp  ./dist/jboss-seam-jee5.ear /home/jbalunas/bea/user_projects/domains/seam_examples/autodeploy</programlisting></para>
            
            <para>Here is where we see the <literal>varargs</literal> issue.
               In the console output you will some Kodo warnings, then
               exceptions and compile errors like the one below.
               
               
               <programlisting><![CDATA[ <Error> <EJB> <BEA-012036> <Compiling generated EJB classes produced the following Java compiler error message:

/home/jbalunas/bea/user_projects/domains/seam_examples/servers/AdminServer/cache/
EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:32:
                modifier transient not allowed here
  public transient void scheduleTransactionSuccessEvent(java.lang.String arg0,
  java.lang.Object[] arg1)
                        ^
/home/jbalunas/bea/user_projects/domains/seam_examples/servers/AdminServer/cache/
EJBCompilerCache/5yo5dk9ti3yo/org/jboss/seam/async/
TimerServiceDispatcher_qzt5w2_LocalTimerServiceDispatcherImpl.java:113:
                modifier transient not allowed here
  public transient javax.ejb.Timer scheduleAsynchronousEvent(java.lang.String arg0,
  java.lang.Object[] arg1)

...
]]></programlisting></para>
            
            <para>This is as far as we can go with Weblogic using EJB's with seam
               until the <literal>varargs</literal> issue is
               resolved.</para>
         </section>
      </section>
      
   </section>
   
   <section>
      <title> The <literal>jpa</literal> booking example </title>
      <para>This is the Hotel Booking example implemented in Seam POJO and
         Hibernate JPA and does not require EJB3 support to run. The example
         already has a breakout of configurations and build scripts for many of
         the common containers including Weblogic 10.X </para>
      
      <para> First we'll build the example for Weblogic 10.x and do the needed
         steps to deploy. Then we'll talk about what is different between the
         Weblogic versions, and with the JBoss AS version. </para>
      
      <section>
         <title>Building and deploying <literal>jpa</literal> booking
            example</title>
         
         <para>Step one setup the datasource, step two build the app, step three
            deploy.</para>
         
         <section>
            <title>Setting up the datasource</title>
            
            <para> The Weblogic 10.X version of the example uses the in memory
               hsql database instead of the built in PointBase database. If you
               wish to use the PointBase database you must setup a PointBase
               datasource, and adjust the hibernate setting in
               <literal>persistence.xml</literal> to use the PointBase
               dialect. For reference the
               <literal>jpa/weblogic92</literal> example uses
               PointBase.</para>
            
            <para>Configuring the datasource is very similar to the jee5 <xref
                  linkend="weblogic-hsql-jee5-ds"/>. Follow the steps in
               that section, but use the following entries where needed.
               <itemizedlist>
                  <listitem>
                     <para>DataSource Name:
                        <literal>seam-jpa-ds</literal></para>
                  </listitem>
                  <listitem>
                     <para>JNDI Name: <literal>seam-jpa-ds</literal>
                        </para>
                  </listitem>
               </itemizedlist> </para>
         </section>
         <section>
            <title>Building the example</title>
            
            <para> Building it only requires running the correct ant command:
               
               
               <programlisting>ant -f build-weblogic10.xml</programlisting>
               This will create container specific distribution and exploded
               archive directories.</para>
         </section>
         <section>
            <title>Deploying the example</title>
            
            <para> When we installed Weblogic following <xref
                  linkend="weblogic-domain"/> we chose to have the domain in
               development mode. This means to deploy the application all we
               need to do is copy it into the autodeploy directory.</para>
               
               <programlisting>cp  ./dist-weblogic10/jboss-seam-jpa.war /home/jbalunas/bea/user_projects/domains/seam_examples/autodeploy</programlisting>
            
            <para>Check out the application at the following
               <literal>http://localhost:7001/jboss-seam-jpa/</literal>
               .</para>
         </section>
      </section>
      <section id="weblogic-jpa-diff">
         <title>What's different with Weblogic 10.x</title>
         
         <para>Between the the Weblogic 10.x and 9.2 examples there is very
            little difference. The 9.2 example's
            <literal>persistence.xml</literal> is setup to use the PointBase
            database and a pre-installed data source if you chose to install the
            "example" domains.</para>
         
         <para>Like OC4J, Weblogic 10.x use an older version of ANTLR, so we need to
            use an alternative query factory. This is done by adding the
            following property in the <literal>persistence.xml</literal>
            file.</para>
                        
            <programlisting><![CDATA[<property name="hibernate.query.factory_class" 
   value="org.hibernate.hql.classic.ClassicQueryTranslatorFactory"/>]]></programlisting>
         
         <para>There are certainly more differences with the Weblogic versions
            and the JBoss version, but none of them major except for library
            requirements. Here is the rundown:
            <itemizedlist>
               <listitem>
                  <para><literal>persistence.xml</literal> &#8212; JBoss
                     version is set to use the <literal>DefaultDS</literal>
                     </para>
               </listitem>
               <listitem>
                  <para><literal>log4j.xml</literal> &#8212; JBoss
                     version is set to use the log4j</para>
               </listitem>
               <listitem>
                  <para><literal>components.xml</literal> &#8212; JBoss
                     version uses the built in entity manager via:</para>
                     
                  <programlisting><![CDATA[ <transaction:entity-transaction entity-manager="#{em}"/>]]></programlisting>
               </listitem>
               <listitem>
                  <para><literal>jboss-web.xml</literal> &#8212; JBoss
                     version needs this file for deployment
                     descriptors.</para>
               </listitem>
               <listitem>
                  <para><literal>web.xml</literal> &#8212; Weblogic
                     version defines a <literal>listener-class</literal>
                     for JSF, and sets the session timeout.</para>
               </listitem>
               <listitem>
                  <para><literal>WEB-INF/lib</literal> &#8212; The
                     Weblogic version requires several library packages
                     because they are not included as they are with JBoss AS.
                     These are primarily for hibernate, JSF-RI support and
                     their dependencies.
                     
                     <itemizedlist>
                        <listitem>
                           <para> To use Hibernate as your JPA provider you
                              need the following jars:
                              <itemizedlist>
                                 <listitem>
                                    <simpara>
                                       <literal>hibernate.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>hibernate-annotations.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>hibernate-entitymanager.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>hibernate-validator.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>jboss-common-core.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>commons-logging.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>commons-collections.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>jboss-archive-browsing.jar</literal>
                                       </simpara>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para>Seam requires JSF 1.2 and these are jars
                              needed for that:
                              <itemizedlist>
                                 <listitem>
                                    <simpara>
                                       <literal>jsf-api.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>jsf-impl.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>jstl.jar</literal>
                                       </simpara>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                        <listitem>
                           <para>Various third party jars that Weblogic
                              needs:
                              <itemizedlist>
                                 <listitem>
                                    <simpara>
                                       <literal>antlr.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>cglib.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>dom4j.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>el-api.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>el-ri.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>javassist.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>jta.jar</literal>
                                       </simpara>
                                 </listitem>
                                 <listitem>
                                    <simpara>
                                       <literal>persistence-api.jar</literal>
                                       </simpara>
                                 </listitem>
                              </itemizedlist> </para>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>
            </itemizedlist> </para>
      </section>
      
   </section>
   
   <section>
      <title> Deploying an application created using
         <literal>seam-gen</literal> on Weblogic 10.x</title>
      
      <para><literal>seam-gen</literal> is a very useful tool for developers
         to quickly get an application up and running, and provides a foundation
         to add your own functionality. Out of box <literal>seam-gen</literal>
         will produce applications configured to run on JBoss AS. These
         instructions will show the steps needed to get it to run on Weblogic.
         </para>
      <para><literal>seam-gen</literal> was build for simplicity so, as you can
         imagine, deploying an application generated by
         <literal>seam-gen</literal> to Weblogic 10.x is not too hard.
         Basically it consists of updating or removing some configuration
         files, and adding dependent jars that Weblogic 10.x does not ship
         with.</para>
      
      <para>We still need to live within the constraints imposed to us by
         Weblogic, and because of that this example will generate a
         <literal>WAR</literal> based application instead of an
         <literal>EAR</literal>. See <xref
            linkend="weblogic-ejb-blockers"/> for details.</para>
      
      <para>This example will cover the basic <literal>seam-gen WAR</literal>
         deployment. This will demonstrate Seam POJO components, Hibernate
         JPA, Facelets, Drools security, RichFaces, and a configurable
         DataSource.</para>
      
      <section>
         <title>Running <literal>seam-gen</literal> setup</title>
         
         <para>The first thing we need to do it tell
            <literal>seam-gen</literal> about the project we want to make.
            This is done by running <literal>./seam setup</literal> in the base
            directory of the Seam distribution. Note the paths here are my own,
            feel free to change for you environment.
            
            
            <programlisting><![CDATA[./seam setup
Buildfile: build.xml

init:

setup:
     [echo] Welcome to seam-gen :-)
    [input] Enter your Java project workspace (the directory that contains your Seam projects) [C:/Projects] [C:/Projects]
/home/jbalunas/workspace
    [input] Enter your JBoss home directory [C:/Program Files/jboss-4.2.2.GA] [C:/Program Files/jboss-4.2.2.GA]
/home/jbalunas/jboss/jboss-4.2.2.GA
    [input] Enter the project name [myproject] [myproject]
weblogic-example
     [echo] Accepted project name as: weblogic_example
    [input] Select a RichFaces skin (not applicable if using ICEFaces) [blueSky] ([blueSky], classic, ruby, wine, deepMarine, emeraldTown, sakura, DEFAULT)

    [input] Is this project deployed as an EAR (with EJB components) or a WAR (with no EJB support) [ear]  ([ear], war, )
war
    [input] Enter the Java package name for your session beans [com.mydomain.weblogic_example] [com.mydomain.weblogic_example]
org.jboss.seam.tutorial.weblogic.action
    [input] Enter the Java package name for your entity beans [org.jboss.seam.tutorial.weblogic.action] [org.jboss.seam.tutorial.weblogic.action]
org.jboss.seam.tutorial.weblogic.model
    [input] Enter the Java package name for your test cases [org.jboss.seam.tutorial.weblogic.action.test] [org.jboss.seam.tutorial.weblogic.action.test]
org.jboss.seam.tutorial.weblogic.test
    [input] What kind of database are you using? [hsql]  ([hsql], mysql, oracle, postgres, mssql, db2, sybase, enterprisedb, h2)

    [input] Enter the Hibernate dialect for your database [org.hibernate.dialect.HSQLDialect] [org.hibernate.dialect.HSQLDialect]

    [input] Enter the filesystem path to the JDBC driver jar [lib/hsqldb.jar] [lib/hsqldb.jar]

    [input] Enter JDBC driver class for your database [org.hsqldb.jdbcDriver] [org.hsqldb.jdbcDriver]

    [input] Enter the JDBC URL for your database [jdbc:hsqldb:.] [jdbc:hsqldb:.]

    [input] Enter database username [sa] [sa]

    [input] Enter database password [] []

    [input] Enter the database schema name (it is OK to leave this blank) [] []

    [input] Enter the database catalog name (it is OK to leave this blank) [] []

    [input] Are you working with tables that already exist in the database? [n]  (y, [n], )

    [input] Do you want to drop and recreate the database tables and data in import.sql each time you deploy? [n]  (y, [n], )

    [input] Enter your ICEfaces home directory (leave blank to omit ICEfaces) [] []

[propertyfile] Creating new property file: /rhdev/projects/jboss-seam/cvs-head/jboss-seam/seam-gen/build.properties
     [echo] Installing JDBC driver jar to JBoss server
     [copy] Copying 1 file to /home/jbalunas/jboss/jboss-4.2.2.GA/server/default/lib
     [echo] Type 'seam create-project' to create the new project

BUILD SUCCESSFUL]]></programlisting>
            </para>
         <para> Type <literal>./seam new-project</literal> to create your
            project and <literal>cd
            /home/jbalunas/workspace/weblogic_example</literal> to see
            the newly created project. </para>
      </section>
      
      <section>
         <title>What to change for Weblogic 10.X</title>
         <para>First we change and delete some configuration files, then we
            update the libraries that are deployed with the
            application.</para>
         
         <section>
            <title>Configuration file changes</title>
            <para>
               <variablelist>
                  <varlistentry>
                     <term> <literal>build.xml</literal>
                     </term>
                     <listitem>
                        <itemizedlist>
                           <listitem>
                              <para>Change the default target to
                                 <literal>archive</literal> (we aren't
                                 going to cover automatic deployment to
                                 Weblogic).
                                 
                                 
                                 <programlisting><![CDATA[<project name="weblogic_example" default="archive" basedir=".">]]></programlisting>
                                 </para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <literal>resources/META-INF/persistence-dev.xml</literal>
                     </term>
                     <listitem>
                        <itemizedlist>
                           <listitem>
                              <para> Alter the
                                 <literal>jta-data-source</literal> to
                                 be <literal>seam-gen-ds</literal> (and
                                 use this as the
                                 <literal>jndi-name</literal> when
                                 creating the data source in Weblogic's
                                 admin console)</para>
                           </listitem>
                           <listitem>
                              <para> Add/modify the properties below. We
                                 need an older version of the
                                 <literal>hibernate.query.factory_class</literal>
                                 property because Weblogic 10.x ships with
                                 an older version of the
                                 <literal>ANTLR</literal>
                                 libraries.</para>
                              
                              
                              <programlisting><![CDATA[<property name="hibernate.cache.provider_class" 
    value="org.hibernate.cache.HashtableCacheProvider"/>
<property name="hibernate.transaction.manager_lookup_class" 
    value="org.hibernate.transaction.WeblogicTransactionManagerLookup"/>
<property name="hibernate.query.factory_class" 
    value="org.hibernate.hql.classic.ClassicQueryTranslatorFactory"/>]]></programlisting>
                           </listitem>
                           <listitem>
                              <para> Remove the JBoss AS specific method of
                                 exposing the EntityManagerFactory:
                                 </para>
                              
                              
                              <programlisting><![CDATA[<property 
 name="jboss.entity.manager.factory.jndi.name" 
 value="java:/weblogic_exampleEntityManagerFactory">]]></programlisting>
                           </listitem>
                           <listitem>
                              <para> You'll need to alter
                                 <literal>persistence-prod.xml</literal>
                                 as well if you want to deploy to Weblogic
                                 using the prod profile. </para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term>
                        <literal>resources/WEB-INF/jboss-app.xml</literal>
                     </term>
                     <listitem>
                        <para> You can delete this file as we aren't deploying
                           to JBoss AS ( <literal>jboss-app.xml</literal>
                           is used to enable classloading isolation in JBoss
                           AS) </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term> <literal>resources/*-ds.xml</literal>
                     </term>
                     <listitem>
                        <para> You can delete these files as we aren't
                           deploying to JBoss AS. These files define
                           datasources in JBoss AS, in Weblogic we will use the
                           administration console.</para>
                     </listitem>
                  </varlistentry>
               </variablelist> </para>
         </section>
         <section id="weblogic-seam-gen-lib-changes">
            <title>Library changes</title>
            <para>The <literal>seam-gen</literal> application has very
               similar library dependencies as the <literal>jpa</literal>
               example above. See <xref linkend="weblogic-jpa-diff"/>.
               Below is the changes that are needed to get then in this
               application.</para>
            
            <itemizedlist>
               
               <listitem>
                  <para>Missing jars &#8212; There are two libraries that
                     <literal>seam-gen</literal> does not provide by
                     default. These need to be copied into your projects
                     <literal>lib</literal> directory manually.
                     <itemizedlist>
                        <listitem>
                           <para>jboss-archive-browsing.jar &#8212; can
                              be found in the
                              <literal>@SEAM_DIST/examples/jpa/lib</literal>
                              directory. </para>
                        </listitem>
                        <listitem>
                           <para>el-ri.jar &#8212; is also found in the
                              <literal>@SEAM_DIST/examples/jpa/lib</literal>
                              directory. </para>
                        </listitem>
                     </itemizedlist> </para>
               </listitem>
               <listitem>
                  <para>build.xml &#8212; Now we need to adjust the
                     <literal>build.xml</literal>. Find the target
                     <literal>war</literal> and add the following to the end
                     of the target.
                     
                     
                     <programlisting><![CDATA[<copy todir="${war.dir}/WEB-INF/lib">
                  <fileset dir="${lib.dir}">
                     <!--JSF implementation -->
                     <include name="jsf-api.jar" />
                     <include name="jsf-impl.jar" />
                     
                     <!-- Misc 3rd party -->
                     <include name="commons-logging.jar" />
                     <include name="dom4j.jar" />
                     <include name="javassist.jar" />
                     <include name="cglib.jar" />
                     <include name="antlr.jar" />
                     
                     <!-- Hibernate --> 
                     <include name="hibernate.jar" />
                     <include name="hibernate-commons-annotations.jar" />
                     <include name="hibernate-annotations.jar" />
                     <include name="hibernate-entitymanager.jar" />
                     <include name="hibernate-validator.jar" />
                     <include name="jboss-archive-browsing.jar" />
                     <include name="persistence-api.jar" />
                     
                     <!-- Needed for Drools -->
                     <include name="core.jar"/>
                  </fileset>
              </copy>]]></programlisting>
                     </para>
               </listitem>
            </itemizedlist>
            
         </section>
         
         <section>
            <title><literal>seam-gen</literal> development profile
               issue</title>
            <para>There is currently an issue with the behavior of the
               <literal>seam-gen WAR</literal> application when built using
               the development profile (the default) and deployed to Weblogic.
               The symptom is that the login page of the application will always
               show a <literal>login failed</literal> message.</para>
            
            <para>When the application is built using the development profile
               the <literal>action</literal> class files are places in the
               <literal>WEB-INF/dev</literal> directory. Normally these
               class files are hot deployable and are managed by Seam. This does
               not happen on Weblogic (see <ulink
                  url="http://jira.jboss.com/jira/browse/JBSEAM-2455">
               jira JBSEAM-2455</ulink> for details and status.</para>
            
            <para>To workaround this a change you need to modify the
               <literal>build-dev.properties</literal> file. Simply
               remove the property
               <literal>action.dir=WEB-INF/dev</literal>.</para>
         </section>
         
      </section>
      
      <section>
         <title>Building and Deploying your application</title>
         <para>Finally all that's left is deploying the application. This
            involves setting up a data source, building the app, and deploying
            it.</para>
         
         <section>
            <title>Setting up the data source</title>
            <para>Configuring the datasource is very similar to the jee5 <xref
                  linkend="weblogic-hsql-jee5-ds"/>. Except for what is
               listed here follow that instruction from the link.
               <itemizedlist>
                  <listitem>
                     <para>DataSource Name:
                        <literal>seam-gen-ds</literal></para>
                  </listitem>
                  <listitem>
                     <para>JNDI Name: <literal>seam-gen-ds</literal>
                        </para>
                  </listitem>
               </itemizedlist> </para>
         </section>
         <section>
            <title>Building the application</title>
            <para>This is as easy as typing <literal>ant</literal> in the
               projects base directory.</para>
         </section>
         <section>
            <title>Deploying the example</title>
            
            <para>When we installed Weblogic following <xref
                  linkend="weblogic-domain"/> we chose to have the domain in
               development mode. This means to deploy the application all we
               need to do is copy it into the autodeploy directory. There are some
               know issues with autodeploy on weblogic that may cause a
               <literal>NoClassDefFoundException</literal> while
               redeploying this application. If this happens just restart the
               Weblogic server.
               
               
               <programlisting>cp  ./dist/weblogic_example.war /home/jbalunas/bea/user_projects/domains/seam_examples/autodeploy</programlisting></para>
            
            <para>Check out the application at the following
               <literal>http://localhost:7001/weblogic_example/</literal>
               .</para>
         </section>
      </section>
   </section>
   
</chapter>