<chapter id="tutorial">
  <title>Seam Tutorial</title>
  
  <section id="try-examples">
    <title>Try the examples</title>
    
    <indexterm><primary>compile example</primary></indexterm>
    <indexterm><primary>example</primary><secondary>compile</secondary></indexterm>
    <indexterm><primary>build example</primary></indexterm>
    <indexterm><primary>example</primary><secondary>build</secondary></indexterm>
    
    <para>
      In this tutorial, we'll assume that you have checked out <literal>jboss-seam-head</literal>
      as explained in <xref linkend="installation"/>, or simply unzipped the Seam distribution.
    </para>
    
    <para>
      The directory structure of the example applications follow this pattern:
    </para>

     <itemizedlist>
            <listitem>
              <para>
                  Resources, such as deployment descriptors and web pages may be found in
                  <filename>examples/<replaceable>registration</replaceable>/resources</filename>
               </para>
            </listitem>
            <listitem>
               <para>
                  Java source code may be found in
                  <filename>examples/<replaceable>registration</replaceable>/src</filename>
               </para>
            </listitem>
            <listitem>
               <para>
                  The Ant build script is
                  <filename>examples/<replaceable>registration</replaceable>/build.xml</filename>
               </para>
            </listitem>
        </itemizedlist>
        
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/FileSystem.png" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/FileSystem.png" align="center"/>
            </imageobject>
        </mediaobject>

   <section>
       <title>Compiling the examples</title>
       
       <para>
           First, make sure you have Ant correctly installed, with <literal>$ANT_HOME</literal>
           and <literal>$JAVA_HOME</literal> set correctly. Next, make sure <literal>$JBOSS_HOME</literal> 
           is set correctly for your JBoss 4.0.3 installation.
       </para>
       
       <para>
            Now, launch the ant build script by typing <literal>ant</literal> in 
            <filename>examples/<replaceable>registration</replaceable></filename>. 
            You should see something like this:
        </para>
     
    <example>    
            <screen><prompt>~/Workspace/jboss-seam/examples/<replaceable>registration</replaceable>$</prompt> <userinput>ant</userinput>
Buildfile: build.xml

prepare:
[mkdir] Created dir: /home/user/Workspace/jboss-seam/examples/registration/output
[mkdir] Created dir: /home/user/Workspace/jboss-seam/examples/registration/output/classes
[mkdir] Created dir: /home/user/Workspace/jboss-seam/examples/registration/output/war

compile: <co id="registration-build-compile"/>
[javac] Compiling 3 source files to /home/user/Workspace/jboss-seam/examples/registration/output/classes

ejb3: <co id="registration-build-ejb3"/>
[jar] Building jar: /home/user/Workspace/jboss-seam/examples/registration/output/jboss-seam-registration.ejb3

war: <co id="registration-build-war"/>
[jar] Building jar: /home/user/Workspace/jboss-seam/examples/registration/output/jboss-seam-registration.war

ear: <co id="registration-build-ear"/>
[jar] Building jar: /home/user/Workspace/jboss-seam/examples/registration/output/jboss-seam-registration.ear

deploy: <co id="registration-build-deploy"/>
[copy] Copying 1 file to /home/user/Workspace/jboss-head/build/output/jboss-5.0.0alpha/server/default/deploy

BUILD SUCCESSFUL
Total time: 2 seconds</screen>
            <calloutlist>
                <callout arearefs="registration-build-compile">
                    <para>Compiles all the Java classes</para>
                </callout>
                <callout arearefs="registration-build-ejb3">
                    <para>Builds the EJB3 archive</para>
                </callout>
                <callout arearefs="registration-build-war">
                    <para>Builds the WAR archive</para>
                </callout>
                <callout arearefs="registration-build-ear">
                    <para>Package the EJB3 and WAR archives into an EAR</para>
                </callout>
                <callout arearefs="registration-build-deploy">
                    <para>
                        Copies the EAR to the deploy directory of the JBoss instance defined by
                        <literal>$JBOSS_HOME</literal>
                    </para>
                </callout>
            </calloutlist>
        </example>
        
    </section>
        
  </section>
  
  <section id="registration-example">
    <title>Your first Seam application: the registration example</title>

    <indexterm id="registration-example-range" class="start-of-range">
        <primary>example</primary><secondary>registration example</secondary>
    </indexterm>

    <para>
        The registration example is a fairly trivial application that lets a new user store
        his username, real name and password in the database. The example isn't intended to
        show off all of the cool functionality of Seam. However, it demonstrates the use of
        an EJB3 session bean as a JSF action listener, and basic configuration of Seam.
    </para>
    
    <para>
        We'll go slowly, since we realize you might not yet be familiar with EJB 3.0.
    </para>
        
    <section>
      <title>Running the example</title>
      
      <indexterm><primary>running example</primary></indexterm>
      <indexterm><primary>example</primary><secondary>running</secondary></indexterm>
      
      <para>
        Start JBoss by typing <literal>bin/run.sh</literal> in the <literal>$JBOSS_HOME</literal>
        directory.
      </para>
      
      <para>
        Now point your browser to <ulink url="http://localhost:8080/seam-registration/faces/register.jsp">
        <literal>http://localhost:8080/seam-<replaceable>registration</replaceable>/faces/<replaceable>register.jsp</replaceable></literal>
        </ulink>
      </para>

      <para>
        The page displays a very basic form with three input fields. Try filling them 
        in and then submitting the form.
      </para>

      <para>
        Now open the HSQL Database Manager by going to the
        <ulink url="http://localhost:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss%3Aservice%3DHypersonic%2Cdatabase%3DlocalDB">JBoss JMX console</ulink> 
        and pressing the <mousebutton>invoke</mousebutton> button under the <literal>startDatabaseManager</literal> method.
      </para>
      
      <para>
        Type in the SQL query <literal>SELECT * FROM USERS</literal> and click
        <mousebutton>Execute SQL Statement</mousebutton>. You should see the 
        data you just entered.
      </para>
      
      <screenshot>
        <screeninfo>HSQL database manager</screeninfo>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/HSQLDatabaseManager.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="../shared/images/HSQLDatabaseManager.png" align="center"/>
          </imageobject>
        </mediaobject>
      </screenshot>
            

    </section>

    <section>
      <title>Understanding the code</title>

      <para>
          Let's take a look at the code, starting from the "bottom".
      </para>
      
      <section>
        <title>The entity bean: <literal>User.java</literal></title>

        <para>
            We need an EJB entity bean for user data. This class defines
            <emphasis>persistence</emphasis> and <emphasis>validation</emphasis>
            declaratively, via annotations.
        </para>

        <example>
            <programlistingco>
                <areaspec>
                    <area id="registration-entity-annotation" coords="1"/>
                    <area id="registration-name-annotation" coords="2"/>
                    <area id="registration-scope-annotation" coords="3"/>
                    <area id="registration-table-annotation" coords="4"/>
                    <area id="registration-attributes" coords="9"/>
                    <area id="registration-empty-constructor" coords="20"/>
                    <area id="registration-notnull" coords="22"/>
                    <area id="registration-accessors" coords="23"/>
                    <area id="registration-length" coords="33"/>
                    <area id="registration-id-annotation" coords="44"/>
                </areaspec>
                <programlisting><![CDATA[@Entity
@Name("user")
@Scope(SESSION)
@Table(name="users")
public class User implements Serializable
{
   private static final long serialVersionUID = 1881413500711441951L;
   
   private String username;
   private String password;
   private String name;
   
   public User(String name, String password, String username)
   {
      this.name = name;
      this.password = password;
      this.username = username;
   }
   
   public User() {}
   
   @NotNull
   public String getName()
   {
      return name;
   }

   public void setName(String name)
   {
      this.name = name;
   }
   
   @NotNull @Length(min=5, max=15)
   public String getPassword()
   {
      return password;
   }

   public void setPassword(String password)
   {
      this.password = password;
   }
   
   @Id @NotNull @Length(min=5, max=15)
   public String getUsername()
   {
      return username;
   }

   public void setUsername(String username)
   {
      this.username = username;
   }
   
   public String toString() 
   {
      return "User(" + username + ")";
   }
}]]></programlisting>
                <calloutlist>
                    <callout arearefs="registration-entity-annotation">
                        <indexterm>
                            <primary>Annotation</primary>
                            <secondary>@javax.persistence.Entity</secondary>
                        </indexterm>
                        <para>
                            The <literal>User</literal> class is an entity bean that represents persistent
                            data in the database. The EJB3 specification requires that we mark entity
                            beans with the <literal>@Entity</literal> annotation.
                        </para>
                    </callout>
                    <callout arearefs="registration-name-annotation">
                        <indexterm>
                            <primary>Annotation</primary>
                            <secondary>@org.jboss.seam.annotation.Name</secondary>
                        </indexterm>
                        <para>
                            A Seam component needs a <emphasis>component name</emphasis> specified by the 
                            <link linkend="name-annotation"><literal>@Name</literal></link> annotation. This 
                            name must be unique within the Seam application.
                        </para>
                    </callout>
                    <callout arearefs="registration-scope-annotation">
                        <indexterm>
                            <primary>Annotation</primary>
                            <secondary>@org.jboss.seam.annotation.Scope</secondary>
                        </indexterm>
                        <para>
                            A Seam component has a default context. This is defined using the 
                            <link linkend="scope-annotation"><literal>@Scope</literal></link>
                            annotation. The <literal>User</literal> bean is a session scoped component.
                        </para>
                    </callout>
                    <callout arearefs="registration-table-annotation">
                        <indexterm>
                            <primary>Annotation</primary>
                            <secondary>@javax.persistence.Table</secondary>
                        </indexterm>
                        <para>
                            The EJB standard <literal>@Table</literal> annotation indicates that 
                            the <literal>User</literal> class is persistent to the <literal>users</literal>
                            table.
                        </para>
                    </callout>
                    <callout arearefs="registration-attributes">
                        <para>
                            <literal>name</literal>, <literal>password</literal> and
                            <literal>username</literal> are the persistent attributes of the 
                            entity bean.
                        </para>
                    </callout>
                    <callout arearefs="registration-empty-constructor">
                        <para>
                            An empty constructor is both required by both the EJB specification and 
                            by Seam.
                        </para>
                    </callout>
                    <callout arearefs="registration-notnull">
                        <para>
                            The <literal>@NotNull</literal> annotation is part of the Hibernate
                            Validator framework. Seam integrates Hibernate Validator and lets 
                            you use it for data validation (even if you are not using Hibernate
                            for persistence).
                        </para>
                    </callout>
                    <callout arearefs="registration-accessors">
                        <para>
                            We require accessor methods for the persistent attributes of the bean.
                        </para>
                    </callout>
                    <callout arearefs="registration-length">
                        <para>
                            The <literal>@Length</literal> annotation is also part of the Hibernate
                            Validator framework.
                        </para>
                    </callout>
                    <callout arearefs="registration-id-annotation">
                        <indexterm>
                            <primary>Annotation</primary>
                            <secondary>@javax.persistence.Id</secondary>
                        </indexterm>
                        <para>
                            The EJB standard <literal>@Id</literal> annotation indicates that this 
                            attribute is the primary key.
                        </para>
                    </callout>
                </calloutlist>
            </programlistingco>
        </example>
                
      </section>
      
      <section>
        <title>The stateless session bean class: <literal>RegisterAction.java</literal></title>
        
        <para>
            Most Seam application use stateless session beans as JSF action listeners. We have
            exactly one action in our application, and one session bean method attached to it.
        </para>
        
        <para>
            This is the only really interesting code in the example!
        </para>
        
        <example>
            <programlistingco>
                <areaspec>
                    <area id="registration-stateless-annotation" coords="1"/>
                    <area id="registration-interceptor-annotation" coords="3"/>
                    <area id="registration-in-annotation" coords="8"/>
                    <area id="registration-valid-annotation" coords="8"/>
                    <area id="registration-persistencecontext-annotation" coords="11"/>
                    <area id="registration-ifinvalid-annotation" coords="17"/>
                </areaspec>    
            <programlisting><![CDATA[@Stateless
@Scope(EVENT)
@Name("register")
@Interceptor(SeamInterceptor.class)
public class RegisterAction implements Register
{

   @In @Valid
   private User user;
   
   @PersistenceContext
   private EntityManager em;
   
   @In
   private FacesContext facesContext;
   
   @IfInvalid(outcome=Outcome.REDISPLAY)
   public String register()
   {
      List existing = em.createQuery("select username from User where username=:username")
         .setParameter("username", user.getUsername())
         .getResultList();
      if (existing.size()==0)
      {
         em.persist(user);
         return "success";
      }
      else
      {
         facesContext.addMessage(null, new FacesMessage("username already exists"));
         return null;
      }
   }

}]]></programlisting>
                    
            <calloutlist>
                <callout arearefs="registration-stateless-annotation">
                    <indexterm>
                        <primary>Annotation</primary>
                        <secondary>@javax.ejb.Stateful</secondary>
                    </indexterm>
                    <para>
                        The EJB standard <literal>@Stateless</literal> annotation marks this class 
                        as stateless session bean.
                    </para>
                </callout>
                <callout arearefs="registration-interceptor-annotation">
                    <indexterm>
                        <primary>Annotation</primary>
                        <secondary>@javax.ejb.Interceptor</secondary>
                    </indexterm>
                    <para>
                        The <literal>SeamInterceptor</literal> EJB interceptor must be enabled for 
                        all session beans which are Seam components.
                    </para>
                </callout>
                <callout arearefs="registration-in-annotation">
                    <indexterm>
                        <primary>Annotation</primary>
                        <secondary>@org.jboss.seam.annotations.In</secondary>
                    </indexterm>
                    <para>
                        The <link linkend="in-annotation"><literal>@In</literal></link> annotation 
                        marks an attribute of the bean as injected by Seam.
                    </para>
                </callout>
                <callout arearefs="registration-valid-annotation">
                    <para>
                        The <literal>@Valid</literal> annotation is provided by Hibernate Validator
                        to specify that recursive validation of related objects should occur.
                    </para>
                </callout>
                <callout arearefs="registration-persistencecontext-annotation">
                    <indexterm>
                        <primary>Annotation</primary>
                        <secondary>@javax.persistence.PersistenceContext</secondary>
                    </indexterm>
                    <para>
                        The EJB <literal>PersistenceContext</literal> annotation is used to 
                        inject the EJB3 entity manager.
                    </para>
                </callout>
                <callout arearefs="registration-ifinvalid-annotation">
                    <indexterm>
                        <primary>Annotation</primary>
                        <secondary>@org.jboss.seam.annotations.IfInvalid</secondary>
                    </indexterm>
                    <para>
                        The <literal>@IfInvalid</literal> annotation tells Seam to
                        validate the component state using Hibernate Validator before
                        invoking the annotated action listener method, and return
                        a different JSF outcome if the state is invalid.
                    </para>
                </callout>
            </calloutlist>
            </programlistingco>
        </example>
        
        <para>
            Our session bean uses the standard EJB3 <literal>EntityManager</literal>
            API to interact with the database. It uses Seam's Hibernate Validator
            integration to perform validation of the data in the <literal>User</literal>
            bean.
        </para>
      
      </section>
      
      <section>
        <title>The session bean local interface: <literal>Register.java</literal></title>
        
        <para>Naturally, our session bean needs a local interface.</para>

        <indexterm><primary>Annotation</primary><secondary>@javax.ejb.Local</secondary></indexterm>
        
        <example>
          <programlisting><![CDATA[@Local
public interface Register
{
   public String register();
}]]></programlisting>
        </example>
        
        <para>
            Stop yawning!
        </para>
                    

      </section>
      
      <section>
        <title>The web deployment description: <literal>web.xml</literal></title>
        
        <indexterm><primary>web.xml</primary></indexterm>
        <indexterm><primary>descriptor file</primary><secondary>web.xml</secondary></indexterm>
        
        <para>
            The presentation layer for our mini-application will be deployed in a WAR.
            So we'll need a web deployment descriptor.
        </para>
                
        <example>
          <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" 
    xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">


    <!-- Seam -->
    
    <listener>
        <listener-class>org.jboss.seam.servlet.SeamListener</listener-class>
    </listener>

    <!-- MyFaces -->

    <listener>
        <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
    </listener>
    
    <context-param>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
        <param-value>client</param-value>
    </context-param>

    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Faces Servlet Mapping -->
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>/faces/*</url-pattern>
    </servlet-mapping>
    
</web-app>]]></programlisting>
        </example>
        
        <para>
            This <literal>web.xml</literal> file configures Seam and MyFaces. The configuration you
            see here is pretty much identical in all Seam applications. 
        </para>
        
        <para>
            (OK, you're allowed to yawn now.)
        </para>
      </section>
      
      <section>
        <title>The JSF configration: <literal>faces-config.xml</literal></title>
        
        <indexterm><primary>faces-config.xml</primary></indexterm>
        <indexterm><primary>descriptor file</primary><secondary>faces-config.xml</secondary></indexterm>
        
        <para>
            All Seam applications use JSF views as the presentation layer. So we'll need
            <literal>faces-config.xml</literal>.
        </para>
        
        <example id="registration-faces-config-xml">
          <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE faces-config 
PUBLIC "-//Sun Microsystems, Inc.//DTD JavaServer Faces Config 1.0//EN"
                            "http://java.sun.com/dtd/web-facesconfig_1_0.dtd">
<faces-config>

    <navigation-rule>
        <navigation-case>
            <from-outcome>success</from-outcome>
            <to-view-id>/registered.jsp</to-view-id>
        </navigation-case>
    </navigation-rule>

    <!-- Same for all Seam applications -->
    
    <application>
        <variable-resolver>org.jboss.seam.jsf.SeamVariableResolver</variable-resolver>
    </application>
    
    <lifecycle>
        <phase-listener>org.jboss.seam.jsf.SeamPhaseListener</phase-listener>
    </lifecycle>

</faces-config>]]></programlisting>
        </example>
        
        <indexterm><primary>variable resolver</primary></indexterm>
        <indexterm><primary>phase listener</primary></indexterm>
        
        <para>
            The <literal>jsf-config.xml</literal> file integrates Seam into JSF and specifies the 
            single navigation rule for our registration application. Note that there are no managed 
            bean declarations (they are not needed with Seam).
        </para>
        
      </section>
      
      <section>
        <title>The view: <literal>register.jsp</literal> and <literal>registered.jsp</literal></title>
        
        <para>
            The view pages for a Seam application could be implemented using any technology that
            supports JSF. In this example we use JSP, since it is familiar to most developers
            and since we have minimal requirements here anyway. (But if you take our advice, you'll 
            use Facelets for your own applications.)
        </para>
        
        <example id="registration-simpleform">
          <programlisting><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<html>
 <head>
  <title>Register New User</title>
 </head>
 <body>
  <f:view>
   <h:form>
     <table border="0">
       <tr>
         <td>Username</td>
         <td><h:inputText value="#{user.username}"/></td>
       </tr>
       <tr>
         <td>Real Name</td>
         <td><h:inputText value="#{user.name}"/></td>
       </tr>
       <tr>
         <td>Password</td>
         <td><h:inputSecret value="#{user.password}"/></td>
       </tr>
     </table>
     <h:messages/>
     <h:commandButton type="submit" value="Register" action="#{register.register}"/>
   </h:form>
  </f:view>
 </body>
</html>]]></programlisting>
        </example>
        
        <example id="registration-simplepage">
          <programlisting><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<html>
 <head>
  <title>Successfully Registered New User</title>
 </head>
 <body>
  <f:view>
    Welcome, <h:outputText value="#{user.name}"/>, 
    you are successfully registered as <h:outputText value="#{user.username}"/>.
  </f:view>
 </body>
</html>]]></programlisting>
        </example>        
        
        
        <para>
            These are boring old JSP pages using standard JSF components. There is
            nothing specific to Seam here.
        </para>

      </section>

      <section>
        <title>The EAR deployment descriptor: <literal>application.xml</literal></title>
        
        <indexterm><primary>application.xml</primary></indexterm>
        <indexterm><primary>descriptor file</primary><secondary>application.xml</secondary></indexterm>
        
        <para>
            Finally, since our application is deployed as an EAR, we need a deployment descriptor
            there, too.
        </para>
        
        <example id="registration-application-xml">
          <programlisting><![CDATA[<application>
    <display-name>Seam</display-name>

    <module>
        <web>
            <web-uri>jboss-seam-registration.war</web-uri>
            <context-root>/seam-registration</context-root>
        </web>
    </module>
    <module>
        <ejb>jboss-seam-registration.ejb3</ejb>
    </module>
    
</application>]]></programlisting>
        </example>
        
        <para>
            This deployment descriptor links modules in the enterprise archive and binds the web application 
            to the context root <literal>/seam-registration</literal>.
        </para>
        
      </section>
              
        <para>
            We've now seen <emphasis>all</emphasis> the files in the entire application!
        </para>
    
    </section>
    
    <section>
      <title>How it works</title>

      <para>
          When the form is submitted, JSF asks Seam to resolve the variable named
          <literal>user</literal>. Since there is no value already bound to that
          name (in any Seam context), Seam instantiates the <literal>user</literal>
          component, and returns the resulting <literal>User</literal> entity
          bean instance to JSF after storing it in the Seam session context. JSF 
          binds the form input values to properties of the <literal>User</literal> 
          entity bean.
      </para>
      <para>
          Next, JSF asks Seam to resolve the variable named <literal>register</literal>.
          Seam finds the <literal>RegisterAction</literal> stateless session bean
          in the stateless context and returns it. JSF invokes the <literal>register()</literal>
          action listener method.
      </para>
      <para>
          Seam intercepts the method call, injects the <literal>User</literal> entity
          from the session context, and the current <literal>FacesContext</literal> 
          instance, before asking Hibernate Validator to validate the session bean 
          instance (and, recursively, the <literal>User</literal> entity bean instance).
          If the state is valid, the invocation proceeds and the 
          <literal>register()</literal> method is called. If not, Seam returns a 
          <literal>null</literal> outcome and JSF redisplays the page.
      </para>
      <para>
          When JSF comes to render the next JSP page, it asks Seam to resolve the
          variable named <literal>user</literal> and uses property values of the 
          returned <literal>User</literal> entity from Seam's session scope.
      </para>

      <indexterm startref="registration-example-range" class="endofrange"/>

    </section>

  </section>

  <section id="booking">
    <title>A complete Seam application: the booking example</title>
    
    <indexterm id="booking-example" class="start-of-range">
        <primary>example</primary><secondary>Booking example</secondary>
    </indexterm>
    
    <section>
      <title>Introduction</title>
      
      <para>
          The booking application is a complete hotel room reservation system
          incorporating the following features: 
      </para>
      
      <itemizedlist>
        <listitem>
          <para>User registration</para>
        </listitem>
        <listitem>
          <para>Login</para>
        </listitem>
        <listitem>
          <para>Logout</para>
        </listitem>
        <listitem>
          <para>Set password</para>
        </listitem>
        <listitem>
          <para>Hotel search</para>
        </listitem>
        <listitem>
          <para>Hotel selection</para>
        </listitem>
        <listitem>
          <para>Room reservation</para>
        </listitem>
        <listitem>
          <para>Reservation confirmation</para>
        </listitem>
        <listitem>
          <para>Existing reservation list</para>
        </listitem>
          </itemizedlist>
          
      <screenshot>
        <screeninfo>Booking example</screeninfo>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/booking.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="../shared/images/booking.png" align="center"/>
          </imageobject>
        </mediaobject>
      </screenshot>
      
      <para>
          The booking application uses JSF, EJB 3.0 and Seam, together with Facelets for the
          view. There is also a port of this application to JSF, Facelets, Seam, JavaBeans
          and Hibernate3.
      </para>

      <para>
          One of the things you'll notice if you play with this application for long enough
          is that it is extremely <emphasis>robust</emphasis>. You can play with back buttons
          and browser refresh and opening multiple windows and entering nonsensical data as 
          much as you like and you will find it very difficult to make the application crash. 
          You might think that we spent weeks testing and fixing bugs to achive this. Actually, 
          this is not the case. Seam was designed to make it very straightforward to build
          robust web applications and a lot of robustness that you are probably used to having to
          code yourself comes naturally and automatically with Seam.
      </para>
      <para>
          As you browse the sourcecode of the example application, and learn how the application
          works, observe how the declarative state management and integrated validation has been
          used to achieve this robustness.
      </para>
      
    </section>
    
    <section>
      <title>Overview of the booking example</title>

      <para>
          The project structure is identical to the previous one, to install and deploy this
          application, please refer to <xref linkend="try-examples"/>. Just ten classes (plus six 
          session beans local interfaces and 1 annotation interface) where used to implement 
          this application. 
      </para>
      
      <para>
          Six session bean action listeners contain all the business logic for the listed features.
      </para>
      
      <itemizedlist>
          <listitem>
              <literal>BookingListAction</literal> retrieves existing bookings for the currently
              logged in user.
          </listitem>
          <listitem>
              <literal>ChangePasswordAction</literal> updates the password of the currently logged
              in user.
          </listitem>
          <listitem>
              <literal>HotelBookingAction</literal> implements the core functionality of the application:
              Hotel room searching, selection, booking and booking confirmation. This functionality is
              implemented as a <emphasis>conversation</emphasis>, so this is the most interesting class
              in the application. 
          </listitem>
          <listitem>
              <literal>LoginAction</literal> validates the login details and retrieves the logged 
              in user.
          </listitem>
          <listitem>
              <literal>LogoutAction</literal> ends the login session.
          </listitem>
          <listitem>
              <literal>RegisterAction</literal> registers a new system user.
          </listitem>
      </itemizedlist> 
                
      <para>
          Three entity beans implement the application's persistent domain model.
      </para>
      
      <itemizedlist>
          <listitem>
              <literal>Hotel</literal> is an entity bean that represent a Hotel
          </listitem>
          <listitem>
              <literal>Booking</literal> is an entity bean that represents an existing booking
          </listitem>
          <listitem>
              <literal>User</literal> is an entity bean to represents a user who can make 
              hotel bookings
          </listitem>
      </itemizedlist>
      
      <para>
          Finally, the <literal>LoggedIn</literal> annotation and the <literal>LoggedInInterceptor</literal>
          are used to protect actions that require a logged in user.
      </para>
      
    </section>

    <indexterm startref="booking-example" class="endofrange"/>

  </section>

  <section id="dvdstore">
    <title>A complete Seam application: the DVD store example</title>
    <para>TODO</para>
  </section>
  
</chapter>
