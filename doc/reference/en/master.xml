<?xml version='1.0' encoding="iso-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3CR3//EN"
                      "../support/docbook-dtd/docbookx.dtd"
[
<!ENTITY tutorial               SYSTEM "modules/tutorial.xml">
<!ENTITY gettingstarted         SYSTEM "modules/gettingstarted.xml">
<!ENTITY concepts               SYSTEM "modules/concepts.xml">
<!ENTITY xml                    SYSTEM "modules/xml.xml">
<!ENTITY events                 SYSTEM "modules/events.xml">
<!ENTITY conversations          SYSTEM "modules/conversations.xml">
<!ENTITY jbpm                   SYSTEM "modules/jbpm.xml">
<!ENTITY persistence            SYSTEM "modules/persistence.xml">
<!ENTITY validation             SYSTEM "modules/validation.xml">
<!ENTITY groovy                 SYSTEM "modules/groovy.xml">
<!ENTITY framework              SYSTEM "modules/framework.xml">
<!ENTITY drools                 SYSTEM "modules/drools.xml">
<!ENTITY security               SYSTEM "modules/security.xml">
<!ENTITY i18n                   SYSTEM "modules/i18n.xml">
<!ENTITY text                   SYSTEM "modules/text.xml">
<!ENTITY itext                  SYSTEM "modules/itext.xml">
<!ENTITY mail                   SYSTEM "modules/mail.xml">
<!ENTITY jms                    SYSTEM "modules/jms.xml">
<!ENTITY cache                  SYSTEM "modules/cache.xml">
<!ENTITY remoting               SYSTEM "modules/remoting.xml">
<!ENTITY spring                 SYSTEM "modules/spring.xml">
<!ENTITY configuration          SYSTEM "modules/configuration.xml">
<!ENTITY annotations            SYSTEM "modules/annotations.xml">
<!ENTITY components             SYSTEM "modules/components.xml">
<!ENTITY controls               SYSTEM "modules/controls.xml">
<!ENTITY elenhancements         SYSTEM "modules/elenhancements.xml">
<!ENTITY testing                SYSTEM "modules/testing.xml">
<!ENTITY tools                  SYSTEM "modules/tools.xml">
]>

<book lang="en">
    <bookinfo>
        <title>Seam - Contextual Components</title>
        <subtitle>A Framework for Java EE 5</subtitle>
        <releaseinfo>1.3.0.A1</releaseinfo>
    </bookinfo>

    <toc/>
    
    <preface>
        <title>Introduction to JBoss Seam</title>

        <para>
            Seam is an application framework for Java EE 5. It is inspired by the following principles:
        </para>

        <variablelist>
            <varlistentry>
                <term><emphasis>Integrate JSF with EJB 3.0</emphasis></term>
                <listitem>
                    <para>
                        JSF and EJB 3.0 are two of the best new features of Java EE 5. EJB3 is a brand new
                        component model for server side business and persistence logic. Meanwhile, JSF is a
                        great component model for the presentation tier. Unfortunately, neither component
                        model is able to solve all problems in computing by itself. Indeed, JSF and EJB3
                        work best used together. But the Java EE 5 specification provides no standard way
                        to integrate the two component models. Fortunately, the creators of both models
                        foresaw this situation and provided standard extension points to allow extension
                        and integration of other solutions.
                    </para>
                    <para>
                        Seam unifies the component models of JSF and EJB3, eliminating glue code, and letting
                        the developer think about the business problem.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Integrated AJAX</emphasis></term>
                <listitem>
                    <para>
                        Seam supports two open source JSF-based AJAX solutions: ICEfaces and Ajax4JSF. These
                        solutions let you add AJAX capability to your user interface without the need to
                        write any JavaScript code.
                    </para>
                    <para>
                        Seam also provides a built-in JavaScript remoting layer for EJB3 components. AJAX clients 
                        can easily call server-side components and subscribe to JMS topics, without the need 
                        for an intermediate action layer.
                    </para>
                    <para>
                        Neither of these approaches would work well, were it not for Seam's built-in concurrency 
                        and state management, which ensures that many concurrent fine-grained, asynchronous AJAX 
                        requests are handled safely and efficiently on the server side.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Integrate Business Process as a First Class Construct</emphasis></term>
                <listitem>
                    <para>
                        Optionally, Seam integrates transparent business process management via jBPM. You won't believe
                        how easy it is to implement complex workflows using jBPM and Seam.
                    </para>
                    <para>
                        Seam even allows definition of presentation tier conversation flow by the same means.
                    </para>
                    <para>
                        JSF provides an incredibly rich event model for the presentation tier. Seam enhances this
                        model by exposing jBPM's business process related events via exactly the same event handling
                        mechanism, providing a uniform event model for Seam's uniform component model.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>One Kind of "Stuff"</emphasis></term>
                <listitem>
                    <para>
                        Seam provides a uniform component model. A Seam component may be stateful, with 
                        the state associated to any one of a number of contexts, ranging from the 
                        long-running business process to a single web request.
                    </para>
                    <para>
                        There is no distinction between presentation tier components and business logic
                        components in Seam. It is possible to write Seam applications where "everything"
                        is an EJB. This may come as a surprise if you are used to thinking of EJBs as
                        coarse-grained, heavyweight objects that are a pain in the backside to create!
                        However, EJB 3.0 completely changes the nature of EJB from the point of view of
                        the developer. An EJB is a fine-grained object - nothing more complex than an
                        annotated JavaBean. Seam even encourages you to use session beans as JSF
                        action listeners!
                    </para>
                    <para>
                        Unlike plain Java EE or J2EE components, Seam components may <emphasis>simultaneously</emphasis>
                        access state associated with the web request and state held in transactional resources (without
                        the need to propagate web request state manually via method parameters). You might object
                        that the application layering imposed upon you by the old J2EE platform was a Good Thing.
                        Well, nothing stops you creating an equivalent layered architecture using Seam - the difference
                        is that <emphasis>you</emphasis> get to architect your own application and decide what the
                        layers are and how they work together.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Declarative State Management</emphasis></term>
                <listitem>
                    <para>
                        We are all used to the concept of declarative transaction management and J2EE declarative
                        security from EJB 2.x. EJB 3.0 even introduces declarative persistence context
                        management. These are three examples of a broader problem of managing state that is
                        associated with a particular <emphasis>context</emphasis>, while ensuring that all needed
                        cleanup occurs when the context ends. Seam takes the concept of declarative state
                        management much further and applies it to <emphasis>application state</emphasis>.
                        Traditionally, J2EE applications almost always implement state management manually, by getting
                        and setting servlet session and request attributes. This approach to state management is the
                        source of many bugs and memory leaks when applications fail to clean up session attributes,
                        or when session data associated with different workflows collides in a multi-window
                        application. Seam has the potential to almost entirely eliminate this class of bugs.
                    </para>
                    <para>
                        Declarative application state management is made possible by the richness of the
                        <emphasis>context model</emphasis> defined by Seam. Seam extends the context model defined by
                        the servlet spec&mdash;request, session, application&mdash;with two new
                        contexts&mdash;conversation and business process&mdash;that are more meaningful from the
                        point of view of the business logic.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Bijection</emphasis></term>
                <listitem>
                    <para>
                        The notion of <emphasis>Inversion of Control</emphasis> or <emphasis>dependency injection</emphasis>
                        exists in both JSF and EJB3, as well as in numerous so-called "lighweight containers". Most of
                        these containers emphasize injection of components that implement <emphasis>stateless services</emphasis>.
                        Even when injection of stateful components is supported (such as in JSF), it is virtually useless
                        for handling application state because the scope of the stateful component cannot be defined with
                        sufficient flexibility.
                    </para>
                    <para>
                        <emphasis>Bijection</emphasis> differs from IoC in that it is <emphasis>dynamic</emphasis>, 
                        <emphasis>contextual</emphasis>, and <emphasis>bidirectional</emphasis>.
                        You can think of it as a mechanism for aliasing contextual variables (names in the various contexts
                        bound to the current thread) to attributes of the component. Bijection allows auto-assembly of stateful
                        components by the container. It even allows a component to safely and easily manipulate the
                        value of a context variable, just by assigning to an attribute of the component.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Workspace Management</emphasis></term>
                <listitem>
                    <para>
                        Optionally, Seam applications may take advantage of <emphasis>workspace management</emphasis>,
                        allowing users to freely switch between different conversations (workspaces) in a single
                        browser window. Seam provides not only correct multi-window operation, but also multi-window-like
                        operation in a single window!
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Annotated POJOs Everywhere</emphasis></term>
                <listitem>
                    <para>
                        EJB 3.0 embraces annotations and "configuration by exception" as the easiest way to provide
                        information to the container in a declarative form. Unfortunately, JSF is still heavily
                        dependent on verbose XML configuration files. Seam extends the annotations provided by
                        EJB 3.0 with a set of annotations for declarative state management and declarative
                        context demarcation. This lets you eliminate the noisy JSF managed bean declarations
                        and reduce the required XML to just that information which truly belongs in XML
                        (the JSF navigation rules).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Testability as a Core Feature</emphasis></term>
                <listitem>
                    <para>
                        Seam components, being POJOs, are by nature unit testable. But for complex applications,
                        unit testing alone is insufficient. Integration testing has traditionally been a messy and
                        difficult task for Java web applications. Therefore, Seam provides for testability of Seam
                        applications as a core feature of the framework. You can easily write JUnit or TestNG tests
                        that reproduce a whole interaction with a user, exercising all components of the system
                        apart from the view (the JSP or Facelets page). You can run these tests directly inside your
                        IDE, where Seam will automatically deploy EJB components into the JBoss Embeddable EJB3
                        container.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Get started now!</emphasis></term>
                <listitem>
                    <para>
                        Seam works in any application server that supports EJB 3.0. You can even use Seam in a
                        servlet container like Tomcat, or in any J2EE application server, by leveraging the new
                        JBoss Embeddable EJB3 container.
                    </para>
                    <para>
                        However, we realize that not everyone is ready to make the switch to EJB 3.0. So, in the
                        interim, you can use Seam as a framework for applications that use JSF for presentation,
                        Hibernate (or plain JDBC) for persistence and JavaBeans for application logic. Then,
                        when you're ready to make the switch to EJB 3.0, migration will be straightforward.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/architecture.png" align="center"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="../shared/images/architecture.png" align="center"/>
          </imageobject>
        </mediaobject>

        <para>
            It turns out that the combination of Seam, JSF and EJB3 is <emphasis>the</emphasis> simplest way
            to write a complex web application in Java. You won't believe how little code is required!
        </para>

    </preface>

    &tutorial;
    &gettingstarted;
    &concepts;
    &xml;
    &events;
    &conversations;
    &jbpm;
    &persistence;
    &validation;
    &groovy;
    &framework;
    &drools;
    &security;
    &i18n;
    &text;
    &itext;
    &mail;
    &jms;
    &cache;
    &remoting;
    &spring;
    &configuration;
    &annotations;
    &components;
    &controls;
    &elenhancements;
    &testing;
    &tools;
</book>

