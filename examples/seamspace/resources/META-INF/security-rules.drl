package SeamSpacePermissions;

dialect 'mvel'

import java.security.Principal;

import org.jboss.seam.security.management.SecurityContext;
import org.jboss.seam.security.management.UserAccount;
import org.jboss.seam.security.PermissionCheck;
import org.jboss.seam.security.Role;

import org.jboss.seam.example.seamspace.BlogComment;
import org.jboss.seam.example.seamspace.Member;
import org.jboss.seam.example.seamspace.MemberAccount;
import org.jboss.seam.example.seamspace.MemberBlog;
import org.jboss.seam.example.seamspace.MemberFriend;
import org.jboss.seam.example.seamspace.MemberImage;

function Member getAccountMember(UserAccount account) {
  return ((MemberAccount) account).getMember();
}

rule ViewProfile
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "/profile.xhtml", action == "render", granted == false)
  Role(name == "admin")
then
  check.grant();
end

rule ViewImage
  no-loop
  activation-group "permissions"
when
  image: MemberImage()
  check: PermissionCheck(target == image, action == "view", granted == false)
  eval( image.getMember().getPicture() == image )
then
  check.grant();
end

rule RestrictCommentPage
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "/comment.xhtml", granted == false)
  Role(name == "user")
then
  check.grant();
end

rule CanCreateBlogComment
  no-loop
  activation-group "permissions"
when
  blog: MemberBlog()
  check: PermissionCheck(target == blog, action == "create", granted == false)
  Role(name == "user")
then
  check.grant();
end

rule CreateBlogComment
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "blogComment", action == "create", granted == false)
  Role(name == "user")
then
  check.grant();
end

rule CreateBlog
  no-loop
  activation-group "permissions"
when
  ctx: SecurityContext()
  member: Member()
  check: PermissionCheck(target == member, action == "createBlog", granted == false, eval( member.equals(getAccountMember(ctx.userAccount))))
then
  check.grant();
end

rule InsertMemberBlog
  no-loop
  activation-group "permissions"  
when
  ctx: SecurityContext()
  blog: MemberBlog(member : member, eval( member.equals(getAccountMember(ctx.userAccount))))
  check: PermissionCheck(target == blog, action == "insert", granted == false)  
then
  check.grant();
end

rule CreateFriendComment
  no-loop
  activation-group "permissions"
when
  ctx: SecurityContext()
  member: Member()
  check: PermissionCheck(target == member, action == "createFriendComment", granted == false, eval( member.isFriend(getAccountMember(ctx.userAccount))))
then
  check.grant();
end

rule CreateFriendRequest
  no-loop
  activation-group "permissions"
when
  ctx: SecurityContext()
  member: Member()
  check: PermissionCheck(target == member, action == "createFriendRequest", granted == false, eval( !member.isFriend(getAccountMember(ctx.userAccount))) )
then
  check.grant();
end

rule CreateAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "create", granted == false)
  Role(name == "admin")
then
  check.grant();
end

/*****************************************************************************************

  The Following Rules are for Identity Management
  
******************************************************************************************/

rule ReadAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "read", granted == false)
  Role(name == "admin")
then
  check.grant();
end

rule UpdateAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "update", granted == false)
  Role(name == "admin")
then
  check.grant();
end

rule DeleteAccount
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(name == "seam.account", action == "delete", granted == false)
  Role(name == "admin")
then
  check.grant();
end