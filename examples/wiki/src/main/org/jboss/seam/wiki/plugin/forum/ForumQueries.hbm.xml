<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>

    <query name="forums">
        select
            f
        from
            Directory f left join fetch f.feed
        where
            f.parent = :parentDir
        order by f.displayPosition asc
    </query>

    <query name="forumTopicPostCount">
        select
            f.id, count(distinct child), count(distinct child) + count(distinct comment)
        from
            Directory f
                left outer join f.children as child
                left outer join child.comments as comment
        where
            f.parent = :parentDir
            and child != f.defaultDocument
        group
            by f.id
    </query>

    <query name="forumLastTopic">
        select
            f.id, lt
        from
            Directory f left outer join f.children as lt left join fetch lt.createdBy u join fetch u.profile
        where
            f.parent = :parentDir
            and lt != f.defaultDocument
            and lt.displayPosition = (select max(n.displayPosition) from Node n where n.parent = f)
    </query>

    <!-- This only uses the timestamp of all comments to identify the last comment - is that enough? -->
    <query name="forumLastComment"><![CDATA[
        select
            f.id, c
        from
            Comment c left join fetch c.fromUser u join fetch u.profile, Document d, Directory f join fetch c.document
        where
            c.createdOn =
                (select max(com.createdOn) from Document doc, Comment com where
                doc.nsLeft > :nsLeft and doc.nsRight < :nsRight and doc.nsThread = :nsThread
                and com.document = doc)
            and c.document = d
            and d.parent = f
    ]]></query>

    <!-- Somewhat ugly workarounds for the missing case...when support in HQL select clause -->
    <query name="forumTopics"><![CDATA[
        select
            t,
            count(c),
            locate('forumStickyPosting', t.macros, 1),
            c2
        from
            Directory f,
            ForumTopic t
                join fetch t.createdBy u join fetch u.profile up
                left outer join t.comments c
                left outer join t.comments c2 left join fetch c2.fromUser u2 left join fetch u2.profile u2p
        where
            f = :forum
            and t.parent = f
            and t != f.defaultDocument
            and (c2.createdOn = (select max(com.createdOn) from Comment com where com.document = t) or c2 is null)
            group by t.id, t.class, t.version, t.nsLeft, t.nsRight, t.nsThread, t.parent,
                     t.areaNumber, t.createdBy, t.createdOn, t.lastModifiedBy, t.lastModifiedOn, t.menuItem, t.name, t.displayPosition,
                     t.readAccessLevel, t.revision, t.wikiname, t.writeAccessLevel, t.tags,
                     t.enableComments, t.enableCommentForm, t.enableCommentsOnFeeds, t.nameAsTitle, t.macros,
                     locate('forumStickyPosting', t.macros, 1),

                     c2.id, c2.version, c2.document, c2.subject, c2.fromUser, c2.fromUserName, c2.fromUserEmail, c2.fromUserHomepage, c2.text, c2.useWikiText, c2.createdOn,

                     u.id, u.version, u.firstname, u.lastname, u.username, u.passwordHash, u.email, u.activated, u.activationCode, u.createdOn, u.lastLoginOn, u.memberHome, u.profile,
                     up.id, up.version, up.createdOn, up.bio, up.website, up.location, up.occupation, up.signature, up.imageContentType,

                     u2.id, u2.version, u2.firstname, u2.lastname, u2.username, u2.passwordHash, u2.email, u2.activated, u2.activationCode, u2.createdOn, u.lastLoginOn, u2.memberHome, u2.profile,
                     u2p.id, u2p.version, u2p.createdOn, u2p.bio, u2p.website, u2p.location, u2p.occupation, u2p.signature, u2p.imageContentType

            order by case locate('forumStickyPosting', t.macros, 1) when '0' then '0' else '1' end desc, t.createdOn desc, c2.createdOn desc
    ]]></query>

    <query name="forumUnreadTopics"><![CDATA[
        select
            distinct t
        from ForumTopic t left join fetch t.parent left outer join t.comments c
            where
                t.createdOn > :lastLoginDate
                or
                c.createdOn > :lastLoginDate

    ]]></query>

</hibernate-mapping>