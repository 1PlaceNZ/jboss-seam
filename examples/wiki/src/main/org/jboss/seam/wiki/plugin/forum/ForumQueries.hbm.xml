<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>

    <query name="forums">
        select d.id, d
        from
            WikiDirectory d fetch all properties,
            WikiMenuItem m
        where
            d = m.directory
            and d.parent = :parentDir
        order by m.displayPosition asc
    </query>

    <query name="forumsMenuItems">
        select m
        from
            WikiMenuItem m
        where
            m.directory.parent = :parentDir
        order by m.displayPosition asc
    </query>

    <query name="forumTopicCount">
        select
            f.id, count(distinct t)
        from
            WikiDirectory f, WikiDocument t
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
        group
            by f.id
    </query>

    <query name="forumReplyCount">
        select
            f.id, count(distinct c)
        from
            WikiDirectory f, WikiDocument t, WikiComment c
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and c.nodeInfo.nsThread in (select c2.nodeInfo.nsThread from WikiComment c2 where c2.parent = t)
        group
            by f.id
    </query>

    <query name="forumLastTopic">
        select
            f.id, t
        from
            WikiDirectory f, WikiDocument t left join fetch t.parent left join fetch t.createdBy u left join fetch u.profile
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and t.createdOn = (select max(t2.createdOn) from WikiDocument t2 where t2 = t)
    </query>

    <query name="forumLastReply">
        select
            f.id, c
        from
            WikiDirectory f, WikiDocument t, WikiComment c left join fetch c.parent left join fetch c.createdBy u left join fetch u.profile
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and c.nodeInfo.nsThread in (select c2 from WikiComment c2 where c2.parent = t)
            and c.createdOn = (
                select max(c3.createdOn) from WikiDirectory f2, WikiDocument t2, WikiComment c3
                where f2.parent = :parentDir and t2.parent = f2
                and (t2.headerMacrosString like '%forumPosting%' or t2.headerMacrosString like '%forumStickyPosting%')
                and c3.nodeInfo.nsThread in (select c4.nodeInfo.nsThread from WikiComment c4 where c4.parent = t2)
            )
    </query>

    <query name="forumUnreadTopics"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDirectory f, WikiDocument t
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and t.createdOn > :lastLoginDate
    ]]></query>

    <query name="forumUnreadReplies"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDirectory f, WikiDocument t, WikiComment c
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and c.nodeInfo.nsThread in (select c2.nodeInfo.nsThread from WikiComment c2 where c2.parent = t)
            and c.createdOn > :lastLoginDate
    ]]></query>

    <query name="forumUnreadTopicsInForum"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDocument t
        where
            t.parent = :parentDir
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and t.createdOn > :lastLoginDate
    ]]></query>

    <query name="forumUnreadRepliesInForum"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDocument t, WikiComment c
        where
            t.parent = :parentDir
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and c.nodeInfo.nsThread in (select c2.nodeInfo.nsThread from WikiComment c2 where c2.parent = t)
            and c.createdOn > :lastLoginDate
    ]]></query>


    <!-- Somewhat ugly workarounds for the missing case...when support in HQL select clause -->
    <query name="forumTopics"><![CDATA[
        select
            t.id,
            t,
            locate('forumStickyPosting', t.headerMacrosString, 1)
        from
            WikiDirectory f,
            WikiDocument t join fetch t.createdBy u join fetch u.profile up
        where
            f = :forum
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            order by case locate('forumStickyPosting', t.headerMacrosString, 1) when '0' then '0' else '1' end desc, t.createdOn desc
    ]]></query>

    <query name="forumTopicsReplies"><![CDATA[
        select
            t.id,
            count(c),
            c2
        from
            WikiDocument t,
            WikiComment c,
            WikiComment c2 join fetch c2.createdBy u join fetch u.profile up
        where
            t.id in (:topicIds)
            and c.nodeInfo.nsThread in (select c3.nodeInfo.nsThread from WikiComment c3 where c3.parent = t)
            and c2.createdOn =
                (select max(c4.createdOn) from WikiComment c4 where c4.nodeInfo.nsThread in
                    (select c5.nodeInfo.nsThread from WikiComment c5 where c5.parent = t) )
        group by
            t.id,

            c2.id, c2.nodeInfo.nsLeft, c2.nodeInfo.nsRight, c2.nodeInfo.nsThread,
            c2.version, c2.parent,
            c2.areaNumber, c2.name, c2.wikiname, c2.createdBy, c2.createdOn, c2.lastModifiedBy, c2.lastModifiedOn, c2.readAccessLevel, c2.writeAccessLevel, c2.writeProtected,
            c2.subject, c2.fromUserName, c2.fromUserEmail, c2.fromUserHomepage, c2.useWikiText,

            u.id, u.version, u.firstname, u.lastname, u.username, u.passwordHash, u.email, u.activated, u.activationCode, u.createdOn, u.lastLoginOn, u.memberHome, u.profile,
            up.id, up.version, up.createdOn, up.bio, up.website, up.location, up.occupation, up.signature, up.imageContentType

    ]]></query>

</hibernate-mapping>