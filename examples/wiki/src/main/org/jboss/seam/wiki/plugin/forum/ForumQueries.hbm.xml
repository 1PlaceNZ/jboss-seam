<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>

    <query name="forums">
        select d.id, d
        from
            WikiDirectory d fetch all properties,
            WikiMenuItem m
        where
            d = m.directory
            and d.parent = :parentDir
        order by m.displayPosition asc
    </query>

    <query name="forumsMenuItems">
        select m
        from
            WikiMenuItem m
        where
            m.directory.parent = :parentDir
        order by m.displayPosition asc
    </query>

    <query name="forumTopicCount">
        select
            f.id, count(distinct t)
        from
            WikiDirectory f, WikiDocument t
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
        group
            by f.id
    </query>

    <sql-query name="forumReplyCount">
        <return-scalar column="FORUM_ID" type="long"/>
        <return-scalar column="REPLY_COUNT" type="long"/>
        select
            dir0.NODE_ID as FORUM_ID, count(distinct c0.NODE_ID) as REPLY_COUNT
        from
            WIKI_DIRECTORY dir0
                inner join WIKI_NODE dir1 on dir0.NODE_ID=dir1.NODE_ID
                                          and dir1.READ_ACCESS_LEVEL &lt;= :readAccessLevel and dir1.PARENT_NODE_ID = :parentDirId
                  inner join WIKI_NODE doc1 on doc1.PARENT_NODE_ID = dir0.NODE_ID
                                            and doc1.READ_ACCESS_LEVEL &lt;= :readAccessLevel
                    inner join WIKI_DOCUMENT doc0 on doc0.NODE_ID=doc1.NODE_ID
                                                  and (doc0.HEADER_MACROS like '%forumPosting%' or doc0.HEADER_MACROS like '%forumStickyPosting%')
                      inner join WIKI_NODE ct0 on ct0.PARENT_NODE_ID = doc0.NODE_ID
                        inner join WIKI_COMMENT ct1 on ct0.NODE_ID = ct1.NODE_ID
                          inner join WIKI_COMMENT c0 on c0.NS_THREAD in (ct1.NS_THREAD)
        group by dir0.NODE_ID
    </sql-query>

    <query name="forumLastTopic">
        select
            f.id, t
        from
            WikiDirectory f, WikiDocument t left join fetch t.parent
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and t.createdOn = (select max(t2.createdOn) from WikiDocument t2 where t2 = t)
    </query>

    <sql-query name="forumLastReply">
        <return-scalar column="FORUM_ID" type="long"/>
        <return class="org.jboss.seam.wiki.core.model.WikiComment"/>
        select
            dir1.NODE_ID as FORUM_ID,

            c1.NODE_ID as NODE_ID,
            c1.OBJ_VERSION as OBJ_VERSION,
            c1.RATING as RATING,
            c1.AREA_NR as AREA_NR,
            c1.NAME as NAME,
            c1.WIKINAME as WIKINAME,
            c1.CREATED_ON as CREATED_ON,
            c1.CREATED_BY_USER_ID as CREATED_BY_USER_ID,
            c1.LAST_MODIFIED_ON as LAST_MODIFIED_ON,
            c1.LAST_MODIFIED_BY_USER_ID as LAST_MODIFIED_BY_USER_ID,
            c1.WRITE_ACCESS_LEVEL as WRITE_ACCESS_LEVEL,
            c1.READ_ACCESS_LEVEL as READ_ACCESS_LEVEL,
            c1.WRITE_PROTECTED as WRITE_PROTECTED,
            c1.PARENT_NODE_ID as PARENT_NODE_ID,

            c0.SUBJECT as SUBJECT,
            c0.FROM_USER_NAME as FROM_USER_NAME,
            c0.FROM_USER_EMAIL as FROM_USER_EMAIL,
            c0.FROM_USER_HOMEPAGE as FROM_USER_HOMEPAGE,
            c0.USE_WIKI_TEXT as USE_WIKI_TEXT,
            c0.NS_LEFT as NS_LEFT,
            c0.NS_RIGHT as NS_RIGHT,
            c0.NS_THREAD as NS_THREAD
        from
            WIKI_DIRECTORY dir0
                inner join WIKI_NODE dir1
                    on dir0.NODE_ID = dir1.NODE_ID
                    and dir1.PARENT_NODE_ID = :parentDirId
                    and dir1.READ_ACCESS_LEVEL &lt;= :readAccessLevel,
             WIKI_COMMENT c0
                inner join WIKI_NODE c1 on c0.NODE_ID = c1.NODE_ID
        where
            c0.NODE_ID = (
                select ct3.NODE_ID
                    from WIKI_COMMENT ct
                        inner join WIKI_NODE ct1 on ct.NODE_ID = ct1.NODE_ID
                            inner join WIKI_COMMENT ct2 on ct2.NS_THREAD in (ct.NS_THREAD)
                                inner join WIKI_NODE ct3 on ct2.NODE_ID = ct3.NODE_ID,
                        WIKI_NODE doc0 inner join WIKI_DOCUMENT doc1
                            on doc0.NODE_ID = doc1.NODE_ID
                            and (doc1.HEADER_MACROS like '%forumPosting%' or doc1.HEADER_MACROS like '%forumStickyPosting%')
                    where
                        doc0.PARENT_NODE_ID= dir0.NODE_ID
                        and doc0.READ_ACCESS_LEVEL &lt;= :readAccessLevel
                        and ct1.PARENT_NODE_ID = doc0.NODE_ID 
                    order by ct3.CREATED_ON desc
                    limit 1
            )
    </sql-query>

    <query name="forumUnreadTopics"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDirectory f, WikiDocument t
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and t.createdOn > :lastLoginDate
    ]]></query>

    <query name="forumUnreadReplies"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDirectory f, WikiDocument t, WikiComment c
        where
            f.parent = :parentDir
            and t.parent = f
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and c.nodeInfo.nsThread in (select c2.nodeInfo.nsThread from WikiComment c2 where c2.parent = t)
            and c.createdOn > :lastLoginDate
    ]]></query>

    <query name="forumUnreadTopicsInForum"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDocument t
        where
            t.parent = :parentDir
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and t.createdOn > :lastLoginDate
    ]]></query>

    <query name="forumUnreadRepliesInForum"><![CDATA[
        select
            distinct t.id, t.parent.id
        from
            WikiDocument t, WikiComment c
        where
            t.parent = :parentDir
            and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
            and c.nodeInfo.nsThread in (select c2.nodeInfo.nsThread from WikiComment c2 where c2.parent = t)
            and c.createdOn > :lastLoginDate
    ]]></query>

    <query name="forumTopicsCount">
        select count(t) from WikiDocument t
        where t.parent = :parentDir
        and (t.headerMacrosString like '%forumPosting%' or t.headerMacrosString like '%forumStickyPosting%')
    </query>

    <!-- TODO: We could optimize this a little if we'd also retrieve the CREATED_BY_USER_ID guy but
               we'll hit the 2nd level cache anyway or we load them in batches... -->
    <sql-query name="forumTopics">
        <return class="org.jboss.seam.wiki.core.model.WikiDocument"/>
        <return-scalar column="STICKY" type="integer"/>
        <return-scalar column="HAS_REPLIES" type="boolean"/>
        <return-scalar column="LAST_POST" type="timestamp"/>
        <![CDATA[
        select distinct
            doc2.NODE_ID as NODE_ID,
            doc2.OBJ_VERSION as OBJ_VERSION,
            doc2.RATING as RATING,
            doc2.AREA_NR as AREA_NR,
            doc2.NAME as NAME,
            doc2.WIKINAME as WIKINAME,
            doc2.CREATED_ON as CREATED_ON,
            doc2.CREATED_BY_USER_ID as CREATED_BY_USER_ID,
            doc2.LAST_MODIFIED_ON as LAST_MODIFIED_ON,
            doc2.LAST_MODIFIED_BY_USER_ID as LAST_MODIFIED_BY_USER_ID,
            doc2.WRITE_ACCESS_LEVEL as WRITE_ACCESS_LEVEL,
            doc2.READ_ACCESS_LEVEL as READ_ACCESS_LEVEL,
            doc2.WRITE_PROTECTED as WRITE_PROTECTED,
            doc2.PARENT_NODE_ID as PARENT_NODE_ID,

            doc1.FILE_REVISION as FILE_REVISION,

            doc0.NAME_AS_TITLE as NAME_AS_TITLE,
            doc0.ENABLE_COMMENTS as ENABLE_COMMENTS,
            doc0.ENABLE_COMMENT_FORM as ENABLE_COMMENT_FORM,
            doc0.ENABLE_COMMENTS_ON_FEEDS as ENABLE_COMMENTS_ON_FEEDS,
            doc0.HEADER as HEADER,
            doc0.HEADER_MACROS as HEADER_MACROS,
            doc0.CONTENT_MACROS as CONTENT_MACROS,
            doc0.FOOTER as FOOTER,
            doc0.FOOTER_MACROS as FOOTER_MACROS,

            case when (doc0.HEADER_MACROS like '%forumStickyPosting%') then 1 else 0 end as STICKY,
            case when c0.CREATED_ON is null then false else true end as HAS_REPLIES,
            case when c0.CREATED_ON is null then doc2.CREATED_ON else c0.CREATED_ON end as LAST_POST

        from
            WIKI_DOCUMENT doc0 inner join WIKI_FILE doc1 on doc0.NODE_ID=doc1.NODE_ID inner join WIKI_NODE doc2 on doc0.NODE_ID=doc2.NODE_ID
            left outer join WIKI_NODE c0
             on c0.NODE_ID = (
                 select ct3.NODE_ID from WIKI_COMMENT ct
                   inner join WIKI_NODE ct1 on ct.NODE_ID = ct1.NODE_ID
                   inner join WIKI_COMMENT ct2 on ct2.NS_THREAD in (ct.NS_THREAD)
                   inner join WIKI_NODE ct3 on ct2.NODE_ID = ct3.NODE_ID
                 where ct1.PARENT_NODE_ID = doc0.NODE_ID order by ct3.CREATED_ON desc
                 limit 1
             )
        where
            doc2.PARENT_NODE_ID = :parentNodeId
            and doc2.READ_ACCESS_LEVEL <= :readAccessLevel
            and (doc0.HEADER_MACROS like '%forumPosting%' or doc0.HEADER_MACROS like '%forumStickyPosting%')
        order
            by STICKY desc, LAST_POST desc
    ]]></sql-query>

    <!-- TODO: Optimize this with native SQL -->
    <query name="forumTopicsReplies"><![CDATA[
        select
            t.id,
            count(c),
            c2
        from
            WikiDocument t,
            WikiComment c,
            WikiComment c2 join fetch c2.createdBy u
        where
            t.id in (:topicIds)
            and c.nodeInfo.nsThread in (select c3.nodeInfo.nsThread from WikiComment c3 where c3.parent = t)
            and c2.createdOn =
                (select max(c4.createdOn) from WikiComment c4 where c4.nodeInfo.nsThread in
                    (select c5.nodeInfo.nsThread from WikiComment c5 where c5.parent = t) )
        group by
            t.id,

            c2.id, c2.nodeInfo.nsLeft, c2.nodeInfo.nsRight, c2.nodeInfo.nsThread,
            c2.version, c2.parent,
            c2.areaNumber, c2.name, c2.wikiname, c2.createdBy, c2.createdOn, c2.lastModifiedBy, c2.lastModifiedOn, c2.readAccessLevel, c2.writeAccessLevel, c2.writeProtected,
            c2.subject, c2.fromUserName, c2.fromUserEmail, c2.fromUserHomepage, c2.useWikiText,

            u.id, u.version, u.firstname, u.lastname, u.username, u.passwordHash, u.email, u.activated, u.activationCode, u.createdOn, u.lastLoginOn, u.memberHome, u.profile

    ]]></query>

    <sql-query name="forumPostersAndRatingPoints">
        <return class="org.jboss.seam.wiki.core.model.User"/>
        <return-scalar column="RATING_POINTS" type="long"/>
        <![CDATA[
        select
            ur.USER_ID, ur.ACTIVATED, ur.ACTIVATION_CODE, ur.CREATED_ON, ur.EMAIL, ur.FIRSTNAME, ur.LAST_LOGIN_ON,
            ur.LASTNAME, ur.MEMBER_HOME_WIKI_DIRECTORY_ID, ur.PASSWORDHASH, ur.USER_PROFILE_ID, ur.USERNAME, ur.OBJ_VERSION,
            sum(ur.RATING) as RATING_POINTS
        from
           (select distinct
                user2.*,
                com2.NODE_ID,
                com2.RATING
            from
                WIKI_DOCUMENT doc0
                 inner join WIKI_FILE doc1 on doc0.NODE_ID=doc1.NODE_ID
                  inner join WIKI_NODE doc2 on doc0.NODE_ID=doc2.NODE_ID,
                WIKI_COMMENT com1
                 inner join WIKI_NODE com2 on com1.NODE_ID=com2.NODE_ID
                  inner join USERS user2 on com2.CREATED_BY_USER_ID=user2.USER_ID
                   inner join USER_ROLE roles1 on user2.USER_ID=roles1.USER_ID
                    inner join ROLES roles2 on roles1.ROLE_ID=roles2.ROLE_ID
            where
                doc2.PARENT_NODE_ID=:parentDirId
                and (com1.NS_THREAD in
                      (select com3.NS_THREAD from WIKI_COMMENT com3
                         inner join WIKI_NODE com4 on com3.NODE_ID=com4.NODE_ID
                         where com4.PARENT_NODE_ID=doc0.NODE_ID
                      )
                     )
                and (roles2.NAME not in (:ignoreUserInRoles))
                and com2.RATING<>0
            ) as ur
        group by
            ur.USER_ID, ur.ACTIVATED, ur.ACTIVATION_CODE, ur.CREATED_ON, ur.EMAIL, ur.FIRSTNAME, ur.LAST_LOGIN_ON,
            ur.LASTNAME, ur.MEMBER_HOME_WIKI_DIRECTORY_ID, ur.PASSWORDHASH, ur.USER_PROFILE_ID, ur.USERNAME,
            ur.OBJ_VERSION
        order by sum(ur.RATING) desc
    ]]></sql-query>

</hibernate-mapping>