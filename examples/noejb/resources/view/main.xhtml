<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	    		xmlns:ui="http://java.sun.com/jsf/facelets"
	  			xmlns:h="http://java.sun.com/jsf/html"
	  			xmlns:f="http://java.sun.com/jsf/core"
				template="template.xhtml">

<!-- content -->
<ui:define name="content">
<div class="section">
	<h1>Search Hotels</h1>
	<h:form>
	<fieldset> 
		<h:inputText value="#{hotelBooking.searchString}" style="width: 165px;" />&nbsp;
		<h:commandButton value="Find Hotels" action="#{hotelBooking.find}" styleClass="button" />
	</fieldset>
	</h:form>
</div>
<div class="section">
	<h:outputText value="No Hotels Found" rendered="#{hotels != null and hotels.rowCount==0}"/>
	<h:dataTable value="#{hotels}" var="hot" rendered="#{hotels.rowCount>0}">
		<h:column>
			<f:facet name="header">Name</f:facet>
			#{hot.name}
		</h:column>
		<h:column>
			<f:facet name="header">Address</f:facet>
			#{hot.address}
		</h:column>
		<h:column>
			<f:facet name="header">City, State</f:facet>
			#{hot.city}, #{hot.state}
		</h:column> 
		<h:column>
			<f:facet name="header">Zip</f:facet>
			#{hot.zip}
		</h:column>
		<h:column>
			<f:facet name="header">Action</f:facet>
			<h:commandLink action="#{hotelBooking.selectHotel}">View Hotel</h:commandLink>
		</h:column>
	</h:dataTable>
</div>
<div class="section">
	<h1>Current Hotel Bookings</h1>
</div>
<div class="section">
	<h:outputText value="No Bookings Found" rendered="#{bookings.rowCount==0}"/>
	<h:dataTable value="#{bookings}" var="book" rendered="#{bookings.rowCount>0}">
		<h:column>
			<f:facet name="header">Name</f:facet>
			#{book.hotel.name}
		</h:column>
		<h:column>
			<f:facet name="header">Address</f:facet>
			#{book.hotel.address}
		</h:column>
		<h:column>
			<f:facet name="header">City, State</f:facet>
			#{book.hotel.city}, #{book.hotel.state}
		</h:column>
		<h:column>
			<f:facet name="header">Check in date</f:facet>
			#{book.checkinDate}
		</h:column>
		<h:column>
			<f:facet name="header">Check out date</f:facet>
			#{book.checkoutDate}
		</h:column>
		<h:column>
			<f:facet name="header">Confirmation number</f:facet>
			#{book.id}
		</h:column>
		<h:column>
			<f:facet name="header">Action</f:facet>
			<h:commandLink action="#{bookingList.cancel}">Cancel</h:commandLink>
		</h:column>
	</h:dataTable>
</div>
</ui:define>

<!-- sidebar -->
<ui:define name="sidebar">
<h1>Contextual Components</h1>
<p>
    Seam components are stateful. Say goodbye to the idea of maintaining application state by
    getting and setting attributes of the servlet session. We're sure you won't miss it.
    Maintaining server side state has traditionally been a painful and bugprone task. Users
    do funny things with their web browsers. They open the same page in multiple tabs. They 
    love their back buttons. They start doing stuff that they never finish. Cleaning up
    "orphaned" state, and insuring that state from different threads of user interaction does
    not collide is a nightmare in a traditional web application architecture. So Seam uses
    <em>contextual</em> application state management, and especially the notion of a 
    <em>conversation</em> to provide a well-defined lifecycle for application state.
</p>
<h1>You're in a conversation right now</h1>
<p>
    When you click "Find Hotels", a conversation begins. The state associated with that
    conversation is associated with this tab, in this browser window. Try 
    <a href="main.jsf">opening this page</a> in a new browser tab or window. The work you do 
    in each window will be completely isolated from the other one. We didn't have to do anything 
    difficult to achieve this behavior. Believe it or not, just one annotation was enough.
</p>
</ui:define>

</ui:composition>