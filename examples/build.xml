<?xml version="1.0"?>
<!-- ###################### SEAM EXAMPLES BUILD FILE ###################### -->
<!-- 
  This build file is used for all the Seam examples.  Each example has a 
  build.xml which is used to specify per project settings, and override targets
  and filesets as necessary.
  
  By looking at the SEAM JARS WITH DEPENDENCIES and OPTIONAL DEPENDENCIES FOR 
  USING SEAM sections you can see what jars are required (for use on JBoss AS)
  for Seam, and if you want to use the integration with other projects
-->
<project name="SeamExample" default="deploy" basedir=".">

	<tstamp />

	<!-- Location of Seam -->
	<dirname property="seam.dir" file="${ant.file.SeamExample}/../" />

	<!-- Import build.properties for Seam -->
	<property file="${seam.dir}/build.properties" />
	
	<!-- Build resources -->
	<property name="build.dir" value="${seam.dir}/build" />
	<property name="tmp.dir" value="${seam.dir}/classes" />

	<import file="${build.dir}/utilities.build.xml" />
	<import file="${build.dir}/common.build.xml" />


	<!-- ###################### PROPERTY DEFINITIONS ###################### -->

	<!-- Source directories -->
	<property name="src.java.dir" value="src" />
	<property name="src.test.dir" value="src" />
	<property name="view.dir" value="view" />
	<property name="resources.dir" value="resources" />
	<property name="validate.resources.dir" value="${resources.dir}" />
	<property name="example.ds" value="${example.name}-ds.xml" />

	<!-- Deployment directories -->
	<property name="deploy.dir" value="${jboss.home}/server/default/deploy" />
	<property name="tomcat.deploy.dir" value="${tomcat.home}/webapps" />
	<property name="conf.dir" value="${jboss.home}/server/default/conf" />

	<!-- Library directories -->
	<property name="lib.dir" value="${seam.dir}/lib" />
	<property name="mail.dir" value="${seam.dir}/mail" />
	<property name="meldware.dir" value="${mail.dir}/buni-meldware" />

	<!-- Target directories -->
	<property name="dist.dir" value="dist" />
	<property name="exploded-archives.dir" value="exploded-archives" />
	<property name="ear.dir" value="${exploded-archives.dir}/${example.name}.ear" />
	<property name="jar.dir" value="${exploded-archives.dir}/${example.name}.jar" />
	<property name="war.dir" value="${exploded-archives.dir}/${example.name}.war" />
	<property name="ear.deploy.dir" value="${deploy.dir}/${example.name}.ear" />
	<property name="jar.deploy.dir" value="${ear.deploy.dir}/${example.name}.jar" />
	<property name="war.deploy.dir" value="${ear.deploy.dir}/${example.name}.war" />

	<!-- Testing -->
	<property name="test.dir" value="test-build" />
	<property name="coverage.dir" value="${seam.dir}/build/coverage" />
	<property name="test-report.dir" value="${seam.dir}/test-output" />
	<property name="eejb.conf.dir" value="${seam.dir}/bootstrap" />
	<property name="src.schema.dir" value="${seam.dir}/src/main/org/jboss/seam" />
	<property name="schema.version" value="${version}" />
	<property name="testng.jar" value="${seam.dir}/lib/testng-5.6-jdk15.jar" />

	<property name="javac.debug" value="true" />
	<property name="javac.deprecation" value="false" />


	<!-- ################## PLACEHOLDERS FOR OVERRIDING ################### -->
	<!-- 
	   This allows build files which import this one to easily add extra 
	   resources to the the build 
	-->

	<!-- Added to the build classpath -->
	<path id="build.classpath.extras" />

	<!-- Added to the test classpath -->
	<path id="test.classpath.extras" />

	<!-- Added to the ejb root on build-->
	<fileset id="jar.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- Added to the war root on build -->
	<fileset id="war.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- Added to the ear root on build -->
	<fileset id="ear.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- Added to the ear lib directory on build -->
	<fileset id="ear.lib.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- Added to the tomcat war root on build -->
	<fileset id="tomcat.war.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- Added to the tomcat jar root on build -->
	<fileset id="tomcat.jar.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- Added to the non-ejb war lib on build -->
	<fileset id="noejb.war.lib.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- Added to the non-ejb jar root on build -->
	<fileset id="noejb.jar.extras" dir=".">
		<exclude name="**/*" />
	</fileset>
	
	<!-- Added to the non-ejb war root on build -->
	<fileset id="noejb.war.extras" dir=".">
		<exclude name="**/*" />
	</fileset>

	<!-- ############## SEAM JARS AND REQUIRED DEPENDENCIES ############### -->
	<!-- 
	  Seam is made up of a number of jars.  They are specified here, with
	  dependencies for each one
	-->

	<!-- Seam core, with required dependencies -->
	<fileset id="seam.jar" dir="${lib.dir}">
		<include name="jboss-seam.jar" />
	</fileset>

	<!-- Seam ui, with required dependencies -->
	<fileset id="seam.ui.jar" dir="${lib.dir}">
		<include name="jboss-seam-ui.jar" if="seam.ui.lib" />
		<include name="commons-beanutils.jar" if="seam.ui.lib" />
	</fileset>

	<!-- Seam  pdf, with required dependencies -->
	<fileset id="seam.pdf.jar" dir="${lib.dir}">
		<include name="jboss-seam-pdf.jar" if="seam.pdf.lib" />
		<include name="itext.jar" if="seam.pdf.lib" />
		<include name="jfreechart.jar" if="seam.pdf.lib" />
		<include name="jcommon.jar" if="seam.pdf.lib" />
	</fileset>

	<!-- Seam debug, with required dependencies -->
	<fileset id="seam.debug.jar" dir="${lib.dir}">
		<include name="jboss-seam-debug.jar" if="seam.debug.lib" />
	</fileset>

	<!-- Seam ioc, with required dependencies -->
	<fileset id="seam.ioc.jar" dir="${lib.dir}">
		<include name="jboss-seam-ioc.jar" if="seam.ioc.war.lib" />
	</fileset>

	<!-- Seam mail, with required dependencies -->
	<fileset id="seam.mail.jar" dir="${lib.dir}">
		<include name="jboss-seam-mail.jar" if="seam.mail.lib" />
	</fileset>

	<!-- Seam remoting, with required dependencies -->
	<fileset id="seam.remoting.jar" dir="${lib.dir}">
		<include name="jboss-seam-remoting.jar" if="seam.remoting.lib" />
	</fileset>

	<!-- jboss-el -->
	<fileset id="jboss-el.jar" dir="${lib.dir}">
		<include name="jboss-el.jar" />
	</fileset>

	<!-- Dependencies for using Seam with JSF - only needed if the server 
	     doesn't come with JSF! -->
	<fileset id="jsf.jar" dir="${lib.dir}">
		<include name="jsf-api.jar" />
		<include name="jsf-impl.jar" />
		<include name="jstl.jar" />
	</fileset>

	<!-- ############## OPTIONAL DEPENDENCIES FOR USING SEAM ############## -->
	<!--
	  Seam provides tight integration with a number of libratries and 
	  frameworks.  There are examples for these, and the dependencies
	  for each are specified here 
	-->

	<!-- Dependencies for seam-remoting used with GWT -->
	<fileset id="gwt.jar" dir="${lib.dir}">
		<include name="gwt-servlet.jar" if="gwt.lib" />
	</fileset>

	<!-- Dependencies for seam used with the Quartz dispatcher -->
	<fileset id="quartz.jar" dir="${lib.dir}">
		<include name="quartz.jar" if="quartz.lib" />
	</fileset>

	<!-- Dependencies for seam-ioc used with Spring -->
	<fileset id="spring.jar" dir="${lib.dir}">
		<include name="spring.jar" if="spring.lib" />
	</fileset>

	<!-- Optional UI jars -->

	<!-- Dependencies for using Seam with facelets -->
	<fileset id="facelets.jar" dir="${lib.dir}">
		<include name="jsf-facelets.jar" if="facelets.lib" />
	</fileset>

	<!-- Dependencies for using Seam with Richfaces -->
	<fileset id="richfaces-api.jar" dir="${lib.dir}">
		<include name="richfaces-api.jar" if="richfaces.lib" />
		<include name="commons-beanutils.jar" if="richfaces.lib" />
		<include name="commons-digester.jar" if="richfaces.lib" />
	</fileset>
	
	<fileset id="richfaces-impl.jar" dir="${lib.dir}">
		<include name="richfaces-impl.jar" if="richfaces.lib" />
		<include name="richfaces-ui.jar" if="richfaces.lib" />
	</fileset>

	<!-- Dependencies for using Seam with JBPM -->
	<fileset id="jbpm.jar" dir="${lib.dir}">
		<include name="jbpm-jpdl.jar" if="jbpm.lib" />
	</fileset>

	<!-- Dependencies for using Seam with JBPM on Tomcat-->
	<fileset id="tomcat.jbpm.jar" dir="${lib.dir}">
		<include name="bsh.jar" if="jbpm.lib" />
	</fileset>

	<!-- Dependencies for using Seam with JBoss Cache (s:cache) -->
	<fileset id="cache.jar" dir="${lib.dir}">
		<include name="jboss-cache-jdk50.jar" if="cache.lib" />
		<include name="jboss-aop.jar" if="cache.lib" />
		<include name="jgroups.jar" if="cache.lib" />
	</fileset>

	<!-- Dependencies for using Seam with Hibernate Search -->
	<fileset id="search.jar" dir="${lib.dir}">
		<include name="lucene-core.jar" if="search.lib" />
		<include name="hibernate-search.jar" if="search.lib" />
		<include name="hibernate-commons-annotations.jar" if="search.lib" />
	</fileset>

	<!-- Dependencies for using Seam with Drools -->
	<fileset id="drools.jar" dir="${lib.dir}">
		<include name="antlr-runtime.jar" if="drools.lib" />
		<include name="core-*.jar" if="drools.lib" />
		<include name="janino-*.jar" if="drools.lib" />
		<include name="mvel-*.jar" if="drools.lib" />
		<include name="drools-core-*.jar" if="drools.lib" />
		<include name="drools-compiler-*.jar" if="drools.lib" />
	</fileset>

	<!-- Dependencies for using Seam with JCaptcha -->
	<fileset id="jcaptcha.jar" dir="${lib.dir}">
		<include name="jcaptcha-all*.jar" if="jcaptcha.lib" />
	</fileset>

	<!-- Dependencies for using Seam with URLRewrite -->
	<fileset id="urlrewrite.jar" dir="${lib.dir}">
		<include name="urlrewrite*.jar" if="urlrewrite.lib" />
	</fileset>
	
	<!-- Dependencies for using with antlr (if not shipped with server) -->
	<fileset id="antlr.jar" dir="${lib.dir}">
		<include name="antlr-*.jar" if="antlr.lib" />
	</fileset>


	<!-- ############################ MELDWARE ############################ -->
	<!--
	  Meldware from buni.org provides a java based mail server which Seam uses
	  to demonstrate it's mail capabilities.  It's unlike other dependencies as
	  it is deployed as a number of standalone wars, rars and ears.
	-->

	<!-- Meldware configuration -->
	<patternset id="meldware.conf.files">
		<exclude name="**/*" unless="deploy.meldware.mail" />
		<include name="meldware.store" if="deploy.meldware.mail" />
	</patternset>

	<!-- Just the mail portion of meldware -->
	<patternset id="meldware.files">
		<exclude name="**/*" unless="deploy.meldware.mail" />
		<include name="_mail.ear" if="deploy.meldware.mail" />
		<include name="meldwarebase.sar" if="deploy.meldware.mail" />
	</patternset>


	<!-- ############### RESOURCES FOR EXAMPLES ################ -->
	<!--
	  A number of configuration files are needed for Seam, and it's 
	  dependencies.  The examples place all their configuration files in the
	  resources directory.  They aren't split along packaging lines (as this
	  varies depending on what platform you deploy to), but rather by location.
	  Here, therefore, we split them into the ejb, the war and the ear. 
	  Some resource are also placed in the deploy and conf directory of JBoss
	  AS.
	-->

	<!-- View files -->
	<fileset id="war.view" dir="${view.dir}">
		<include name="**/*" />
	</fileset>

	<!-- resources to go in the war -->
	<fileset id="war.resources" dir="${resources.dir}">
		<include name="WEB-INF/*.xml" />
		<include name="WEB-INF/*.sql" />
	</fileset>

	<!-- resources to go in the jar  -->
	<fileset id="jar.resources" dir="${resources.dir}">
		<include name="import.sql" />
		<include name="seam.properties" />
		<include name="seam.quartz.properties" />
		<include name="META-INF/persistence.xml" />
		<include name="META-INF/ejb-jar.xml" />
		<include name="META-INF/orm.xml" />
		<include name="META-INF/components.xml" />
		<include name="META-INF/jboss.xml" />
		<include name="META-INF/security-config.xml" />
		<include name="META-INF/security-rules.drl" />
		<include name="META-INF/standard-jaxws-endpoint-config.xml" />
	</fileset>

	<!-- resources to go in the jar for tomcat  -->
	<fileset id="tomcat.jar.resources" dir="${resources.dir}">
		<include name="${example.ds}" />
		<include name="treecache.xml" />
		<include name="*.jpdl.xml" />
		<include name="jbpm.cfg.xml" />
		<include name="hibernate.cfg.xml" />
	</fileset>

	<!-- resources to go in the jar for jbosswar  -->
	<fileset id="noejb.jar.resources" dir="${resources.dir}">
		<include name="${example.ds}" />
		<include name="treecache.xml" />
		<include name="*.jpdl.xml" />
		<include name="jbpm.cfg.xml" />
		<include name="hibernate.cfg.xml" />
	</fileset>

	<!-- Resources to go in the ear -->
	<fileset id="ear.resources" dir="${resources.dir}">
		<include name="META-INF/application.xml" />
		<include name="META-INF/jboss-app.xml" />
		<include name="META-INF/*-service.xml" />
		<include name="META-INF/*-xmbean.xml" />
		<include name="treecache.xml" />
		<include name="*.jpdl.xml" />
		<exclude name=".gpd.*" />
		<include name="*.cfg.xml" />
		<include name="*.xsd" />
		<include name="*.drl" />
	</fileset>

	<!-- Property resources (e.g. themes, i8ln) get put on the classpath -->
	<fileset id="properties" dir="${resources.dir}">
		<exclude name="seam.properties" />
		<exclude name="components.properties" />
		<include name="*.properties" />
	</fileset>

	<!-- files for Seam Component jars -->
	<patternset id="components-jar.files">
		<include name="**/*.class" />
		<include name="**/*.component.xml" />
		<include name="**/components.xml" />
	</patternset>

	<!-- Build classpath -->
	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<path refid="build.classpath.extras" />
	</path>
	
	<path id="emma.classpath">
		<fileset dir="${seam.dir}/extras/emma/*.jar" />
	</path>


	<!-- ##################### BUILD TARGETS (COMMON) ##################### -->
	<!-- 
	  The build targets which are used for both JBoss AS and  Tomcat
	-->

	<!-- Initialize the build -->
	<target name="init" depends="copyseam, copyseamdependencies">
		<echo message="Building ${Name} ${version}" />
		<mkdir dir="${jar.dir}" />
		<mkdir dir="${ear.dir}" />
		<mkdir dir="${war.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- Use the Eclipse compiler, if it is available -->
	<target name="select-compiler">
		<available classname="org.eclipse.jdt.core.JDTCompilerAdapter" property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
	</target>

	<!-- Compile the source code, directly into the jar -->
	<target name="compile" depends="init, select-compiler">
		<javac classpathref="build.classpath" destdir="${jar.dir}" debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.java.dir}" />
		</javac>
	</target>

	<!-- Build the exploded jar -->
	<target name="jar" depends="compile">
		<copy todir="${jar.dir}">
			<fileset refid="jar.resources" />
			<fileset refid="jar.extras" />
		</copy>
	</target>

	<!-- Build the exploded war -->
	<target name="war" depends="compile">
		<copy todir="${war.dir}">
			<fileset refid="war.view" />
			<fileset refid="war.extras" />
		</copy>
		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset refid="seam.debug.jar" />
			<fileset refid="seam.ioc.jar" />
			<fileset refid="seam.mail.jar" />
			<fileset refid="seam.pdf.jar" />
			<fileset refid="seam.remoting.jar" />
			<fileset refid="seam.ui.jar" />
			<fileset refid="facelets.jar" />
			<fileset refid="urlrewrite.jar" />
			<fileset refid="richfaces-impl.jar" />
			<mapper type="flatten" />
		</copy>
		<!-- Put properties into the classpath -->
		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset refid="properties" />
		</copy>
	</target>

	<target name="clean" description="Cleans up the build directory">
		<delete dir="${dist.dir}" />
		<delete dir="${exploded-archives.dir}" />
		<delete dir="${ear.dir}" />
		<delete dir="${war.dir}" />
		<delete dir="${jar.dir}" />
		<delete dir="${test.dir}" />
	</target>


	<!-- #################### BUILD TARGETS (JBOSS AS EAR) #################### -->
	<!-- 
	  The build targets for the examples.  Both unexploded (deploy, undeploy)
	  and unexploded (explode, unexplode, restart) deployment is possible.
	-->

	<!-- Extend the standard war target to add extras which JBoss needs -->
	<target name="jboss.war" depends="war">
		<!-- Copy in resources, with filtering -->
		<copy todir="${war.dir}">
			<fileset refid="war.resources" />
			<filterset>
				<filter token="debug" value="${debug}" />
				<filter token="jndiPattern" value="${example.name}/#{ejbName}/local" />
				<filter token="embeddedEjb" value="false" />
			</filterset>
		</copy>
	</target>

	<!-- Build the exploded ear -->
	<target name="ear">
		<copy todir="${ear.dir}">
			<fileset refid="seam.jar" />
			<fileset refid="ear.extras" />
			<fileset refid="ear.resources" />
		</copy>
		<mkdir dir="${ear.dir}/lib" />
		<copy todir="${ear.dir}/lib">
			<fileset refid="richfaces-api.jar" />
			<fileset refid="ear.lib.extras" />
			<fileset refid="jboss-el.jar" />
			<fileset refid="drools.jar" />
			<fileset refid="jbpm.jar" />
			<fileset refid="cache.jar" />
			<fileset refid="search.jar" />
			<fileset refid="gwt.jar" />
			<fileset refid="quartz.jar" />
			<fileset refid="spring.jar" />
			<fileset refid="jcaptcha.jar" />
			<fileset refid="antlr.jar" />
			<mapper type="flatten" />
		</copy>
	</target>

	<target name="archive" depends="jar,jboss.war,ear" description="Package the archives">
		<jar jarfile="${dist.dir}/${example.name}.jar" basedir="${jar.dir}" />
		<jar jarfile="${dist.dir}/${example.name}.war" basedir="${war.dir}" />
		<jar jarfile="${dist.dir}/${example.name}.ear">
			<fileset dir="${ear.dir}" />
			<fileset dir="${dist.dir}">
				<include name="${example.name}.jar" />
				<include name="${example.name}.war" />
			</fileset>
		</jar>
	</target>

	<!-- Deploy the target to JBoss AS -->
	<target name="deploy" depends="archive, datasource, meldware" description="Deploy the example to JBoss AS">
		<fail unless="jboss.home">
			jboss.home not set, update build.properties
		</fail>
		<copy file="${dist.dir}/${example.name}.ear" todir="${deploy.dir}" />
	</target>

	<!-- Deploy meldware to JBoss AS -->
	<target name="meldware">
		<copy todir="${deploy.dir}">
			<fileset dir="${meldware.dir}">
				<patternset refid="meldware.files" />
			</fileset>
		</copy>
		<copy todir="${conf.dir}">
			<fileset dir="${meldware.dir}">
				<patternset refid="meldware.conf.files" />
			</fileset>
		</copy>
	</target>

	<target name="undeploy" description="Undeploy the example from JBoss">
		<delete file="${deploy.dir}/${example.name}.ear" />
		<delete file="${deploy.dir}/${example.ds}" />
		<delete>
			<fileset dir="${deploy.dir}">
				<patternset refid="meldware.files" />
			</fileset>
		</delete>
	</target>

	<!-- Copy the data source to JBoss AS -->
	<target name="datasource">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy todir="${deploy.dir}">
			<fileset dir="${resources.dir}">
				<include name="${example.ds}" />
			</fileset>
		</copy>
	</target>

	<target name="explode" depends="jar,jboss.war,ear,datasource, meldware" description="Deploy the exploded archive">
		<fail unless="jboss.home">jboss.home not set</fail>

		<mkdir dir="${jar.deploy.dir}" />
		<mkdir dir="${war.deploy.dir}" />

		<copy todir="${jar.deploy.dir}">
			<fileset dir="${jar.dir}" />
		</copy>
		<copy todir="${war.deploy.dir}">
			<fileset dir="${war.dir}" />
		</copy>
		<copy todir="${ear.deploy.dir}">
			<fileset dir="${ear.dir}" />
		</copy>
	</target>

	<target name="unexplode" description="Undeploy the exploded archive">
		<delete failonerror="no">
			<fileset dir="${ear.deploy.dir}">
				<exclude name="**/*.jar" />
			</fileset>
		</delete>
		<delete file="${deploy.dir}/${example.name}-ds.xml" failonerror="no" />
		<delete dir="${ear.deploy.dir}" failonerror="no" />
		<delete failonerror="no">
			<fileset dir="${deploy.dir}">
				<patternset refid="meldware.files" />
			</fileset>
		</delete>
	</target>

	<target name="restart" depends="explode" description="Restart the exploded archive">
		<touch file="${ear.deploy.dir}/META-INF/application.xml" />
	</target>


	<!-- #################### BUILD TARGETS (TOMCAT) #################### -->


	<target name="tomcat.warn">
		<echo message="If you built for JBoss AS, remember to run clean before building for Tomcat" />
		<echo message="Remember to configure Embedded JBoss" />
	</target>

	<target name="tomcat.jar" depends="jar">
		<copy todir="${jar.dir}">
			<fileset refid="tomcat.jar.resources" />
		</copy>
	</target>

	<!-- Extend the standard war target to add extras which Tomcat needs -->
	<target name="tomcat.war" depends="war">
		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset refid="seam.jar" />
			<fileset refid="tomcat.war.extras" />
			<fileset refid="drools.jar" />
			<fileset refid="cache.jar" />
			<fileset refid="jbpm.jar" />
			<fileset refid="tomcat.jbpm.jar" />
			<fileset refid="spring.jar" />
			<fileset refid="gwt.jar" />
			<fileset refid="jboss-el.jar" />
			<fileset refid="jsf.jar" />
			<fileset refid="search.jar" />
			<mapper type="flatten" />
		</copy>
		<!-- Copy in resources, with filtering -->
		<copy todir="${war.dir}">
			<fileset refid="war.resources" />
			<filterset>
				<filter token="debug" value="${debug}" />
				<filter token="jndiPattern" value="#{ejbName}/local" />
				<filter token="embeddedEjb" value="false" />
			</filterset>
		</copy>
	</target>

	<target name="tomcat.archive" depends="tomcat.warn,tomcat.jar,tomcat.war" description="Package the archives for tomcat">
		<jar jarfile="${dist.dir}/${example.name}.jar" basedir="${jar.dir}" />
		<jar jarfile="${dist.dir}/${example.name}.war">
			<fileset dir="${war.dir}" />
			<zipfileset dir="${dist.dir}" prefix="WEB-INF/lib">
				<include name="${example.name}.jar" />
			</zipfileset>
		</jar>
	</target>

	<target name="tomcat.deploy" depends="tomcat.archive" description="Deploy the example to Tomcat">

		<fail unless="tomcat.home">
			tomcat.home not set, update build.properties
		</fail>
		<copy file="${dist.dir}/${example.name}.war" todir="${tomcat.deploy.dir}" />
	</target>

	<target name="tomcat.undeploy" description="Undeploy the example from Tomcat">
		<delete file="${tomcat.deploy.dir}/${example.name}.war" />
	</target>



	<!-- #################### BUILD TARGETS (NOEJB) ##################### -->

	<target name="noejb.jar" depends="jar">
		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${jar.dir}">
				<exclude name="**/ejb-jar.xml" />
			</fileset>
			<fileset refid="noejb.jar.extras" />
			<fileset refid="noejb.jar.resources" />
		</copy>
	</target>

	<!-- Extend the standard war target to add extras which non-ejb wars needs -->
	<target name="noejb.war" depends="war">
		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset refid="seam.jar" />
			<fileset refid="noejb.war.lib.extras" />
			<fileset refid="drools.jar" />
			<fileset refid="cache.jar" />
			<fileset refid="jbpm.jar" />
			<fileset refid="spring.jar" />
			<fileset refid="gwt.jar" />
			<fileset refid="jboss-el.jar" />
			<fileset refid="search.jar" />
			<fileset refid="richfaces-api.jar" />
			<mapper type="flatten" />
		</copy>
		<copy todir="${war.dir}">
			<fileset refid="noejb.war.extras" />
		</copy>
		<!-- Copy in resources, with filtering -->
		<copy todir="${war.dir}">
			<fileset refid="war.resources" />
			<filterset>
				<filter token="debug" value="${debug}" />
				<filter token="jndiPattern" value="#{ejbName}/local" />
				<filter token="embeddedEjb" value="false" />
			</filterset>
		</copy>
	</target>

	<target name="noejb.archive" depends="noejb.jar,noejb.war" description="Package the archives for non-ejb war">
		<jar jarfile="${dist.dir}/${example.name}.war">
			<fileset dir="${war.dir}" />
			<zipfileset dir="${dist.dir}" prefix="WEB-INF/lib">
				<include name="${example.name}.jar" />
			</zipfileset>
		</jar>
	</target>

	<!-- #################### BUILD TARGETS (JBOSS AS WAR) #################### -->

	<target name="jbosswar.deploy" depends="noejb.archive" description="Deploy the example to JBoss AS">
		<fail unless="jboss.home">
			jboss.home not set, update build.properties
		</fail>
		<copy file="${dist.dir}/${example.name}.war" todir="${deploy.dir}" />
	</target>

	<target name="jbosswar.undeploy" description="Undeploy the example from JBoss">
		<delete file="${deploy.dir}/${example.name}.war" />
	</target>

	<!-- #################### TEST TARGETS (JBOSS AS) ##################### -->
	<!--
	  You can test the example by running the test target.  
	-->

	<path id="emma.classpath">
		<pathelement location="${seam.dir}/extras/emma/emma.jar" />
		<pathelement location="${seam.dir}/extras/emma/emma_ant.jar" />
	</path>

	<target name="validateConfiguration" description="Validate XML Configuration files">
		<echo message="Validating configuaration files for ${Name}" />
		<ant antfile="${seam.dir}/validate.xml" target="validateConfiguration">
			<reference refid="validate.resources" />
		</ant>
	</target>

	<!-- Compile the test classes -->
	<target name="compiletest" unless="eclipse.running" depends="init">
		<mkdir dir="${test.dir}" />
		<javac classpathref="build.classpath" destdir="${test.dir}" debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.java.dir}" />
			<src path="${src.test.dir}" />
		</javac>
	</target>

	<!-- Build the exploded test directory structure -->
	<target name="buildtest" depends="compiletest">
		<copy todir="${test.dir}">
			<fileset dir="${resources.dir}">
				<exclude name="${example.ds}.xml" />
			</fileset>
		</copy>
		<copy todir="${test.dir}" flatten="true">
			<fileset dir="${src.test.dir}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<target name="test" depends="buildtest, copyjbossembedded" description="Run the tests">
		<path id="test.classpath">
			<path path="${test.dir}" />
			<fileset dir="${lib.dir}/test">
				<include name="*-all.jar" />
			</fileset>
			<fileset dir="${lib.dir}">
				<!-- Horrible hack around jbossembedded -->
				<exclude name="jboss-container.jar" />
				<exclude name="hibernate.jar" />
				<exclude name="hibernate-annotations.jar" />
			</fileset>
			<path path="${eejb.conf.dir}" />
			<path refid="build.classpath.extras" />
			<path refid="emma.classpath" />
		</path>
		<property name="cp" refid="test.classpath" />
		<echo file="output">${cp}</echo>
		<taskdef resource="testngtasks" classpathref="build.classpath" />
		<testng outputdir="${test-report.dir}">
                    <jvmarg value="-Xmx800M" />
                    <jvmarg value="-Djava.awt.headless=true" />
			<classpath refid="test.classpath" />
			<xmlfileset dir="${src.test.dir}" includes="**/*.xml" />
		</testng>
	</target>
</project>
